
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a464  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800a5f8  0800a5f8  0000b5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab9c  0800ab9c  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab9c  0800ab9c  0000bb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aba4  0800aba4  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aba4  0800aba4  0000bba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aba8  0800aba8  0000bba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800abac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000279c  200001d8  0800ad84  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002974  0800ad84  0000c974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feac  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b68  00000000  00000000  0001c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0001ec20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1f  00000000  00000000  0001fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e398  00000000  00000000  0002061f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011415  00000000  00000000  0003e9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8368  00000000  00000000  0004fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  000f8178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  000fd190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5dc 	.word	0x0800a5dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a5dc 	.word	0x0800a5dc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200011b0 	.word	0x200011b0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	@ 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_dmul>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800069e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006a6:	bf1d      	ittte	ne
 80006a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ac:	ea94 0f0c 	teqne	r4, ip
 80006b0:	ea95 0f0c 	teqne	r5, ip
 80006b4:	f000 f8de 	bleq	8000874 <__aeabi_dmul+0x1dc>
 80006b8:	442c      	add	r4, r5
 80006ba:	ea81 0603 	eor.w	r6, r1, r3
 80006be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ca:	bf18      	it	ne
 80006cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006d8:	d038      	beq.n	800074c <__aeabi_dmul+0xb4>
 80006da:	fba0 ce02 	umull	ip, lr, r0, r2
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ee:	f04f 0600 	mov.w	r6, #0
 80006f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006f6:	f09c 0f00 	teq	ip, #0
 80006fa:	bf18      	it	ne
 80006fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000700:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000704:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000708:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800070c:	d204      	bcs.n	8000718 <__aeabi_dmul+0x80>
 800070e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000712:	416d      	adcs	r5, r5
 8000714:	eb46 0606 	adc.w	r6, r6, r6
 8000718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800071c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800072c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000730:	bf88      	it	hi
 8000732:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000736:	d81e      	bhi.n	8000776 <__aeabi_dmul+0xde>
 8000738:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000750:	ea46 0101 	orr.w	r1, r6, r1
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000760:	bfc2      	ittt	gt
 8000762:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076a:	bd70      	popgt	{r4, r5, r6, pc}
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000770:	f04f 0e00 	mov.w	lr, #0
 8000774:	3c01      	subs	r4, #1
 8000776:	f300 80ab 	bgt.w	80008d0 <__aeabi_dmul+0x238>
 800077a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800077e:	bfde      	ittt	le
 8000780:	2000      	movle	r0, #0
 8000782:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000786:	bd70      	pople	{r4, r5, r6, pc}
 8000788:	f1c4 0400 	rsb	r4, r4, #0
 800078c:	3c20      	subs	r4, #32
 800078e:	da35      	bge.n	80007fc <__aeabi_dmul+0x164>
 8000790:	340c      	adds	r4, #12
 8000792:	dc1b      	bgt.n	80007cc <__aeabi_dmul+0x134>
 8000794:	f104 0414 	add.w	r4, r4, #20
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f305 	lsl.w	r3, r0, r5
 80007a0:	fa20 f004 	lsr.w	r0, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b8:	fa21 f604 	lsr.w	r6, r1, r4
 80007bc:	eb42 0106 	adc.w	r1, r2, r6
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 040c 	rsb	r4, r4, #12
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f304 	lsl.w	r3, r0, r4
 80007d8:	fa20 f005 	lsr.w	r0, r0, r5
 80007dc:	fa01 f204 	lsl.w	r2, r1, r4
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	f141 0100 	adc.w	r1, r1, #0
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f205 	lsl.w	r2, r0, r5
 8000804:	ea4e 0e02 	orr.w	lr, lr, r2
 8000808:	fa20 f304 	lsr.w	r3, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea43 0302 	orr.w	r3, r3, r2
 8000814:	fa21 f004 	lsr.w	r0, r1, r4
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	fa21 f204 	lsr.w	r2, r1, r4
 8000820:	ea20 0002 	bic.w	r0, r0, r2
 8000824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f094 0f00 	teq	r4, #0
 8000838:	d10f      	bne.n	800085a <__aeabi_dmul+0x1c2>
 800083a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800083e:	0040      	lsls	r0, r0, #1
 8000840:	eb41 0101 	adc.w	r1, r1, r1
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf08      	it	eq
 800084a:	3c01      	subeq	r4, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1a6>
 800084e:	ea41 0106 	orr.w	r1, r1, r6
 8000852:	f095 0f00 	teq	r5, #0
 8000856:	bf18      	it	ne
 8000858:	4770      	bxne	lr
 800085a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	eb43 0303 	adc.w	r3, r3, r3
 8000864:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3d01      	subeq	r5, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1c6>
 800086e:	ea43 0306 	orr.w	r3, r3, r6
 8000872:	4770      	bx	lr
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800087c:	bf18      	it	ne
 800087e:	ea95 0f0c 	teqne	r5, ip
 8000882:	d00c      	beq.n	800089e <__aeabi_dmul+0x206>
 8000884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088e:	d1d1      	bne.n	8000834 <__aeabi_dmul+0x19c>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a2:	bf06      	itte	eq
 80008a4:	4610      	moveq	r0, r2
 80008a6:	4619      	moveq	r1, r3
 80008a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ac:	d019      	beq.n	80008e2 <__aeabi_dmul+0x24a>
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	d102      	bne.n	80008ba <__aeabi_dmul+0x222>
 80008b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b8:	d113      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	d105      	bne.n	80008cc <__aeabi_dmul+0x234>
 80008c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c4:	bf1c      	itt	ne
 80008c6:	4610      	movne	r0, r2
 80008c8:	4619      	movne	r1, r3
 80008ca:	d10a      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__aeabi_ddiv>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fa:	bf1d      	ittte	ne
 80008fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000900:	ea94 0f0c 	teqne	r4, ip
 8000904:	ea95 0f0c 	teqne	r5, ip
 8000908:	f000 f8a7 	bleq	8000a5a <__aeabi_ddiv+0x16e>
 800090c:	eba4 0405 	sub.w	r4, r4, r5
 8000910:	ea81 0e03 	eor.w	lr, r1, r3
 8000914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800091c:	f000 8088 	beq.w	8000a30 <__aeabi_ddiv+0x144>
 8000920:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000924:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800092c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800093c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000940:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000944:	429d      	cmp	r5, r3
 8000946:	bf08      	it	eq
 8000948:	4296      	cmpeq	r6, r2
 800094a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800094e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000952:	d202      	bcs.n	800095a <__aeabi_ddiv+0x6e>
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	1ab6      	subs	r6, r6, r2
 800095c:	eb65 0503 	sbc.w	r5, r5, r3
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800096a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009cc:	d018      	beq.n	8000a00 <__aeabi_ddiv+0x114>
 80009ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ea:	d1c0      	bne.n	800096e <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_ddiv+0x11e>
 80009f2:	ea41 0100 	orr.w	r1, r1, r0
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009fe:	e7b6      	b.n	800096e <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a04:	bf04      	itt	eq
 8000a06:	4301      	orreq	r1, r0
 8000a08:	2000      	moveq	r0, #0
 8000a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a0e:	bf88      	it	hi
 8000a10:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a14:	f63f aeaf 	bhi.w	8000776 <__aeabi_dmul+0xde>
 8000a18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a1c:	bf04      	itt	eq
 8000a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a26:	f150 0000 	adcs.w	r0, r0, #0
 8000a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a3c:	bfc2      	ittt	gt
 8000a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	popgt	{r4, r5, r6, pc}
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4c:	f04f 0e00 	mov.w	lr, #0
 8000a50:	3c01      	subs	r4, #1
 8000a52:	e690      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a54:	ea45 0e06 	orr.w	lr, r5, r6
 8000a58:	e68d      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5e:	ea94 0f0c 	teq	r4, ip
 8000a62:	bf08      	it	eq
 8000a64:	ea95 0f0c 	teqeq	r5, ip
 8000a68:	f43f af3b 	beq.w	80008e2 <__aeabi_dmul+0x24a>
 8000a6c:	ea94 0f0c 	teq	r4, ip
 8000a70:	d10a      	bne.n	8000a88 <__aeabi_ddiv+0x19c>
 8000a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a76:	f47f af34 	bne.w	80008e2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	f47f af25 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e72c      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a88:	ea95 0f0c 	teq	r5, ip
 8000a8c:	d106      	bne.n	8000a9c <__aeabi_ddiv+0x1b0>
 8000a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a92:	f43f aefd 	beq.w	8000890 <__aeabi_dmul+0x1f8>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e722      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa6:	f47f aec5 	bne.w	8000834 <__aeabi_dmul+0x19c>
 8000aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aae:	f47f af0d 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ab6:	f47f aeeb 	bne.w	8000890 <__aeabi_dmul+0x1f8>
 8000aba:	e712      	b.n	80008e2 <__aeabi_dmul+0x24a>

08000abc <__gedf2>:
 8000abc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ac0:	e006      	b.n	8000ad0 <__cmpdf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__ledf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	e002      	b.n	8000ad0 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__cmpdf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ae6:	d01b      	beq.n	8000b20 <__cmpdf2+0x54>
 8000ae8:	b001      	add	sp, #4
 8000aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aee:	bf0c      	ite	eq
 8000af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000af4:	ea91 0f03 	teqne	r1, r3
 8000af8:	bf02      	ittt	eq
 8000afa:	ea90 0f02 	teqeq	r0, r2
 8000afe:	2000      	moveq	r0, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	f110 0f00 	cmn.w	r0, #0
 8000b06:	ea91 0f03 	teq	r1, r3
 8000b0a:	bf58      	it	pl
 8000b0c:	4299      	cmppl	r1, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4290      	cmpeq	r0, r2
 8000b12:	bf2c      	ite	cs
 8000b14:	17d8      	asrcs	r0, r3, #31
 8000b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b1a:	f040 0001 	orr.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__cmpdf2+0x64>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d107      	bne.n	8000b40 <__cmpdf2+0x74>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d1d6      	bne.n	8000ae8 <__cmpdf2+0x1c>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d0d3      	beq.n	8000ae8 <__cmpdf2+0x1c>
 8000b40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdrcmple>:
 8000b48:	4684      	mov	ip, r0
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	468c      	mov	ip, r1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	e000      	b.n	8000b58 <__aeabi_cdcmpeq>
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdcmpeq>:
 8000b58:	b501      	push	{r0, lr}
 8000b5a:	f7ff ffb7 	bl	8000acc <__cmpdf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <__aeabi_dcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffce 	bl	8000b48 <__aeabi_cdrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc4 	bl	8000b48 <__aeabi_cdrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpun>:
 8000bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x10>
 8000bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bda:	d10a      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x20>
 8000be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0001 	mov.w	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2uiz>:
 8000c48:	004a      	lsls	r2, r1, #1
 8000c4a:	d211      	bcs.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c50:	d211      	bcs.n	8000c76 <__aeabi_d2uiz+0x2e>
 8000c52:	d50d      	bpl.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d40e      	bmi.n	8000c7c <__aeabi_d2uiz+0x34>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c7a:	d102      	bne.n	8000c82 <__aeabi_d2uiz+0x3a>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	4770      	bx	lr
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff23 	bl	8000b7c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc99 	bl	8000698 <__aeabi_dmul>
 8000d66:	f7ff ff6f 	bl	8000c48 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc1a 	bl	80005a4 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc90 	bl	8000698 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff fad2 	bl	8000328 <__aeabi_dsub>
 8000d84:	f7ff ff60 	bl	8000c48 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000da4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	4a06      	ldr	r2, [pc, #24]	@ (8000dc4 <vApplicationGetIdleTaskMemory+0x30>)
 8000daa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2280      	movs	r2, #128	@ 0x80
 8000db0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000200 	.word	0x20000200
 8000dc4:	2000025c 	.word	0x2000025c

08000dc8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <MX_FREERTOS_Init+0x30>)
 8000dd0:	1d3c      	adds	r4, r7, #4
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ddc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 ff7e 	bl	8002ce6 <osThreadCreate>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a03      	ldr	r2, [pc, #12]	@ (8000dfc <MX_FREERTOS_Init+0x34>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bdb0      	pop	{r4, r5, r7, pc}
 8000df8:	0800a604 	.word	0x0800a604
 8000dfc:	200001fc 	.word	0x200001fc

08000e00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	BaseType_t status;
	status = xTaskCreate(task1, "task1", 200, "Hello world task 1", 2, &handle_task1);
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <StartDefaultTask+0x78>)
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <StartDefaultTask+0x7c>)
 8000e12:	22c8      	movs	r2, #200	@ 0xc8
 8000e14:	491a      	ldr	r1, [pc, #104]	@ (8000e80 <StartDefaultTask+0x80>)
 8000e16:	481b      	ldr	r0, [pc, #108]	@ (8000e84 <StartDefaultTask+0x84>)
 8000e18:	f002 f8d8 	bl	8002fcc <xTaskCreate>
 8000e1c:	6178      	str	r0, [r7, #20]

	configASSERT( status == pdPASS );
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d00b      	beq.n	8000e3c <StartDefaultTask+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e28:	f383 8811 	msr	BASEPRI, r3
 8000e2c:	f3bf 8f6f 	isb	sy
 8000e30:	f3bf 8f4f 	dsb	sy
 8000e34:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <StartDefaultTask+0x38>

	status = xTaskCreate(task2, "task2", 200, "Hello world task 2", 2, &handle_task2);
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <StartDefaultTask+0x88>)
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	2302      	movs	r3, #2
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <StartDefaultTask+0x8c>)
 8000e46:	22c8      	movs	r2, #200	@ 0xc8
 8000e48:	4911      	ldr	r1, [pc, #68]	@ (8000e90 <StartDefaultTask+0x90>)
 8000e4a:	4812      	ldr	r0, [pc, #72]	@ (8000e94 <StartDefaultTask+0x94>)
 8000e4c:	f002 f8be 	bl	8002fcc <xTaskCreate>
 8000e50:	6178      	str	r0, [r7, #20]

	configASSERT( status == pdPASS );
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d00b      	beq.n	8000e70 <StartDefaultTask+0x70>
	__asm volatile
 8000e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e5c:	f383 8811 	msr	BASEPRI, r3
 8000e60:	f3bf 8f6f 	isb	sy
 8000e64:	f3bf 8f4f 	dsb	sy
 8000e68:	60fb      	str	r3, [r7, #12]
}
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <StartDefaultTask+0x6c>
  for(;;)
  {
    osDelay(1);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f001 ff84 	bl	8002d7e <osDelay>
 8000e76:	e7fb      	b.n	8000e70 <StartDefaultTask+0x70>
 8000e78:	200001f4 	.word	0x200001f4
 8000e7c:	0800a620 	.word	0x0800a620
 8000e80:	0800a634 	.word	0x0800a634
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	200001f8 	.word	0x200001f8
 8000e8c:	0800a63c 	.word	0x0800a63c
 8000e90:	0800a650 	.word	0x0800a650
 8000e94:	08000ea9 	.word	0x08000ea9

08000e98 <task1>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void task1(void*param){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n", (char*)param);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f005 ff53 	bl	8006d4c <puts>
 8000ea6:	e7fb      	b.n	8000ea0 <task1+0x8>

08000ea8 <task2>:
	}
}

static void task2(void*param){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n", (char*)param);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f005 ff4b 	bl	8006d4c <puts>
 8000eb6:	e7fb      	b.n	8000eb0 <task2+0x8>

08000eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a24      	ldr	r2, [pc, #144]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000ed4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a1e      	ldr	r2, [pc, #120]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a18      	ldr	r2, [pc, #96]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <MX_GPIO_Init+0xac>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f1c:	4812      	ldr	r0, [pc, #72]	@ (8000f68 <MX_GPIO_Init+0xb0>)
 8000f1e:	f000 fcd9 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <MX_GPIO_Init+0xb4>)
 8000f3a:	f000 fb59 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_GPIO_Init+0xb0>)
 8000f58:	f000 fb4a 	bl	80015f0 <HAL_GPIO_Init>

}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	48000800 	.word	0x48000800

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 f9cc 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f818 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff ff78 	bl	8000eb8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  NVIC_SetPriorityGrouping( 0 );
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ffd1 	bl	8000f70 <__NVIC_SetPriorityGrouping>

  DWT_CTRL |= ( 1 << 0 );
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <main+0x38>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <main+0x38>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000fda:	f004 fe0f 	bl	8005bfc <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000fde:	f004 f81f 	bl	8005020 <SEGGER_SYSVIEW_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fe2:	f7ff fef1 	bl	8000dc8 <MX_FREERTOS_Init>

  /* Start scheduler */

  osKernelStart();
 8000fe6:	f001 fe77 	bl	8002cd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fea:	bf00      	nop
 8000fec:	e7fd      	b.n	8000fea <main+0x32>
 8000fee:	bf00      	nop
 8000ff0:	e0001000 	.word	0xe0001000

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b090      	sub	sp, #64	@ 0x40
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2228      	movs	r2, #40	@ 0x28
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f005 ffb4 	bl	8006f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800101e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001028:	2302      	movs	r3, #2
 800102a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001030:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001032:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fc61 	bl	8001904 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001048:	f000 f819 	bl	800107e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fc5a 	bl	8002920 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001072:	f000 f804 	bl	800107e <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3740      	adds	r7, #64	@ 0x40
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001082:	b672      	cpsid	i
}
 8001084:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <Error_Handler+0x8>
	...

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_MspInit+0x4c>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <HAL_MspInit+0x4c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6193      	str	r3, [r2, #24]
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_MspInit+0x4c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_MspInit+0x4c>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_MspInit+0x4c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_MspInit+0x4c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	210f      	movs	r1, #15
 80010c6:	f06f 0001 	mvn.w	r0, #1
 80010ca:	f000 fa68 	bl	800159e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <hardfault_c>:

/* External variables --------------------------------------------------------*/

/* USER CODE BEGIN EV */
void hardfault_c(uint32_t *sp)
{
 80010dc:	b480      	push	{r7}
 80010de:	b08b      	sub	sp, #44	@ 0x2c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  volatile uint32_t r0  = sp[0];
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
  volatile uint32_t r1  = sp[1];
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	623b      	str	r3, [r7, #32]
  volatile uint32_t r2  = sp[2];
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	61fb      	str	r3, [r7, #28]
  volatile uint32_t r3  = sp[3];
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	61bb      	str	r3, [r7, #24]
  volatile uint32_t r12 = sp[4];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	617b      	str	r3, [r7, #20]
  volatile uint32_t lr  = sp[5];
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	613b      	str	r3, [r7, #16]
  volatile uint32_t pc  = sp[6];  // <— endereço que faultou
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t psr = sp[7];
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	60bb      	str	r3, [r7, #8]
  (void)r0;(void)r1;(void)r2;(void)r3;(void)r12;(void)lr;(void)pc;(void)psr;
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	68bb      	ldr	r3, [r7, #8]
  while (1);
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <hardfault_c+0x48>

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <NMI_Handler+0x4>

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __asm volatile(
 8001134:	f01e 0f04 	tst.w	lr, #4
 8001138:	bf0c      	ite	eq
 800113a:	f3ef 8008 	mrseq	r0, MSP
 800113e:	f3ef 8009 	mrsne	r0, PSP
 8001142:	f7ff bfcb 	b.w	80010dc <hardfault_c>
	    "mrseq r0, msp     \n"
	    "mrsne r0, psp     \n"
	    "b hardfault_c     \n"
	  );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	bf00      	nop
 8001148:	e7fd      	b.n	8001146 <HardFault_Handler+0x16>

0800114a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	bf00      	nop
 8001158:	e7fd      	b.n	8001156 <BusFault_Handler+0x4>

0800115a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115e:	bf00      	nop
 8001160:	e7fd      	b.n	800115e <UsageFault_Handler+0x4>

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f936 	bl	80013e4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001178:	f002 fbe8 	bl	800394c <xTaskGetSchedulerState>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d001      	beq.n	8001186 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001182:	f002 fe39 	bl	8003df8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <_kill>:

int _kill(int pid, int sig)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011a4:	f005 ff24 	bl	8006ff0 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2216      	movs	r2, #22
 80011ac:	601a      	str	r2, [r3, #0]
  return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_exit>:

void _exit (int status)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011c2:	f04f 31ff 	mov.w	r1, #4294967295
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffe7 	bl	800119a <_kill>
  while (1) {}    /* Make sure we hang here */
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <_exit+0x12>

080011d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e00a      	b.n	80011f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011e2:	f3af 8000 	nop.w
 80011e6:	4601      	mov	r1, r0
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	b2ca      	uxtb	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf0      	blt.n	80011e2 <_read+0x12>
  }

  return len;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_close>:
  }
  return len;
}

int _close(int file)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001232:	605a      	str	r2, [r3, #4]
  return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_isatty>:

int _isatty(int file)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f005 fea4 	bl	8006ff0 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20004000 	.word	0x20004000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	2000045c 	.word	0x2000045c
 80012dc:	20002978 	.word	0x20002978

080012e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800133c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001308:	f7ff ffea 	bl	80012e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800130c:	480c      	ldr	r0, [pc, #48]	@ (8001340 <LoopForever+0x6>)
  ldr r1, =_edata
 800130e:	490d      	ldr	r1, [pc, #52]	@ (8001344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <LoopForever+0xe>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001324:	4c0a      	ldr	r4, [pc, #40]	@ (8001350 <LoopForever+0x16>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001332:	f005 fe63 	bl	8006ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001336:	f7ff fe3f 	bl	8000fb8 <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800133c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001348:	0800abac 	.word	0x0800abac
  ldr r2, =_sbss
 800134c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001350:	20002974 	.word	0x20002974

08001354 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_IRQHandler>
	...

08001358 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <HAL_Init+0x28>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	@ (8001380 <HAL_Init+0x28>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f90d 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	200f      	movs	r0, #15
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fe8a 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40022000 	.word	0x40022000

08001384 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f917 	bl	80015d6 <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f8ed 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	@ (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	20000460 	.word	0x20000460

0800140c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000460 	.word	0x20000460

08001424 <__NVIC_SetPriorityGrouping>:
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	@ (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	@ 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	@ 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff8e 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff47 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff5c 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff8e 	bl	80014dc <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5d 	bl	8001488 <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffb0 	bl	8001544 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e14e      	b.n	800189e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8140 	beq.w	8001898 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d005      	beq.n	8001630 <HAL_GPIO_Init+0x40>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d130      	bne.n	8001692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001666:	2201      	movs	r2, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 0201 	and.w	r2, r3, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b03      	cmp	r3, #3
 800169c:	d017      	beq.n	80016ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d123      	bne.n	8001722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0203 	and.w	r2, r3, #3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 809a 	beq.w	8001898 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001764:	4b55      	ldr	r3, [pc, #340]	@ (80018bc <HAL_GPIO_Init+0x2cc>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a54      	ldr	r2, [pc, #336]	@ (80018bc <HAL_GPIO_Init+0x2cc>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b52      	ldr	r3, [pc, #328]	@ (80018bc <HAL_GPIO_Init+0x2cc>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800177c:	4a50      	ldr	r2, [pc, #320]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017a6:	d013      	beq.n	80017d0 <HAL_GPIO_Init+0x1e0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a46      	ldr	r2, [pc, #280]	@ (80018c4 <HAL_GPIO_Init+0x2d4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1dc>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a45      	ldr	r2, [pc, #276]	@ (80018c8 <HAL_GPIO_Init+0x2d8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1d8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a44      	ldr	r2, [pc, #272]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1d4>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e006      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017c4:	2305      	movs	r3, #5
 80017c6:	e004      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017d0:	2300      	movs	r3, #0
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	f002 0203 	and.w	r2, r2, #3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4093      	lsls	r3, r2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e2:	4937      	ldr	r1, [pc, #220]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f0:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001814:	4a2e      	ldr	r2, [pc, #184]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800181a:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800183e:	4a24      	ldr	r2, [pc, #144]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001844:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f aea9 	bne.w	8001600 <HAL_GPIO_Init+0x10>
  }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	48000400 	.word	0x48000400
 80018c8:	48000800 	.word	0x48000800
 80018cc:	48000c00 	.word	0x48000c00
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800190a:	af00      	add	r7, sp, #0
 800190c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001914:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	f000 bff4 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 816d 	beq.w	8001c1a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001940:	4bb4      	ldr	r3, [pc, #720]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b04      	cmp	r3, #4
 800194a:	d00c      	beq.n	8001966 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800194c:	4bb1      	ldr	r3, [pc, #708]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d157      	bne.n	8001a08 <HAL_RCC_OscConfig+0x104>
 8001958:	4bae      	ldr	r3, [pc, #696]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001964:	d150      	bne.n	8001a08 <HAL_RCC_OscConfig+0x104>
 8001966:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800196a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800197a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b3f      	cmp	r3, #63	@ 0x3f
 8001986:	d802      	bhi.n	800198e <HAL_RCC_OscConfig+0x8a>
 8001988:	4ba2      	ldr	r3, [pc, #648]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0xb6>
 800198e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001992:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019aa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80019b6:	4b97      	ldr	r3, [pc, #604]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019be:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80019c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80019c6:	fa92 f2a2 	rbit	r2, r2
 80019ca:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80019ce:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80019d2:	fab2 f282 	clz	r2, r2
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f042 0220 	orr.w	r2, r2, #32
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	f002 021f 	and.w	r2, r2, #31
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8114 	beq.w	8001c18 <HAL_RCC_OscConfig+0x314>
 80019f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 810b 	bne.w	8001c18 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f000 bf85 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a18:	d106      	bne.n	8001a28 <HAL_RCC_OscConfig+0x124>
 8001a1a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e036      	b.n	8001a96 <HAL_RCC_OscConfig+0x192>
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x14e>
 8001a38:	4b76      	ldr	r3, [pc, #472]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a75      	ldr	r2, [pc, #468]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b73      	ldr	r3, [pc, #460]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a72      	ldr	r2, [pc, #456]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e021      	b.n	8001a96 <HAL_RCC_OscConfig+0x192>
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a62:	d10c      	bne.n	8001a7e <HAL_RCC_OscConfig+0x17a>
 8001a64:	4b6b      	ldr	r3, [pc, #428]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6a      	ldr	r2, [pc, #424]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b68      	ldr	r3, [pc, #416]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a67      	ldr	r2, [pc, #412]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e00b      	b.n	8001a96 <HAL_RCC_OscConfig+0x192>
 8001a7e:	4b65      	ldr	r3, [pc, #404]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a64      	ldr	r2, [pc, #400]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b62      	ldr	r3, [pc, #392]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a61      	ldr	r2, [pc, #388]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a96:	4b5f      	ldr	r3, [pc, #380]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9a:	f023 020f 	bic.w	r2, r3, #15
 8001a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	495a      	ldr	r1, [pc, #360]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d054      	beq.n	8001b6a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fca4 	bl	800140c <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aca:	f7ff fc9f 	bl	800140c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d902      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	f000 bf19 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>
 8001ae0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ae4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001af4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b00:	d802      	bhi.n	8001b08 <HAL_RCC_OscConfig+0x204>
 8001b02:	4b44      	ldr	r3, [pc, #272]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	e015      	b.n	8001b34 <HAL_RCC_OscConfig+0x230>
 8001b08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b0c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b20:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b30:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b38:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b40:	fa92 f2a2 	rbit	r2, r2
 8001b44:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b4c:	fab2 f282 	clz	r2, r2
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f042 0220 	orr.w	r2, r2, #32
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f002 021f 	and.w	r2, r2, #31
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0b0      	beq.n	8001aca <HAL_RCC_OscConfig+0x1c6>
 8001b68:	e057      	b.n	8001c1a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fc4f 	bl	800140c <HAL_GetTick>
 8001b6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fc4a 	bl	800140c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	@ 0x64
 8001b82:	d902      	bls.n	8001b8a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f000 bec4 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>
 8001b8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b8e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001b9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001baa:	d802      	bhi.n	8001bb2 <HAL_RCC_OscConfig+0x2ae>
 8001bac:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	e015      	b.n	8001bde <HAL_RCC_OscConfig+0x2da>
 8001bb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001bc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bca:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_RCC_OscConfig+0x310>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001be2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001be6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001bea:	fa92 f2a2 	rbit	r2, r2
 8001bee:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001bf2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001bf6:	fab2 f282 	clz	r2, r2
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f042 0220 	orr.w	r2, r2, #32
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f002 021f 	and.w	r2, r2, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1b0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x270>
 8001c12:	e002      	b.n	8001c1a <HAL_RCC_OscConfig+0x316>
 8001c14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 816c 	beq.w	8001f08 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c30:	4bcc      	ldr	r3, [pc, #816]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00b      	beq.n	8001c54 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c3c:	4bc9      	ldr	r3, [pc, #804]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d16d      	bne.n	8001d24 <HAL_RCC_OscConfig+0x420>
 8001c48:	4bc6      	ldr	r3, [pc, #792]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d167      	bne.n	8001d24 <HAL_RCC_OscConfig+0x420>
 8001c54:	2302      	movs	r3, #2
 8001c56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c72:	d802      	bhi.n	8001c7a <HAL_RCC_OscConfig+0x376>
 8001c74:	4bbb      	ldr	r3, [pc, #748]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e013      	b.n	8001ca2 <HAL_RCC_OscConfig+0x39e>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c92:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001c9e:	4bb1      	ldr	r3, [pc, #708]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ca8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001cac:	fa92 f2a2 	rbit	r2, r2
 8001cb0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001cb4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f042 0220 	orr.w	r2, r2, #32
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f002 021f 	and.w	r2, r2, #31
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00a      	beq.n	8001cea <HAL_RCC_OscConfig+0x3e6>
 8001cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d002      	beq.n	8001cea <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f000 be14 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b9e      	ldr	r3, [pc, #632]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	21f8      	movs	r1, #248	@ 0xf8
 8001d00:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d08:	fa91 f1a1 	rbit	r1, r1
 8001d0c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d10:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d14:	fab1 f181 	clz	r1, r1
 8001d18:	b2c9      	uxtb	r1, r1
 8001d1a:	408b      	lsls	r3, r1
 8001d1c:	4991      	ldr	r1, [pc, #580]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	e0f1      	b.n	8001f08 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8083 	beq.w	8001e3c <HAL_RCC_OscConfig+0x538>
 8001d36:	2301      	movs	r3, #1
 8001d38:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001d48:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d56:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2301      	movs	r3, #1
 8001d60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fb53 	bl	800140c <HAL_GetTick>
 8001d66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fb4e 	bl	800140c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d902      	bls.n	8001d82 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	f000 bdc8 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001d94:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001da0:	d802      	bhi.n	8001da8 <HAL_RCC_OscConfig+0x4a4>
 8001da2:	4b70      	ldr	r3, [pc, #448]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e013      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4cc>
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001dc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001dcc:	4b65      	ldr	r3, [pc, #404]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001dd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001dda:	fa92 f2a2 	rbit	r2, r2
 8001dde:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001de2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f042 0220 	orr.w	r2, r2, #32
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f002 021f 	and.w	r2, r2, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0b4      	beq.n	8001d6c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b58      	ldr	r3, [pc, #352]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	21f8      	movs	r1, #248	@ 0xf8
 8001e18:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e20:	fa91 f1a1 	rbit	r1, r1
 8001e24:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e28:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e2c:	fab1 f181 	clz	r1, r1
 8001e30:	b2c9      	uxtb	r1, r1
 8001e32:	408b      	lsls	r3, r1
 8001e34:	494b      	ldr	r1, [pc, #300]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
 8001e3a:	e065      	b.n	8001f08 <HAL_RCC_OscConfig+0x604>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	461a      	mov	r2, r3
 8001e64:	2300      	movs	r3, #0
 8001e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fad0 	bl	800140c <HAL_GetTick>
 8001e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff facb 	bl	800140c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d902      	bls.n	8001e88 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f000 bd45 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ea6:	d802      	bhi.n	8001eae <HAL_RCC_OscConfig+0x5aa>
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	e013      	b.n	8001ed6 <HAL_RCC_OscConfig+0x5d2>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001ed2:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <HAL_RCC_OscConfig+0x660>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001edc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ee0:	fa92 f2a2 	rbit	r2, r2
 8001ee4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001ee8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001eec:	fab2 f282 	clz	r2, r2
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f042 0220 	orr.w	r2, r2, #32
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	f002 021f 	and.w	r2, r2, #31
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f202 	lsl.w	r2, r1, r2
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1b4      	bne.n	8001e72 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8115 	beq.w	8002148 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d07e      	beq.n	800202c <HAL_RCC_OscConfig+0x728>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_RCC_OscConfig+0x664>)
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	461a      	mov	r2, r3
 8001f54:	2301      	movs	r3, #1
 8001f56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f58:	f7ff fa58 	bl	800140c <HAL_GetTick>
 8001f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f60:	e00f      	b.n	8001f82 <HAL_RCC_OscConfig+0x67e>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fa4e 	bl	800140c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d902      	bls.n	8001f82 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f000 bcc8 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fda:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fdc:	4bb0      	ldr	r3, [pc, #704]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8001fde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fe8:	2102      	movs	r1, #2
 8001fea:	6019      	str	r1, [r3, #0]
 8001fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f1a3 	rbit	r1, r3
 8001ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002002:	6019      	str	r1, [r3, #0]
  return result;
 8002004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002008:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0a0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x668>
 800202a:	e08d      	b.n	8002148 <HAL_RCC_OscConfig+0x844>
 800202c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002030:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800204e:	601a      	str	r2, [r3, #0]
  return result;
 8002050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002054:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002058:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	4b90      	ldr	r3, [pc, #576]	@ (80022a4 <HAL_RCC_OscConfig+0x9a0>)
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	461a      	mov	r2, r3
 800206a:	2300      	movs	r3, #0
 800206c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7ff f9cd 	bl	800140c <HAL_GetTick>
 8002072:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff f9c8 	bl	800140c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d902      	bls.n	800208e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	f000 bc42 	b.w	8002912 <HAL_RCC_OscConfig+0x100e>
 800208e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002092:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002096:	2202      	movs	r2, #2
 8002098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020ba:	2202      	movs	r2, #2
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f2a3 	rbit	r2, r3
 80020cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fa:	4b69      	ldr	r3, [pc, #420]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 80020fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002106:	2102      	movs	r1, #2
 8002108:	6019      	str	r1, [r3, #0]
 800210a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	fa93 f1a3 	rbit	r1, r3
 8002118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002120:	6019      	str	r1, [r3, #0]
  return result;
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d197      	bne.n	8002078 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 819e 	beq.w	800249a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002164:	4b4e      	ldr	r3, [pc, #312]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d116      	bne.n	800219e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	4b4b      	ldr	r3, [pc, #300]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4a4a      	ldr	r2, [pc, #296]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217a:	61d3      	str	r3, [r2, #28]
 800217c:	4b48      	ldr	r3, [pc, #288]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002196:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b42      	ldr	r3, [pc, #264]	@ (80022a8 <HAL_RCC_OscConfig+0x9a4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11a      	bne.n	80021e0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b3f      	ldr	r3, [pc, #252]	@ (80022a8 <HAL_RCC_OscConfig+0x9a4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3e      	ldr	r2, [pc, #248]	@ (80022a8 <HAL_RCC_OscConfig+0x9a4>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7ff f929 	bl	800140c <HAL_GetTick>
 80021ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021be:	e009      	b.n	80021d4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c0:	f7ff f924 	bl	800140c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	@ 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e39e      	b.n	8002912 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <HAL_RCC_OscConfig+0x9a4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ef      	beq.n	80021c0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x8fa>
 80021f0:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	e035      	b.n	800226a <HAL_RCC_OscConfig+0x966>
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x924>
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a23      	ldr	r2, [pc, #140]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a20      	ldr	r2, [pc, #128]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	e020      	b.n	800226a <HAL_RCC_OscConfig+0x966>
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d10c      	bne.n	8002252 <HAL_RCC_OscConfig+0x94e>
 8002238:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4a18      	ldr	r2, [pc, #96]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6213      	str	r3, [r2, #32]
 8002244:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a15      	ldr	r2, [pc, #84]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e00b      	b.n	800226a <HAL_RCC_OscConfig+0x966>
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a0f      	ldr	r2, [pc, #60]	@ (80022a0 <HAL_RCC_OscConfig+0x99c>)
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8087 	beq.w	800238a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff f8c6 	bl	800140c <HAL_GetTick>
 8002280:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e012      	b.n	80022ac <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f8c1 	bl	800140c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d908      	bls.n	80022ac <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e339      	b.n	8002912 <HAL_RCC_OscConfig+0x100e>
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	10908120 	.word	0x10908120
 80022a8:	40007000 	.word	0x40007000
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022b4:	2202      	movs	r2, #2
 80022b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022f2:	601a      	str	r2, [r3, #0]
  return result;
 80022f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <HAL_RCC_OscConfig+0xa10>
 800230e:	4b98      	ldr	r3, [pc, #608]	@ (8002570 <HAL_RCC_OscConfig+0xc6c>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	e013      	b.n	800233c <HAL_RCC_OscConfig+0xa38>
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800231c:	2202      	movs	r2, #2
 800231e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fa93 f2a3 	rbit	r2, r3
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	4b8d      	ldr	r3, [pc, #564]	@ (8002570 <HAL_RCC_OscConfig+0xc6c>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002340:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002344:	2102      	movs	r1, #2
 8002346:	6011      	str	r1, [r2, #0]
 8002348:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800234c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	fa92 f1a2 	rbit	r1, r2
 8002356:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800235a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800235e:	6011      	str	r1, [r2, #0]
  return result;
 8002360:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002364:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	fab2 f282 	clz	r2, r2
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f002 021f 	and.w	r2, r2, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f202 	lsl.w	r2, r1, r2
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	f43f af7f 	beq.w	8002286 <HAL_RCC_OscConfig+0x982>
 8002388:	e07d      	b.n	8002486 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff f83f 	bl	800140c <HAL_GetTick>
 800238e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7ff f83a 	bl	800140c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e2b2      	b.n	8002912 <HAL_RCC_OscConfig+0x100e>
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023f2:	601a      	str	r2, [r3, #0]
  return result;
 80023f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0xb10>
 800240e:	4b58      	ldr	r3, [pc, #352]	@ (8002570 <HAL_RCC_OscConfig+0xc6c>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	e013      	b.n	800243c <HAL_RCC_OscConfig+0xb38>
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800241c:	2202      	movs	r2, #2
 800241e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002424:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002432:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	4b4d      	ldr	r3, [pc, #308]	@ (8002570 <HAL_RCC_OscConfig+0xc6c>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002440:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002444:	2102      	movs	r1, #2
 8002446:	6011      	str	r1, [r2, #0]
 8002448:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	fa92 f1a2 	rbit	r1, r2
 8002456:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800245e:	6011      	str	r1, [r2, #0]
  return result;
 8002460:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002464:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	fab2 f282 	clz	r2, r2
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f002 021f 	and.w	r2, r2, #31
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f202 	lsl.w	r2, r1, r2
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d186      	bne.n	8002394 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002486:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b38      	ldr	r3, [pc, #224]	@ (8002570 <HAL_RCC_OscConfig+0xc6c>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a37      	ldr	r2, [pc, #220]	@ (8002570 <HAL_RCC_OscConfig+0xc6c>)
 8002494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002498:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8232 	beq.w	8002910 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ac:	4b30      	ldr	r3, [pc, #192]	@ (8002570 <HAL_RCC_OscConfig+0xc6c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	f000 8201 	beq.w	80028bc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	f040 8157 	bne.w	800277a <HAL_RCC_OscConfig+0xe76>
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024f0:	601a      	str	r2, [r3, #0]
  return result;
 80024f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024fa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002506:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	461a      	mov	r2, r3
 800250e:	2300      	movs	r3, #0
 8002510:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe ff7b 	bl	800140c <HAL_GetTick>
 8002516:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251a:	e009      	b.n	8002530 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe ff76 	bl	800140c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e1f0      	b.n	8002912 <HAL_RCC_OscConfig+0x100e>
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002538:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800253c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002554:	601a      	str	r2, [r3, #0]
  return result;
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800255e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b3f      	cmp	r3, #63	@ 0x3f
 8002568:	d804      	bhi.n	8002574 <HAL_RCC_OscConfig+0xc70>
 800256a:	4b01      	ldr	r3, [pc, #4]	@ (8002570 <HAL_RCC_OscConfig+0xc6c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	e029      	b.n	80025c4 <HAL_RCC_OscConfig+0xcc0>
 8002570:	40021000 	.word	0x40021000
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800257c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002586:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	4bc3      	ldr	r3, [pc, #780]	@ (80028d0 <HAL_RCC_OscConfig+0xfcc>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025d0:	6011      	str	r1, [r2, #0]
 80025d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025d6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	fa92 f1a2 	rbit	r1, r2
 80025e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025e8:	6011      	str	r1, [r2, #0]
  return result;
 80025ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d185      	bne.n	800251c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002610:	4baf      	ldr	r3, [pc, #700]	@ (80028d0 <HAL_RCC_OscConfig+0xfcc>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	430b      	orrs	r3, r1
 8002632:	49a7      	ldr	r1, [pc, #668]	@ (80028d0 <HAL_RCC_OscConfig+0xfcc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002640:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800265c:	601a      	str	r2, [r3, #0]
  return result;
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002666:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002672:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	461a      	mov	r2, r3
 800267a:	2301      	movs	r3, #1
 800267c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe fec5 	bl	800140c <HAL_GetTick>
 8002682:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002686:	e009      	b.n	800269c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fec0 	bl	800140c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e13a      	b.n	8002912 <HAL_RCC_OscConfig+0x100e>
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	fa93 f2a3 	rbit	r2, r3
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026c0:	601a      	str	r2, [r3, #0]
  return result;
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80026d4:	d802      	bhi.n	80026dc <HAL_RCC_OscConfig+0xdd8>
 80026d6:	4b7e      	ldr	r3, [pc, #504]	@ (80028d0 <HAL_RCC_OscConfig+0xfcc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e027      	b.n	800272c <HAL_RCC_OscConfig+0xe28>
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800270a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002722:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b69      	ldr	r3, [pc, #420]	@ (80028d0 <HAL_RCC_OscConfig+0xfcc>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002730:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002734:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002738:	6011      	str	r1, [r2, #0]
 800273a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800273e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	fa92 f1a2 	rbit	r1, r2
 8002748:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800274c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002750:	6011      	str	r1, [r2, #0]
  return result;
 8002752:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002756:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f042 0220 	orr.w	r2, r2, #32
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f002 021f 	and.w	r2, r2, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d087      	beq.n	8002688 <HAL_RCC_OscConfig+0xd84>
 8002778:	e0ca      	b.n	8002910 <HAL_RCC_OscConfig+0x100c>
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002782:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800279e:	601a      	str	r2, [r3, #0]
  return result;
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	461a      	mov	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fe24 	bl	800140c <HAL_GetTick>
 80027c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	e009      	b.n	80027de <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fe1f 	bl	800140c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e099      	b.n	8002912 <HAL_RCC_OscConfig+0x100e>
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002802:	601a      	str	r2, [r3, #0]
  return result;
 8002804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002808:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800280c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b3f      	cmp	r3, #63	@ 0x3f
 8002816:	d802      	bhi.n	800281e <HAL_RCC_OscConfig+0xf1a>
 8002818:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <HAL_RCC_OscConfig+0xfcc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e027      	b.n	800286e <HAL_RCC_OscConfig+0xf6a>
 800281e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002822:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800282a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800284c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002856:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_RCC_OscConfig+0xfcc>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002872:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002876:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800287a:	6011      	str	r1, [r2, #0]
 800287c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002880:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	fa92 f1a2 	rbit	r1, r2
 800288a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800288e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002892:	6011      	str	r1, [r2, #0]
  return result;
 8002894:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002898:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	fab2 f282 	clz	r2, r2
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f042 0220 	orr.w	r2, r2, #32
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f002 021f 	and.w	r2, r2, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d187      	bne.n	80027ca <HAL_RCC_OscConfig+0xec6>
 80028ba:	e029      	b.n	8002910 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d103      	bne.n	80028d4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e020      	b.n	8002912 <HAL_RCC_OscConfig+0x100e>
 80028d0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <HAL_RCC_OscConfig+0x1018>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d10b      	bne.n	800290c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028f8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000

08002920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b09e      	sub	sp, #120	@ 0x78
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e154      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b89      	ldr	r3, [pc, #548]	@ (8002b60 <HAL_RCC_ClockConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d910      	bls.n	8002968 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b86      	ldr	r3, [pc, #536]	@ (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 0207 	bic.w	r2, r3, #7
 800294e:	4984      	ldr	r1, [pc, #528]	@ (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b82      	ldr	r3, [pc, #520]	@ (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e13c      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b7b      	ldr	r3, [pc, #492]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4978      	ldr	r1, [pc, #480]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80cd 	beq.w	8002b2e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d137      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xec>
 800299c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80029b4:	d802      	bhi.n	80029bc <HAL_RCC_ClockConfig+0x9c>
 80029b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_ClockConfig+0xbc>
 80029bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80029ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80029d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029d8:	4b62      	ldr	r3, [pc, #392]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80029ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f042 0220 	orr.w	r2, r2, #32
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f002 021f 	and.w	r2, r2, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d171      	bne.n	8002aec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0ea      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d137      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x164>
 8002a14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a18:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a2c:	d802      	bhi.n	8002a34 <HAL_RCC_ClockConfig+0x114>
 8002a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e00f      	b.n	8002a54 <HAL_RCC_ClockConfig+0x134>
 8002a34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a50:	4b44      	ldr	r3, [pc, #272]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a58:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a5c:	fa92 f2a2 	rbit	r2, r2
 8002a60:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d135      	bne.n	8002aec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0ae      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2c2>
 8002a84:	2302      	movs	r3, #2
 8002a86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a9a:	d802      	bhi.n	8002aa2 <HAL_RCC_ClockConfig+0x182>
 8002a9c:	4b31      	ldr	r3, [pc, #196]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	e00d      	b.n	8002abe <HAL_RCC_ClockConfig+0x19e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aae:	2302      	movs	r3, #2
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	2202      	movs	r2, #2
 8002ac0:	61ba      	str	r2, [r7, #24]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	fa92 f2a2 	rbit	r2, r2
 8002ac8:	617a      	str	r2, [r7, #20]
  return result;
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	fab2 f282 	clz	r2, r2
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	f042 0220 	orr.w	r2, r2, #32
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	f002 021f 	and.w	r2, r2, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e07a      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aec:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	491a      	ldr	r1, [pc, #104]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afe:	f7fe fc85 	bl	800140c <HAL_GetTick>
 8002b02:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b06:	f7fe fc81 	bl	800140c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e062      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 020c 	and.w	r2, r3, #12
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d1eb      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d215      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3c:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 0207 	bic.w	r2, r3, #7
 8002b44:	4906      	ldr	r1, [pc, #24]	@ (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d006      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e041      	b.n	8002be2 <HAL_RCC_ClockConfig+0x2c2>
 8002b5e:	bf00      	nop
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <HAL_RCC_ClockConfig+0x2cc>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	491a      	ldr	r1, [pc, #104]	@ (8002bec <HAL_RCC_ClockConfig+0x2cc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b92:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <HAL_RCC_ClockConfig+0x2cc>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4912      	ldr	r1, [pc, #72]	@ (8002bec <HAL_RCC_ClockConfig+0x2cc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ba6:	f000 f829 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002baa:	4601      	mov	r1, r0
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <HAL_RCC_ClockConfig+0x2cc>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb4:	22f0      	movs	r2, #240	@ 0xf0
 8002bb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	fa92 f2a2 	rbit	r2, r2
 8002bbe:	60fa      	str	r2, [r7, #12]
  return result;
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	fab2 f282 	clz	r2, r2
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	40d3      	lsrs	r3, r2
 8002bca:	4a09      	ldr	r2, [pc, #36]	@ (8002bf0 <HAL_RCC_ClockConfig+0x2d0>)
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	fa21 f303 	lsr.w	r3, r1, r3
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <HAL_RCC_ClockConfig+0x2d4>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <HAL_RCC_ClockConfig+0x2d8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fbd2 	bl	8001384 <HAL_InitTick>
  
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3778      	adds	r7, #120	@ 0x78
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	0800a71c 	.word	0x0800a71c
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x30>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x36>
 8002c2a:	e026      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2e:	613b      	str	r3, [r7, #16]
      break;
 8002c30:	e026      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c40:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	4a14      	ldr	r2, [pc, #80]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c58:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e004      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
      break;
 8002c78:	e002      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c7c:	613b      	str	r3, [r7, #16]
      break;
 8002c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c80:	693b      	ldr	r3, [r7, #16]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	00b71b00 	.word	0x00b71b00
 8002c98:	0800a72c 	.word	0x0800a72c
 8002c9c:	0800a73c 	.word	0x0800a73c
 8002ca0:	003d0900 	.word	0x003d0900
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cba:	2b84      	cmp	r3, #132	@ 0x84
 8002cbc:	d005      	beq.n	8002cca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002cbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3303      	adds	r3, #3
 8002cc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002cdc:	f000 fb0a 	bl	80032f4 <vTaskStartScheduler>
  
  return osOK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce8:	b089      	sub	sp, #36	@ 0x24
 8002cea:	af04      	add	r7, sp, #16
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <osThreadCreate+0x54>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01c      	beq.n	8002d3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685c      	ldr	r4, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691e      	ldr	r6, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ffc8 	bl	8002ca8 <makeFreeRtosPriority>
 8002d18:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d22:	9202      	str	r2, [sp, #8]
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	9100      	str	r1, [sp, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4632      	mov	r2, r6
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f000 f8ed 	bl	8002f0e <xTaskCreateStatic>
 8002d34:	4603      	mov	r3, r0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e01c      	b.n	8002d74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685c      	ldr	r4, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d46:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ffaa 	bl	8002ca8 <makeFreeRtosPriority>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	9200      	str	r2, [sp, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	4632      	mov	r2, r6
 8002d62:	4629      	mov	r1, r5
 8002d64:	4620      	mov	r0, r4
 8002d66:	f000 f931 	bl	8002fcc <xTaskCreate>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d001      	beq.n	8002d74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d74:	68fb      	ldr	r3, [r7, #12]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <osDelay+0x16>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	e000      	b.n	8002d96 <osDelay+0x18>
 8002d94:	2301      	movs	r3, #1
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fa72 	bl	8003280 <vTaskDelay>
  
  return osOK;
 8002d9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f103 0208 	add.w	r2, r3, #8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f103 0208 	add.w	r2, r3, #8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f103 0208 	add.w	r2, r3, #8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	601a      	str	r2, [r3, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d103      	bne.n	8002e68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e00c      	b.n	8002e82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e002      	b.n	8002e76 <vListInsert+0x2e>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d2f6      	bcs.n	8002e70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6892      	ldr	r2, [r2, #8]
 8002ed0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6852      	ldr	r2, [r2, #4]
 8002eda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d103      	bne.n	8002eee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1e5a      	subs	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b08e      	sub	sp, #56	@ 0x38
 8002f12:	af04      	add	r7, sp, #16
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <xTaskCreateStatic+0x2c>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	623b      	str	r3, [r7, #32]
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	e7fd      	b.n	8002f36 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	61fb      	str	r3, [r7, #28]
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f58:	235c      	movs	r3, #92	@ 0x5c
 8002f5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b5c      	cmp	r3, #92	@ 0x5c
 8002f60:	d00b      	beq.n	8002f7a <xTaskCreateStatic+0x6c>
	__asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	61bb      	str	r3, [r7, #24]
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01e      	beq.n	8002fbe <xTaskCreateStatic+0xb0>
 8002f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01b      	beq.n	8002fbe <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9303      	str	r3, [sp, #12]
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	9302      	str	r3, [sp, #8]
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f850 	bl	8003056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fb8:	f000 f8d6 	bl	8003168 <prvAddNewTaskToReadyList>
 8002fbc:	e001      	b.n	8002fc2 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fc2:	697b      	ldr	r3, [r7, #20]
	}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3728      	adds	r7, #40	@ 0x28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	@ 0x30
 8002fd0:	af04      	add	r7, sp, #16
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 ffa3 	bl	8003f2c <pvPortMalloc>
 8002fe6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00e      	beq.n	800300c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002fee:	205c      	movs	r0, #92	@ 0x5c
 8002ff0:	f000 ff9c 	bl	8003f2c <pvPortMalloc>
 8002ff4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30
 8003002:	e005      	b.n	8003010 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003004:	6978      	ldr	r0, [r7, #20]
 8003006:	f001 f859 	bl	80040bc <vPortFree>
 800300a:	e001      	b.n	8003010 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d017      	beq.n	8003046 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	2300      	movs	r3, #0
 8003022:	9303      	str	r3, [sp, #12]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9302      	str	r3, [sp, #8]
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f80e 	bl	8003056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800303a:	69f8      	ldr	r0, [r7, #28]
 800303c:	f000 f894 	bl	8003168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003040:	2301      	movs	r3, #1
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e002      	b.n	800304c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800304c:	69bb      	ldr	r3, [r7, #24]
	}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b088      	sub	sp, #32
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	461a      	mov	r2, r3
 800306e:	21a5      	movs	r1, #165	@ 0xa5
 8003070:	f003 ff7e 	bl	8006f70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800307e:	3b01      	subs	r3, #1
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f023 0307 	bic.w	r3, r3, #7
 800308c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	617b      	str	r3, [r7, #20]
}
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	e012      	b.n	80030dc <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	4413      	add	r3, r2
 80030bc:	7819      	ldrb	r1, [r3, #0]
 80030be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	3334      	adds	r3, #52	@ 0x34
 80030c6:	460a      	mov	r2, r1
 80030c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3301      	adds	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	d9e9      	bls.n	80030b6 <prvInitialiseNewTask+0x60>
 80030e2:	e000      	b.n	80030e6 <prvInitialiseNewTask+0x90>
		{
			break;
 80030e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d901      	bls.n	80030f8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030f4:	2306      	movs	r3, #6
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003102:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003106:	2200      	movs	r2, #0
 8003108:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310c:	3304      	adds	r3, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fe69 	bl	8002de6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003116:	3318      	adds	r3, #24
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fe64 	bl	8002de6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	f1c3 0207 	rsb	r2, r3, #7
 800312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800312e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	2200      	movs	r2, #0
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	69b8      	ldr	r0, [r7, #24]
 8003148:	f000 fc96 	bl	8003a78 <pxPortInitialiseStack>
 800314c:	4602      	mov	r2, r0
 800314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003150:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800315c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800315e:	bf00      	nop
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003168:	b5b0      	push	{r4, r5, r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af02      	add	r7, sp, #8
 800316e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003170:	f000 fdb2 	bl	8003cd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003174:	4b3b      	ldr	r3, [pc, #236]	@ (8003264 <prvAddNewTaskToReadyList+0xfc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	4a3a      	ldr	r2, [pc, #232]	@ (8003264 <prvAddNewTaskToReadyList+0xfc>)
 800317c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800317e:	4b3a      	ldr	r3, [pc, #232]	@ (8003268 <prvAddNewTaskToReadyList+0x100>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003186:	4a38      	ldr	r2, [pc, #224]	@ (8003268 <prvAddNewTaskToReadyList+0x100>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800318c:	4b35      	ldr	r3, [pc, #212]	@ (8003264 <prvAddNewTaskToReadyList+0xfc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d110      	bne.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003194:	f000 fb16 	bl	80037c4 <prvInitialiseTaskLists>
 8003198:	e00d      	b.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800319a:	4b34      	ldr	r3, [pc, #208]	@ (800326c <prvAddNewTaskToReadyList+0x104>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031a2:	4b31      	ldr	r3, [pc, #196]	@ (8003268 <prvAddNewTaskToReadyList+0x100>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d802      	bhi.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <prvAddNewTaskToReadyList+0x100>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003270 <prvAddNewTaskToReadyList+0x108>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003270 <prvAddNewTaskToReadyList+0x108>)
 80031be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003270 <prvAddNewTaskToReadyList+0x108>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <prvAddNewTaskToReadyList+0x94>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 fa83 	bl	80056dc <SEGGER_SYSVIEW_OnTaskCreate>
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	461d      	mov	r5, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461c      	mov	r4, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	1ae3      	subs	r3, r4, r3
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	462b      	mov	r3, r5
 80031f8:	f002 fda4 	bl	8005d44 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 faf0 	bl	80057e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	2201      	movs	r2, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <prvAddNewTaskToReadyList+0x10c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <prvAddNewTaskToReadyList+0x10c>)
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4a15      	ldr	r2, [pc, #84]	@ (8003278 <prvAddNewTaskToReadyList+0x110>)
 8003224:	441a      	add	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3304      	adds	r3, #4
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f7ff fde7 	bl	8002e00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003232:	f000 fd83 	bl	8003d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <prvAddNewTaskToReadyList+0x104>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00e      	beq.n	800325c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <prvAddNewTaskToReadyList+0x100>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003248:	429a      	cmp	r2, r3
 800324a:	d207      	bcs.n	800325c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <prvAddNewTaskToReadyList+0x114>)
 800324e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bdb0      	pop	{r4, r5, r7, pc}
 8003264:	20000564 	.word	0x20000564
 8003268:	20000464 	.word	0x20000464
 800326c:	20000570 	.word	0x20000570
 8003270:	20000580 	.word	0x20000580
 8003274:	2000056c 	.word	0x2000056c
 8003278:	20000468 	.word	0x20000468
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01c      	beq.n	80032cc <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003292:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <vTaskDelay+0x6c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <vTaskDelay+0x32>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	60bb      	str	r3, [r7, #8]
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	e7fd      	b.n	80032ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032b2:	f000 f881 	bl	80033b8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	2023      	movs	r0, #35	@ 0x23
 80032ba:	f001 fe1b 	bl	8004ef4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032be:	2100      	movs	r1, #0
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fb61 	bl	8003988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032c6:	f000 f885 	bl	80033d4 <xTaskResumeAll>
 80032ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 80032d2:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <vTaskDelay+0x70>)
 80032d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000058c 	.word	0x2000058c
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	@ 0x28
 80032f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003302:	463a      	mov	r2, r7
 8003304:	1d39      	adds	r1, r7, #4
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fd42 	bl	8000d94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	9202      	str	r2, [sp, #8]
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	2300      	movs	r3, #0
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	460a      	mov	r2, r1
 8003322:	491f      	ldr	r1, [pc, #124]	@ (80033a0 <vTaskStartScheduler+0xac>)
 8003324:	481f      	ldr	r0, [pc, #124]	@ (80033a4 <vTaskStartScheduler+0xb0>)
 8003326:	f7ff fdf2 	bl	8002f0e <xTaskCreateStatic>
 800332a:	4603      	mov	r3, r0
 800332c:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <vTaskStartScheduler+0xb4>)
 800332e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003330:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <vTaskStartScheduler+0xb4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003338:	2301      	movs	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e001      	b.n	8003342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d116      	bne.n	8003376 <vTaskStartScheduler+0x82>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	613b      	str	r3, [r7, #16]
}
 800335a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800335c:	4b13      	ldr	r3, [pc, #76]	@ (80033ac <vTaskStartScheduler+0xb8>)
 800335e:	f04f 32ff 	mov.w	r2, #4294967295
 8003362:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003364:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <vTaskStartScheduler+0xbc>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800336a:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <vTaskStartScheduler+0xc0>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003370:	f000 fc0e 	bl	8003b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003374:	e00f      	b.n	8003396 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d10b      	bne.n	8003396 <vTaskStartScheduler+0xa2>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	60fb      	str	r3, [r7, #12]
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	e7fd      	b.n	8003392 <vTaskStartScheduler+0x9e>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	0800a658 	.word	0x0800a658
 80033a4:	08003795 	.word	0x08003795
 80033a8:	20000588 	.word	0x20000588
 80033ac:	20000584 	.word	0x20000584
 80033b0:	20000570 	.word	0x20000570
 80033b4:	20000568 	.word	0x20000568

080033b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <vTaskSuspendAll+0x18>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	4a03      	ldr	r2, [pc, #12]	@ (80033d0 <vTaskSuspendAll+0x18>)
 80033c4:	6013      	str	r3, [r2, #0]
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	2000058c 	.word	0x2000058c

080033d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033e2:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <xTaskResumeAll+0x120>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <xTaskResumeAll+0x2e>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	603b      	str	r3, [r7, #0]
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	e7fd      	b.n	80033fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003402:	f000 fc69 	bl	8003cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003406:	4b3b      	ldr	r3, [pc, #236]	@ (80034f4 <xTaskResumeAll+0x120>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3b01      	subs	r3, #1
 800340c:	4a39      	ldr	r2, [pc, #228]	@ (80034f4 <xTaskResumeAll+0x120>)
 800340e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003410:	4b38      	ldr	r3, [pc, #224]	@ (80034f4 <xTaskResumeAll+0x120>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d165      	bne.n	80034e4 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003418:	4b37      	ldr	r3, [pc, #220]	@ (80034f8 <xTaskResumeAll+0x124>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d061      	beq.n	80034e4 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003420:	e032      	b.n	8003488 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003422:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <xTaskResumeAll+0x128>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3318      	adds	r3, #24
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fd43 	bl	8002eba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3304      	adds	r3, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fd3e 	bl	8002eba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4618      	mov	r0, r3
 8003442:	f002 f9cf 	bl	80057e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344a:	2201      	movs	r2, #1
 800344c:	409a      	lsls	r2, r3
 800344e:	4b2c      	ldr	r3, [pc, #176]	@ (8003500 <xTaskResumeAll+0x12c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	4a2a      	ldr	r2, [pc, #168]	@ (8003500 <xTaskResumeAll+0x12c>)
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4a27      	ldr	r2, [pc, #156]	@ (8003504 <xTaskResumeAll+0x130>)
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f7ff fcc6 	bl	8002e00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003478:	4b23      	ldr	r3, [pc, #140]	@ (8003508 <xTaskResumeAll+0x134>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8003482:	4b22      	ldr	r3, [pc, #136]	@ (800350c <xTaskResumeAll+0x138>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003488:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <xTaskResumeAll+0x128>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1c8      	bne.n	8003422 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003496:	f000 fa33 	bl	8003900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800349a:	4b1d      	ldr	r3, [pc, #116]	@ (8003510 <xTaskResumeAll+0x13c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034a6:	f000 f849 	bl	800353c <xTaskIncrementTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 80034b0:	4b16      	ldr	r3, [pc, #88]	@ (800350c <xTaskResumeAll+0x138>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f1      	bne.n	80034a6 <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 80034c2:	4b13      	ldr	r3, [pc, #76]	@ (8003510 <xTaskResumeAll+0x13c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034c8:	4b10      	ldr	r3, [pc, #64]	@ (800350c <xTaskResumeAll+0x138>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <xTaskResumeAll+0x140>)
 80034d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034e4:	f000 fc2a 	bl	8003d3c <vPortExitCritical>

	return xAlreadyYielded;
 80034e8:	68bb      	ldr	r3, [r7, #8]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000058c 	.word	0x2000058c
 80034f8:	20000564 	.word	0x20000564
 80034fc:	20000524 	.word	0x20000524
 8003500:	2000056c 	.word	0x2000056c
 8003504:	20000468 	.word	0x20000468
 8003508:	20000464 	.word	0x20000464
 800350c:	20000578 	.word	0x20000578
 8003510:	20000574 	.word	0x20000574
 8003514:	e000ed04 	.word	0xe000ed04

08003518 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800351e:	f000 fcc3 	bl	8003ea8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003526:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <xTaskGetTickCountFromISR+0x20>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800352c:	683b      	ldr	r3, [r7, #0]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000568 	.word	0x20000568

0800353c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003546:	4b53      	ldr	r3, [pc, #332]	@ (8003694 <xTaskIncrementTick+0x158>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 8092 	bne.w	8003674 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003550:	4b51      	ldr	r3, [pc, #324]	@ (8003698 <xTaskIncrementTick+0x15c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003558:	4a4f      	ldr	r2, [pc, #316]	@ (8003698 <xTaskIncrementTick+0x15c>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d121      	bne.n	80035a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003564:	4b4d      	ldr	r3, [pc, #308]	@ (800369c <xTaskIncrementTick+0x160>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <xTaskIncrementTick+0x4a>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	603b      	str	r3, [r7, #0]
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	e7fd      	b.n	8003582 <xTaskIncrementTick+0x46>
 8003586:	4b45      	ldr	r3, [pc, #276]	@ (800369c <xTaskIncrementTick+0x160>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	4b44      	ldr	r3, [pc, #272]	@ (80036a0 <xTaskIncrementTick+0x164>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a42      	ldr	r2, [pc, #264]	@ (800369c <xTaskIncrementTick+0x160>)
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4a42      	ldr	r2, [pc, #264]	@ (80036a0 <xTaskIncrementTick+0x164>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b42      	ldr	r3, [pc, #264]	@ (80036a4 <xTaskIncrementTick+0x168>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3301      	adds	r3, #1
 80035a0:	4a40      	ldr	r2, [pc, #256]	@ (80036a4 <xTaskIncrementTick+0x168>)
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	f000 f9ac 	bl	8003900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035a8:	4b3f      	ldr	r3, [pc, #252]	@ (80036a8 <xTaskIncrementTick+0x16c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d351      	bcc.n	8003656 <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b2:	4b3a      	ldr	r3, [pc, #232]	@ (800369c <xTaskIncrementTick+0x160>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <xTaskIncrementTick+0x84>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <xTaskIncrementTick+0x86>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c6:	4b38      	ldr	r3, [pc, #224]	@ (80036a8 <xTaskIncrementTick+0x16c>)
 80035c8:	f04f 32ff 	mov.w	r2, #4294967295
 80035cc:	601a      	str	r2, [r3, #0]
					break;
 80035ce:	e042      	b.n	8003656 <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035d0:	4b32      	ldr	r3, [pc, #200]	@ (800369c <xTaskIncrementTick+0x160>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d203      	bcs.n	80035f0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035e8:	4a2f      	ldr	r2, [pc, #188]	@ (80036a8 <xTaskIncrementTick+0x16c>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6013      	str	r3, [r2, #0]
						break;
 80035ee:	e032      	b.n	8003656 <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fc60 	bl	8002eba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3318      	adds	r3, #24
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fc57 	bl	8002eba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f002 f8e8 	bl	80057e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003618:	2201      	movs	r2, #1
 800361a:	409a      	lsls	r2, r3
 800361c:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <xTaskIncrementTick+0x170>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	4a22      	ldr	r2, [pc, #136]	@ (80036ac <xTaskIncrementTick+0x170>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4a1f      	ldr	r2, [pc, #124]	@ (80036b0 <xTaskIncrementTick+0x174>)
 8003634:	441a      	add	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3304      	adds	r3, #4
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f7ff fbdf 	bl	8002e00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003646:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <xTaskIncrementTick+0x178>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	429a      	cmp	r2, r3
 800364e:	d3b0      	bcc.n	80035b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003650:	2301      	movs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003654:	e7ad      	b.n	80035b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003656:	4b17      	ldr	r3, [pc, #92]	@ (80036b4 <xTaskIncrementTick+0x178>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365c:	4914      	ldr	r1, [pc, #80]	@ (80036b0 <xTaskIncrementTick+0x174>)
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d907      	bls.n	800367e <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800366e:	2301      	movs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	e004      	b.n	800367e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003674:	4b10      	ldr	r3, [pc, #64]	@ (80036b8 <xTaskIncrementTick+0x17c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a0f      	ldr	r2, [pc, #60]	@ (80036b8 <xTaskIncrementTick+0x17c>)
 800367c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800367e:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <xTaskIncrementTick+0x180>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8003686:	2301      	movs	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800368a:	697b      	ldr	r3, [r7, #20]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	2000058c 	.word	0x2000058c
 8003698:	20000568 	.word	0x20000568
 800369c:	2000051c 	.word	0x2000051c
 80036a0:	20000520 	.word	0x20000520
 80036a4:	2000057c 	.word	0x2000057c
 80036a8:	20000584 	.word	0x20000584
 80036ac:	2000056c 	.word	0x2000056c
 80036b0:	20000468 	.word	0x20000468
 80036b4:	20000464 	.word	0x20000464
 80036b8:	20000574 	.word	0x20000574
 80036bc:	20000578 	.word	0x20000578

080036c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036c6:	4b2d      	ldr	r3, [pc, #180]	@ (800377c <vTaskSwitchContext+0xbc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003780 <vTaskSwitchContext+0xc0>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036d4:	e04e      	b.n	8003774 <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 80036d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003780 <vTaskSwitchContext+0xc0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036dc:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <vTaskSwitchContext+0xc4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036ea:	7afb      	ldrb	r3, [r7, #11]
 80036ec:	f1c3 031f 	rsb	r3, r3, #31
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	4925      	ldr	r1, [pc, #148]	@ (8003788 <vTaskSwitchContext+0xc8>)
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <vTaskSwitchContext+0x5e>
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	607b      	str	r3, [r7, #4]
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	e7fd      	b.n	800371a <vTaskSwitchContext+0x5a>
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <vTaskSwitchContext+0xc8>)
 800372a:	4413      	add	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	3308      	adds	r3, #8
 8003740:	429a      	cmp	r2, r3
 8003742:	d104      	bne.n	800374e <vTaskSwitchContext+0x8e>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a0d      	ldr	r2, [pc, #52]	@ (800378c <vTaskSwitchContext+0xcc>)
 8003756:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003758:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <vTaskSwitchContext+0xcc>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <vTaskSwitchContext+0xd0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d102      	bne.n	800376a <vTaskSwitchContext+0xaa>
 8003764:	f001 ff9e 	bl	80056a4 <SEGGER_SYSVIEW_OnIdle>
}
 8003768:	e004      	b.n	8003774 <vTaskSwitchContext+0xb4>
		traceTASK_SWITCHED_IN();
 800376a:	4b08      	ldr	r3, [pc, #32]	@ (800378c <vTaskSwitchContext+0xcc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fff6 	bl	8005760 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	2000058c 	.word	0x2000058c
 8003780:	20000578 	.word	0x20000578
 8003784:	2000056c 	.word	0x2000056c
 8003788:	20000468 	.word	0x20000468
 800378c:	20000464 	.word	0x20000464
 8003790:	20000588 	.word	0x20000588

08003794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800379c:	f000 f852 	bl	8003844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <prvIdleTask+0x28>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d9f9      	bls.n	800379c <prvIdleTask+0x8>
			{
				taskYIELD();
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <prvIdleTask+0x2c>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037b8:	e7f0      	b.n	800379c <prvIdleTask+0x8>
 80037ba:	bf00      	nop
 80037bc:	20000468 	.word	0x20000468
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	e00c      	b.n	80037ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <prvInitialiseTaskLists+0x60>)
 80037dc:	4413      	add	r3, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fae1 	bl	8002da6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3301      	adds	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b06      	cmp	r3, #6
 80037ee:	d9ef      	bls.n	80037d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037f0:	480d      	ldr	r0, [pc, #52]	@ (8003828 <prvInitialiseTaskLists+0x64>)
 80037f2:	f7ff fad8 	bl	8002da6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037f6:	480d      	ldr	r0, [pc, #52]	@ (800382c <prvInitialiseTaskLists+0x68>)
 80037f8:	f7ff fad5 	bl	8002da6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037fc:	480c      	ldr	r0, [pc, #48]	@ (8003830 <prvInitialiseTaskLists+0x6c>)
 80037fe:	f7ff fad2 	bl	8002da6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003802:	480c      	ldr	r0, [pc, #48]	@ (8003834 <prvInitialiseTaskLists+0x70>)
 8003804:	f7ff facf 	bl	8002da6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003808:	480b      	ldr	r0, [pc, #44]	@ (8003838 <prvInitialiseTaskLists+0x74>)
 800380a:	f7ff facc 	bl	8002da6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800380e:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <prvInitialiseTaskLists+0x78>)
 8003810:	4a05      	ldr	r2, [pc, #20]	@ (8003828 <prvInitialiseTaskLists+0x64>)
 8003812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003814:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <prvInitialiseTaskLists+0x7c>)
 8003816:	4a05      	ldr	r2, [pc, #20]	@ (800382c <prvInitialiseTaskLists+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000468 	.word	0x20000468
 8003828:	200004f4 	.word	0x200004f4
 800382c:	20000508 	.word	0x20000508
 8003830:	20000524 	.word	0x20000524
 8003834:	20000538 	.word	0x20000538
 8003838:	20000550 	.word	0x20000550
 800383c:	2000051c 	.word	0x2000051c
 8003840:	20000520 	.word	0x20000520

08003844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800384a:	e019      	b.n	8003880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800384c:	f000 fa44 	bl	8003cd8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003850:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <prvCheckTasksWaitingTermination+0x50>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fb2c 	bl	8002eba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <prvCheckTasksWaitingTermination+0x54>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	4a0b      	ldr	r2, [pc, #44]	@ (8003898 <prvCheckTasksWaitingTermination+0x54>)
 800386a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <prvCheckTasksWaitingTermination+0x58>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	4a0a      	ldr	r2, [pc, #40]	@ (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003876:	f000 fa61 	bl	8003d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f810 	bl	80038a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e1      	bne.n	800384c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000538 	.word	0x20000538
 8003898:	20000564 	.word	0x20000564
 800389c:	2000054c 	.word	0x2000054c

080038a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d108      	bne.n	80038c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fc00 	bl	80040bc <vPortFree>
				vPortFree( pxTCB );
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fbfd 	bl	80040bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038c2:	e019      	b.n	80038f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d103      	bne.n	80038d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fbf4 	bl	80040bc <vPortFree>
	}
 80038d4:	e010      	b.n	80038f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d00b      	beq.n	80038f8 <prvDeleteTCB+0x58>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	60fb      	str	r3, [r7, #12]
}
 80038f2:	bf00      	nop
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <prvDeleteTCB+0x54>
	}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003906:	4b0f      	ldr	r3, [pc, #60]	@ (8003944 <prvResetNextTaskUnblockTime+0x44>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <prvResetNextTaskUnblockTime+0x14>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <prvResetNextTaskUnblockTime+0x16>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800391a:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <prvResetNextTaskUnblockTime+0x48>)
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003922:	e008      	b.n	8003936 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003924:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <prvResetNextTaskUnblockTime+0x44>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4a05      	ldr	r2, [pc, #20]	@ (8003948 <prvResetNextTaskUnblockTime+0x48>)
 8003934:	6013      	str	r3, [r2, #0]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	2000051c 	.word	0x2000051c
 8003948:	20000584 	.word	0x20000584

0800394c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003952:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <xTaskGetSchedulerState+0x34>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800395a:	2301      	movs	r3, #1
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	e008      	b.n	8003972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003960:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <xTaskGetSchedulerState+0x38>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003968:	2302      	movs	r3, #2
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	e001      	b.n	8003972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003972:	687b      	ldr	r3, [r7, #4]
	}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	20000570 	.word	0x20000570
 8003984:	2000058c 	.word	0x2000058c

08003988 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003992:	4b32      	ldr	r3, [pc, #200]	@ (8003a5c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003998:	4b31      	ldr	r3, [pc, #196]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3304      	adds	r3, #4
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fa8b 	bl	8002eba <uxListRemove>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80039aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	2201      	movs	r2, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a64 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4013      	ands	r3, r2
 80039be:	4a29      	ldr	r2, [pc, #164]	@ (8003a64 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d110      	bne.n	80039ec <prvAddCurrentTaskToDelayedList+0x64>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80039d0:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	211b      	movs	r1, #27
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 ff46 	bl	8005868 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039dc:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3304      	adds	r3, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4820      	ldr	r0, [pc, #128]	@ (8003a68 <prvAddCurrentTaskToDelayedList+0xe0>)
 80039e6:	f7ff fa0b 	bl	8002e00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039ea:	e032      	b.n	8003a52 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d20f      	bcs.n	8003a24 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003a04:	4b16      	ldr	r3, [pc, #88]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 ff2c 	bl	8005868 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a10:	4b16      	ldr	r3, [pc, #88]	@ (8003a6c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b12      	ldr	r3, [pc, #72]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f7ff fa13 	bl	8002e48 <vListInsert>
}
 8003a22:	e016      	b.n	8003a52 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003a24:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2104      	movs	r1, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 ff1c 	bl	8005868 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a30:	4b0f      	ldr	r3, [pc, #60]	@ (8003a70 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7ff fa03 	bl	8002e48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a42:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d202      	bcs.n	8003a52 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8003a4c:	4a09      	ldr	r2, [pc, #36]	@ (8003a74 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6013      	str	r3, [r2, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000568 	.word	0x20000568
 8003a60:	20000464 	.word	0x20000464
 8003a64:	2000056c 	.word	0x2000056c
 8003a68:	20000550 	.word	0x20000550
 8003a6c:	20000520 	.word	0x20000520
 8003a70:	2000051c 	.word	0x2000051c
 8003a74:	20000584 	.word	0x20000584

08003a78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3b04      	subs	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b04      	subs	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3b04      	subs	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8003adc <pxPortInitialiseStack+0x64>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b14      	subs	r3, #20
 8003ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b04      	subs	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f06f 0202 	mvn.w	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3b20      	subs	r3, #32
 8003acc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	08003ae1 	.word	0x08003ae1

08003ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003aea:	4b13      	ldr	r3, [pc, #76]	@ (8003b38 <prvTaskExitError+0x58>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d00b      	beq.n	8003b0c <prvTaskExitError+0x2c>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <prvTaskExitError+0x28>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	60bb      	str	r3, [r7, #8]
}
 8003b1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b20:	bf00      	nop
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0fc      	beq.n	8003b22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000000c 	.word	0x2000000c
 8003b3c:	00000000 	.word	0x00000000

08003b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b40:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <pxCurrentTCBConst2>)
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	6808      	ldr	r0, [r1, #0]
 8003b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	f380 8809 	msr	PSP, r0
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	4770      	bx	lr
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst2>:
 8003b60:	20000464 	.word	0x20000464
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b68:	4808      	ldr	r0, [pc, #32]	@ (8003b8c <prvPortStartFirstTask+0x24>)
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f380 8808 	msr	MSP, r0
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8814 	msr	CONTROL, r0
 8003b7a:	b662      	cpsie	i
 8003b7c:	b661      	cpsie	f
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	df00      	svc	0
 8003b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed08 	.word	0xe000ed08

08003b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b96:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <xPortStartScheduler+0x124>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a47      	ldr	r2, [pc, #284]	@ (8003cb8 <xPortStartScheduler+0x128>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10b      	bne.n	8003bb8 <xPortStartScheduler+0x28>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60fb      	str	r3, [r7, #12]
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb4 <xPortStartScheduler+0x124>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8003cbc <xPortStartScheduler+0x12c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10b      	bne.n	8003bda <xPortStartScheduler+0x4a>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	613b      	str	r3, [r7, #16]
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bda:	4b39      	ldr	r3, [pc, #228]	@ (8003cc0 <xPortStartScheduler+0x130>)
 8003bdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	22ff      	movs	r2, #255	@ 0xff
 8003bea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b31      	ldr	r3, [pc, #196]	@ (8003cc4 <xPortStartScheduler+0x134>)
 8003c00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c02:	4b31      	ldr	r3, [pc, #196]	@ (8003cc8 <xPortStartScheduler+0x138>)
 8003c04:	2207      	movs	r2, #7
 8003c06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c08:	e009      	b.n	8003c1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003cc8 <xPortStartScheduler+0x138>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc8 <xPortStartScheduler+0x138>)
 8003c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b80      	cmp	r3, #128	@ 0x80
 8003c28:	d0ef      	beq.n	8003c0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c2a:	4b27      	ldr	r3, [pc, #156]	@ (8003cc8 <xPortStartScheduler+0x138>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1c3 0307 	rsb	r3, r3, #7
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d00b      	beq.n	8003c4e <xPortStartScheduler+0xbe>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	60bb      	str	r3, [r7, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc8 <xPortStartScheduler+0x138>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <xPortStartScheduler+0x138>)
 8003c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <xPortStartScheduler+0x138>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c60:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <xPortStartScheduler+0x138>)
 8003c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c6c:	4b17      	ldr	r3, [pc, #92]	@ (8003ccc <xPortStartScheduler+0x13c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <xPortStartScheduler+0x13c>)
 8003c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c78:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <xPortStartScheduler+0x13c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a13      	ldr	r2, [pc, #76]	@ (8003ccc <xPortStartScheduler+0x13c>)
 8003c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c84:	f000 f8e2 	bl	8003e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <xPortStartScheduler+0x140>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c8e:	f000 f901 	bl	8003e94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c92:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <xPortStartScheduler+0x144>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd4 <xPortStartScheduler+0x144>)
 8003c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c9e:	f7ff ff63 	bl	8003b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ca2:	f7ff fd0d 	bl	80036c0 <vTaskSwitchContext>
	prvTaskExitError();
 8003ca6:	f7ff ff1b 	bl	8003ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	e000ed00 	.word	0xe000ed00
 8003cb8:	410fc271 	.word	0x410fc271
 8003cbc:	410fc270 	.word	0x410fc270
 8003cc0:	e000e400 	.word	0xe000e400
 8003cc4:	20000590 	.word	0x20000590
 8003cc8:	20000594 	.word	0x20000594
 8003ccc:	e000ed20 	.word	0xe000ed20
 8003cd0:	2000000c 	.word	0x2000000c
 8003cd4:	e000ef34 	.word	0xe000ef34

08003cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	607b      	str	r3, [r7, #4]
}
 8003cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <vPortEnterCritical+0x5c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8003d34 <vPortEnterCritical+0x5c>)
 8003cfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <vPortEnterCritical+0x5c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d110      	bne.n	8003d26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <vPortEnterCritical+0x60>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <vPortEnterCritical+0x4e>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	603b      	str	r3, [r7, #0]
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	e7fd      	b.n	8003d22 <vPortEnterCritical+0x4a>
	}
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	2000000c 	.word	0x2000000c
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d42:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <vPortExitCritical+0x50>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <vPortExitCritical+0x26>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	607b      	str	r3, [r7, #4]
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d62:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <vPortExitCritical+0x50>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	4a08      	ldr	r2, [pc, #32]	@ (8003d8c <vPortExitCritical+0x50>)
 8003d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d6c:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <vPortExitCritical+0x50>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <vPortExitCritical+0x44>
 8003d74:	2300      	movs	r3, #0
 8003d76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	2000000c 	.word	0x2000000c

08003d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d90:	f3ef 8009 	mrs	r0, PSP
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <pxCurrentTCBConst>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	f01e 0f10 	tst.w	lr, #16
 8003da0:	bf08      	it	eq
 8003da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003daa:	6010      	str	r0, [r2, #0]
 8003dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003db4:	f380 8811 	msr	BASEPRI, r0
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f7ff fc7e 	bl	80036c0 <vTaskSwitchContext>
 8003dc4:	f04f 0000 	mov.w	r0, #0
 8003dc8:	f380 8811 	msr	BASEPRI, r0
 8003dcc:	bc09      	pop	{r0, r3}
 8003dce:	6819      	ldr	r1, [r3, #0]
 8003dd0:	6808      	ldr	r0, [r1, #0]
 8003dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd6:	f01e 0f10 	tst.w	lr, #16
 8003dda:	bf08      	it	eq
 8003ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003de0:	f380 8809 	msr	PSP, r0
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	f3af 8000 	nop.w

08003df0 <pxCurrentTCBConst>:
 8003df0:	20000464 	.word	0x20000464
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop

08003df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	607b      	str	r3, [r7, #4]
}
 8003e10:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003e12:	f001 fbcd 	bl	80055b0 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e16:	f7ff fb91 	bl	800353c <xTaskIncrementTick>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8003e20:	f001 fc24 	bl	800566c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e24:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <xPortSysTickHandler+0x50>)
 8003e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e001      	b.n	8003e32 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 8003e2e:	f001 fc01 	bl	8005634 <SEGGER_SYSVIEW_RecordExitISR>
 8003e32:	2300      	movs	r3, #0
 8003e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f383 8811 	msr	BASEPRI, r3
}
 8003e3c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e50:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <vPortSetupTimerInterrupt+0x34>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e56:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <vPortSetupTimerInterrupt+0x38>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <vPortSetupTimerInterrupt+0x3c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <vPortSetupTimerInterrupt+0x40>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <vPortSetupTimerInterrupt+0x44>)
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e6e:	4b04      	ldr	r3, [pc, #16]	@ (8003e80 <vPortSetupTimerInterrupt+0x34>)
 8003e70:	2207      	movs	r2, #7
 8003e72:	601a      	str	r2, [r3, #0]
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000e010 	.word	0xe000e010
 8003e84:	e000e018 	.word	0xe000e018
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	10624dd3 	.word	0x10624dd3
 8003e90:	e000e014 	.word	0xe000e014

08003e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003ea4 <vPortEnableVFP+0x10>
 8003e98:	6801      	ldr	r1, [r0, #0]
 8003e9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003e9e:	6001      	str	r1, [r0, #0]
 8003ea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ea2:	bf00      	nop
 8003ea4:	e000ed88 	.word	0xe000ed88

08003ea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003eae:	f3ef 8305 	mrs	r3, IPSR
 8003eb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b0f      	cmp	r3, #15
 8003eb8:	d915      	bls.n	8003ee6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003eba:	4a18      	ldr	r2, [pc, #96]	@ (8003f1c <vPortValidateInterruptPriority+0x74>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ec4:	4b16      	ldr	r3, [pc, #88]	@ (8003f20 <vPortValidateInterruptPriority+0x78>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	7afa      	ldrb	r2, [r7, #11]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d20b      	bcs.n	8003ee6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	607b      	str	r3, [r7, #4]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f24 <vPortValidateInterruptPriority+0x7c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003eee:	4b0e      	ldr	r3, [pc, #56]	@ (8003f28 <vPortValidateInterruptPriority+0x80>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90b      	bls.n	8003f0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	603b      	str	r3, [r7, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <vPortValidateInterruptPriority+0x62>
	}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e3f0 	.word	0xe000e3f0
 8003f20:	20000590 	.word	0x20000590
 8003f24:	e000ed0c 	.word	0xe000ed0c
 8003f28:	20000594 	.word	0x20000594

08003f2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	@ 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f38:	f7ff fa3e 	bl	80033b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80040a8 <pvPortMalloc+0x17c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f44:	f000 f916 	bl	8004174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f48:	4b58      	ldr	r3, [pc, #352]	@ (80040ac <pvPortMalloc+0x180>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 8090 	bne.w	8004076 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01e      	beq.n	8003f9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d015      	beq.n	8003f9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f023 0307 	bic.w	r3, r3, #7
 8003f74:	3308      	adds	r3, #8
 8003f76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <pvPortMalloc+0x6e>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	617b      	str	r3, [r7, #20]
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d06a      	beq.n	8004076 <pvPortMalloc+0x14a>
 8003fa0:	4b43      	ldr	r3, [pc, #268]	@ (80040b0 <pvPortMalloc+0x184>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d865      	bhi.n	8004076 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003faa:	4b42      	ldr	r3, [pc, #264]	@ (80040b4 <pvPortMalloc+0x188>)
 8003fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fae:	4b41      	ldr	r3, [pc, #260]	@ (80040b4 <pvPortMalloc+0x188>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb4:	e004      	b.n	8003fc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d903      	bls.n	8003fd2 <pvPortMalloc+0xa6>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f1      	bne.n	8003fb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fd2:	4b35      	ldr	r3, [pc, #212]	@ (80040a8 <pvPortMalloc+0x17c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d04c      	beq.n	8004076 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	4413      	add	r3, r2
 8003fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d920      	bls.n	8004040 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <pvPortMalloc+0xfc>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	613b      	str	r3, [r7, #16]
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	1ad2      	subs	r2, r2, r3
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800403a:	69b8      	ldr	r0, [r7, #24]
 800403c:	f000 f8fc 	bl	8004238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004040:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <pvPortMalloc+0x184>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	4a19      	ldr	r2, [pc, #100]	@ (80040b0 <pvPortMalloc+0x184>)
 800404c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800404e:	4b18      	ldr	r3, [pc, #96]	@ (80040b0 <pvPortMalloc+0x184>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <pvPortMalloc+0x18c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d203      	bcs.n	8004062 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800405a:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <pvPortMalloc+0x184>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a16      	ldr	r2, [pc, #88]	@ (80040b8 <pvPortMalloc+0x18c>)
 8004060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <pvPortMalloc+0x180>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	431a      	orrs	r2, r3
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004076:	f7ff f9ad 	bl	80033d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <pvPortMalloc+0x170>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <pvPortMalloc+0x16c>
	return pvReturn;
 800409c:	69fb      	ldr	r3, [r7, #28]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3728      	adds	r7, #40	@ 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200011a0 	.word	0x200011a0
 80040ac:	200011ac 	.word	0x200011ac
 80040b0:	200011a4 	.word	0x200011a4
 80040b4:	20001198 	.word	0x20001198
 80040b8:	200011a8 	.word	0x200011a8

080040bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d04a      	beq.n	8004164 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040ce:	2308      	movs	r3, #8
 80040d0:	425b      	negs	r3, r3
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4b22      	ldr	r3, [pc, #136]	@ (800416c <vPortFree+0xb0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <vPortFree+0x46>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	e7fd      	b.n	80040fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <vPortFree+0x66>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60bb      	str	r3, [r7, #8]
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	e7fd      	b.n	800411e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4b11      	ldr	r3, [pc, #68]	@ (800416c <vPortFree+0xb0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d019      	beq.n	8004164 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <vPortFree+0xb0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	43db      	mvns	r3, r3
 8004142:	401a      	ands	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004148:	f7ff f936 	bl	80033b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <vPortFree+0xb4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4413      	add	r3, r2
 8004156:	4a06      	ldr	r2, [pc, #24]	@ (8004170 <vPortFree+0xb4>)
 8004158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800415a:	6938      	ldr	r0, [r7, #16]
 800415c:	f000 f86c 	bl	8004238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004160:	f7ff f938 	bl	80033d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004164:	bf00      	nop
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	200011ac 	.word	0x200011ac
 8004170:	200011a4 	.word	0x200011a4

08004174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800417a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800417e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004180:	4b27      	ldr	r3, [pc, #156]	@ (8004220 <prvHeapInit+0xac>)
 8004182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3307      	adds	r3, #7
 8004192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0307 	bic.w	r3, r3, #7
 800419a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004220 <prvHeapInit+0xac>)
 80041a4:	4413      	add	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004224 <prvHeapInit+0xb0>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004224 <prvHeapInit+0xb0>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4413      	add	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041c0:	2208      	movs	r2, #8
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a15      	ldr	r2, [pc, #84]	@ (8004228 <prvHeapInit+0xb4>)
 80041d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041d6:	4b14      	ldr	r3, [pc, #80]	@ (8004228 <prvHeapInit+0xb4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2200      	movs	r2, #0
 80041dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041de:	4b12      	ldr	r3, [pc, #72]	@ (8004228 <prvHeapInit+0xb4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <prvHeapInit+0xb4>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <prvHeapInit+0xb8>)
 8004202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <prvHeapInit+0xbc>)
 800420a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <prvHeapInit+0xc0>)
 800420e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	20000598 	.word	0x20000598
 8004224:	20001198 	.word	0x20001198
 8004228:	200011a0 	.word	0x200011a0
 800422c:	200011a8 	.word	0x200011a8
 8004230:	200011a4 	.word	0x200011a4
 8004234:	200011ac 	.word	0x200011ac

08004238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004240:	4b28      	ldr	r3, [pc, #160]	@ (80042e4 <prvInsertBlockIntoFreeList+0xac>)
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e002      	b.n	800424c <prvInsertBlockIntoFreeList+0x14>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d8f7      	bhi.n	8004246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4413      	add	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d108      	bne.n	800427a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	441a      	add	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d118      	bne.n	80042c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d00d      	beq.n	80042b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e008      	b.n	80042c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042b6:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <prvInsertBlockIntoFreeList+0xb0>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e003      	b.n	80042c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d002      	beq.n	80042d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20001198 	.word	0x20001198
 80042e8:	200011a0 	.word	0x200011a0

080042ec <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80042f2:	4b26      	ldr	r3, [pc, #152]	@ (800438c <_DoInit+0xa0>)
 80042f4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80042f6:	22a8      	movs	r2, #168	@ 0xa8
 80042f8:	2100      	movs	r1, #0
 80042fa:	6838      	ldr	r0, [r7, #0]
 80042fc:	f002 fe38 	bl	8006f70 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2203      	movs	r2, #3
 8004304:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2203      	movs	r2, #3
 800430a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4a20      	ldr	r2, [pc, #128]	@ (8004390 <_DoInit+0xa4>)
 8004310:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	4a1f      	ldr	r2, [pc, #124]	@ (8004394 <_DoInit+0xa8>)
 8004316:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800431e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2200      	movs	r2, #0
 8004330:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	4a16      	ldr	r2, [pc, #88]	@ (8004390 <_DoInit+0xa4>)
 8004336:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <_DoInit+0xac>)
 800433c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2210      	movs	r2, #16
 8004342:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2200      	movs	r2, #0
 800434e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004356:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	e00c      	b.n	800437a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1c3 030f 	rsb	r3, r3, #15
 8004366:	4a0d      	ldr	r2, [pc, #52]	@ (800439c <_DoInit+0xb0>)
 8004368:	5cd1      	ldrb	r1, [r2, r3]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	460a      	mov	r2, r1
 8004372:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3301      	adds	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b0f      	cmp	r3, #15
 800437e:	d9ef      	bls.n	8004360 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004380:	f3bf 8f5f 	dmb	sy
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200011b0 	.word	0x200011b0
 8004390:	0800a660 	.word	0x0800a660
 8004394:	20001258 	.word	0x20001258
 8004398:	20001658 	.word	0x20001658
 800439c:	0800a74c 	.word	0x0800a74c

080043a0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	@ 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80043ac:	2300      	movs	r3, #0
 80043ae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d905      	bls.n	80043d0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	e007      	b.n	80043e0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	1acb      	subs	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	3b01      	subs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ea:	4293      	cmp	r3, r2
 80043ec:	bf28      	it	cs
 80043ee:	4613      	movcs	r3, r2
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80043f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bf28      	it	cs
 80043fa:	4613      	movcs	r3, r2
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	6978      	ldr	r0, [r7, #20]
 800440e:	f002 fe1c 	bl	800704a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004416:	4413      	add	r3, r2
 8004418:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	4413      	add	r3, r2
 8004420:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442e:	4413      	add	r3, r2
 8004430:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	429a      	cmp	r2, r3
 800443a:	d101      	bne.n	8004440 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800443c:	2300      	movs	r3, #0
 800443e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004440:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1b2      	bne.n	80043b6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004450:	6a3b      	ldr	r3, [r7, #32]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3728      	adds	r7, #40	@ 0x28
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800445a:	b580      	push	{r7, lr}
 800445c:	b088      	sub	sp, #32
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	429a      	cmp	r2, r3
 800447c:	d911      	bls.n	80044a2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	6938      	ldr	r0, [r7, #16]
 800448e:	f002 fddc 	bl	800704a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004492:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	441a      	add	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80044a0:	e01f      	b.n	80044e2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	6938      	ldr	r0, [r7, #16]
 80044b6:	f002 fdc8 	bl	800704a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	4413      	add	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4619      	mov	r1, r3
 80044d2:	6938      	ldr	r0, [r7, #16]
 80044d4:	f002 fdb9 	bl	800704a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044d8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	60da      	str	r2, [r3, #12]
}
 80044e2:	bf00      	nop
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80044ea:	b480      	push	{r7}
 80044ec:	b087      	sub	sp, #28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	429a      	cmp	r2, r3
 8004504:	d808      	bhi.n	8004518 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad2      	subs	r2, r2, r3
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4413      	add	r3, r2
 8004512:	3b01      	subs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e004      	b.n	8004522 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004522:	697b      	ldr	r3, [r7, #20]
}
 8004524:	4618      	mov	r0, r3
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b08c      	sub	sp, #48	@ 0x30
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800453c:	4b3e      	ldr	r3, [pc, #248]	@ (8004638 <SEGGER_RTT_ReadNoLock+0x108>)
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b53      	cmp	r3, #83	@ 0x53
 8004548:	d001      	beq.n	800454e <SEGGER_RTT_ReadNoLock+0x1e>
 800454a:	f7ff fecf 	bl	80042ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	3360      	adds	r3, #96	@ 0x60
 800455a:	4a37      	ldr	r2, [pc, #220]	@ (8004638 <SEGGER_RTT_ReadNoLock+0x108>)
 800455c:	4413      	add	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	d92b      	bls.n	80045d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4293      	cmp	r3, r2
 800458c:	bf28      	it	cs
 800458e:	4613      	movcs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004598:	4413      	add	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045a2:	f002 fd52 	bl	800704a <memcpy>
    NumBytesRead += NumBytesRem;
 80045a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80045ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4413      	add	r3, r2
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d101      	bne.n	80045d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf28      	it	cs
 80045e4:	4613      	movcs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d019      	beq.n	8004622 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	4413      	add	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	6939      	ldr	r1, [r7, #16]
 80045fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045fe:	f002 fd24 	bl	800704a <memcpy>
    NumBytesRead += NumBytesRem;
 8004602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4413      	add	r3, r2
 8004608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800460a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4413      	add	r3, r2
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800461a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800462c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800462e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	@ 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	200011b0 	.word	0x200011b0

0800463c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800465a:	4413      	add	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d029      	beq.n	80046ba <SEGGER_RTT_WriteNoLock+0x7e>
 8004666:	2b02      	cmp	r3, #2
 8004668:	d82e      	bhi.n	80046c8 <SEGGER_RTT_WriteNoLock+0x8c>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <SEGGER_RTT_WriteNoLock+0x38>
 800466e:	2b01      	cmp	r3, #1
 8004670:	d013      	beq.n	800469a <SEGGER_RTT_WriteNoLock+0x5e>
 8004672:	e029      	b.n	80046c8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f7ff ff38 	bl	80044ea <_GetAvailWriteSpace>
 800467a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d202      	bcs.n	800468a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004688:	e021      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7ff fee1 	bl	800445a <_WriteNoCheck>
    break;
 8004698:	e019      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ff25 	bl	80044ea <_GetAvailWriteSpace>
 80046a0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf28      	it	cs
 80046aa:	4613      	movcs	r3, r2
 80046ac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7ff fed1 	bl	800445a <_WriteNoCheck>
    break;
 80046b8:	e009      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	6978      	ldr	r0, [r7, #20]
 80046c0:	f7ff fe6e 	bl	80043a0 <_WriteBlocking>
 80046c4:	61f8      	str	r0, [r7, #28]
    break;
 80046c6:	e002      	b.n	80046ce <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
    break;
 80046cc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80046ce:	69fb      	ldr	r3, [r7, #28]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200011b0 	.word	0x200011b0

080046dc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80046e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004724 <SEGGER_RTT_Write+0x48>)
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b53      	cmp	r3, #83	@ 0x53
 80046f4:	d001      	beq.n	80046fa <SEGGER_RTT_Write+0x1e>
 80046f6:	f7ff fdf9 	bl	80042ec <_DoInit>
  SEGGER_RTT_LOCK();
 80046fa:	f3ef 8311 	mrs	r3, BASEPRI
 80046fe:	f04f 0120 	mov.w	r1, #32
 8004702:	f381 8811 	msr	BASEPRI, r1
 8004706:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff ff95 	bl	800463c <SEGGER_RTT_WriteNoLock>
 8004712:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800471a:	697b      	ldr	r3, [r7, #20]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200011b0 	.word	0x200011b0

08004728 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004736:	4b3d      	ldr	r3, [pc, #244]	@ (800482c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b53      	cmp	r3, #83	@ 0x53
 8004742:	d001      	beq.n	8004748 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004744:	f7ff fdd2 	bl	80042ec <_DoInit>
  SEGGER_RTT_LOCK();
 8004748:	f3ef 8311 	mrs	r3, BASEPRI
 800474c:	f04f 0120 	mov.w	r1, #32
 8004750:	f381 8811 	msr	BASEPRI, r1
 8004754:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004756:	4b35      	ldr	r3, [pc, #212]	@ (800482c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004758:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800475e:	6939      	ldr	r1, [r7, #16]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	440b      	add	r3, r1
 800476e:	3304      	adds	r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	dbeb      	blt.n	800475e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004786:	e000      	b.n	800478a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004788:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	429a      	cmp	r2, r3
 8004792:	da3f      	bge.n	8004814 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004794:	6939      	ldr	r1, [r7, #16]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	440b      	add	r3, r1
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	4613      	mov	r3, r2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4413      	add	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	440b      	add	r3, r1
 80047b8:	3304      	adds	r3, #4
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80047be:	6939      	ldr	r1, [r7, #16]
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	440b      	add	r3, r1
 80047cc:	3320      	adds	r3, #32
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	440b      	add	r3, r1
 80047e0:	3328      	adds	r3, #40	@ 0x28
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	440b      	add	r3, r1
 80047f4:	3324      	adds	r3, #36	@ 0x24
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	440b      	add	r3, r1
 8004808:	332c      	adds	r3, #44	@ 0x2c
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800480e:	f3bf 8f5f 	dmb	sy
 8004812:	e002      	b.n	800481a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004814:	f04f 33ff 	mov.w	r3, #4294967295
 8004818:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004820:	69fb      	ldr	r3, [r7, #28]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200011b0 	.word	0x200011b0

08004830 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	@ 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800483e:	4b21      	ldr	r3, [pc, #132]	@ (80048c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b53      	cmp	r3, #83	@ 0x53
 800484a:	d001      	beq.n	8004850 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800484c:	f7ff fd4e 	bl	80042ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004850:	4b1c      	ldr	r3, [pc, #112]	@ (80048c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004852:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d82c      	bhi.n	80048b4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800485a:	f3ef 8311 	mrs	r3, BASEPRI
 800485e:	f04f 0120 	mov.w	r1, #32
 8004862:	f381 8811 	msr	BASEPRI, r1
 8004866:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4613      	mov	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4413      	add	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	3360      	adds	r3, #96	@ 0x60
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00e      	beq.n	800489e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2200      	movs	r2, #0
 8004896:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2200      	movs	r2, #0
 800489c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b2:	e002      	b.n	80048ba <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80048b4:	f04f 33ff 	mov.w	r3, #4294967295
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3728      	adds	r7, #40	@ 0x28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	200011b0 	.word	0x200011b0

080048c8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	2000      	movs	r0, #0
 80048dc:	f7ff fefe 	bl	80046dc <SEGGER_RTT_Write>
  return len;
 80048e0:	683b      	ldr	r3, [r7, #0]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80048ea:	b480      	push	{r7}
 80048ec:	b087      	sub	sp, #28
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	60fa      	str	r2, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e022      	b.n	800494e <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	60fa      	str	r2, [r7, #12]
 8004912:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b80      	cmp	r3, #128	@ 0x80
 8004918:	d90a      	bls.n	8004930 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 800491e:	e007      	b.n	8004930 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	1c53      	adds	r3, r2, #1
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1c59      	adds	r1, r3, #1
 800492a:	60f9      	str	r1, [r7, #12]
 800492c:	7812      	ldrb	r2, [r2, #0]
 800492e:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	1e5a      	subs	r2, r3, #1
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <_EncodeStr+0x58>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ee      	bne.n	8004920 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	b2da      	uxtb	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	4618      	mov	r0, r3
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3307      	adds	r3, #7
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800497a:	4b34      	ldr	r3, [pc, #208]	@ (8004a4c <_HandleIncomingPacket+0xd8>)
 800497c:	7e1b      	ldrb	r3, [r3, #24]
 800497e:	4618      	mov	r0, r3
 8004980:	1cfb      	adds	r3, r7, #3
 8004982:	2201      	movs	r2, #1
 8004984:	4619      	mov	r1, r3
 8004986:	f7ff fdd3 	bl	8004530 <SEGGER_RTT_ReadNoLock>
 800498a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d057      	beq.n	8004a42 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	2b80      	cmp	r3, #128	@ 0x80
 8004996:	d031      	beq.n	80049fc <_HandleIncomingPacket+0x88>
 8004998:	2b80      	cmp	r3, #128	@ 0x80
 800499a:	dc40      	bgt.n	8004a1e <_HandleIncomingPacket+0xaa>
 800499c:	2b07      	cmp	r3, #7
 800499e:	dc15      	bgt.n	80049cc <_HandleIncomingPacket+0x58>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	dd3c      	ble.n	8004a1e <_HandleIncomingPacket+0xaa>
 80049a4:	3b01      	subs	r3, #1
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d839      	bhi.n	8004a1e <_HandleIncomingPacket+0xaa>
 80049aa:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <_HandleIncomingPacket+0x3c>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049d3 	.word	0x080049d3
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049df 	.word	0x080049df
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80049ce:	d033      	beq.n	8004a38 <_HandleIncomingPacket+0xc4>
 80049d0:	e025      	b.n	8004a1e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80049d2:	f000 fb25 	bl	8005020 <SEGGER_SYSVIEW_Start>
      break;
 80049d6:	e034      	b.n	8004a42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80049d8:	f000 fbdc 	bl	8005194 <SEGGER_SYSVIEW_Stop>
      break;
 80049dc:	e031      	b.n	8004a42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80049de:	f000 fdb5 	bl	800554c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80049e2:	e02e      	b.n	8004a42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80049e4:	f000 fd7a 	bl	80054dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80049e8:	e02b      	b.n	8004a42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80049ea:	f000 fbf9 	bl	80051e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80049ee:	e028      	b.n	8004a42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80049f0:	f001 f842 	bl	8005a78 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80049f4:	e025      	b.n	8004a42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80049f6:	f001 f821 	bl	8005a3c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80049fa:	e022      	b.n	8004a42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049fc:	4b13      	ldr	r3, [pc, #76]	@ (8004a4c <_HandleIncomingPacket+0xd8>)
 80049fe:	7e1b      	ldrb	r3, [r3, #24]
 8004a00:	4618      	mov	r0, r3
 8004a02:	1cfb      	adds	r3, r7, #3
 8004a04:	2201      	movs	r2, #1
 8004a06:	4619      	mov	r1, r3
 8004a08:	f7ff fd92 	bl	8004530 <SEGGER_RTT_ReadNoLock>
 8004a0c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 ff86 	bl	8005928 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004a1c:	e00e      	b.n	8004a3c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	da0c      	bge.n	8004a40 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <_HandleIncomingPacket+0xd8>)
 8004a28:	7e1b      	ldrb	r3, [r3, #24]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	1cfb      	adds	r3, r7, #3
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4619      	mov	r1, r3
 8004a32:	f7ff fd7d 	bl	8004530 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004a36:	e003      	b.n	8004a40 <_HandleIncomingPacket+0xcc>
      break;
 8004a38:	bf00      	nop
 8004a3a:	e002      	b.n	8004a42 <_HandleIncomingPacket+0xce>
      break;
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <_HandleIncomingPacket+0xce>
      break;
 8004a40:	bf00      	nop
    }
  }
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20002670 	.word	0x20002670

08004a50 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08c      	sub	sp, #48	@ 0x30
 8004a54:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004a56:	2301      	movs	r3, #1
 8004a58:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a64:	4b31      	ldr	r3, [pc, #196]	@ (8004b2c <_TrySendOverflowPacket+0xdc>)
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a6a:	e00b      	b.n	8004a84 <_TrySendOverflowPacket+0x34>
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004a76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	09db      	lsrs	r3, r3, #7
 8004a82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a88:	d8f0      	bhi.n	8004a6c <_TrySendOverflowPacket+0x1c>
 8004a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a98:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a9a:	4b25      	ldr	r3, [pc, #148]	@ (8004b30 <_TrySendOverflowPacket+0xe0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004aa0:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <_TrySendOverflowPacket+0xdc>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	e00b      	b.n	8004acc <_TrySendOverflowPacket+0x7c>
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	1c59      	adds	r1, r3, #1
 8004abc:	6279      	str	r1, [r7, #36]	@ 0x24
 8004abe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	09db      	lsrs	r3, r3, #7
 8004aca:	623b      	str	r3, [r7, #32]
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ad0:	d8f0      	bhi.n	8004ab4 <_TrySendOverflowPacket+0x64>
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ad8:	6a3a      	ldr	r2, [r7, #32]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004ae2:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <_TrySendOverflowPacket+0xdc>)
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	1d3b      	adds	r3, r7, #4
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	f7fb fb6c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004af8:	4603      	mov	r3, r0
 8004afa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b02:	4a0a      	ldr	r2, [pc, #40]	@ (8004b2c <_TrySendOverflowPacket+0xdc>)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004b08:	4b08      	ldr	r3, [pc, #32]	@ (8004b2c <_TrySendOverflowPacket+0xdc>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b06      	ldr	r3, [pc, #24]	@ (8004b2c <_TrySendOverflowPacket+0xdc>)
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e004      	b.n	8004b20 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004b16:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <_TrySendOverflowPacket+0xdc>)
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	4a03      	ldr	r2, [pc, #12]	@ (8004b2c <_TrySendOverflowPacket+0xdc>)
 8004b1e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004b20:	693b      	ldr	r3, [r7, #16]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3730      	adds	r7, #48	@ 0x30
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20002670 	.word	0x20002670
 8004b30:	e0001004 	.word	0xe0001004

08004b34 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	@ 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004b40:	4b98      	ldr	r3, [pc, #608]	@ (8004da4 <_SendPacket+0x270>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d010      	beq.n	8004b6a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004b48:	4b96      	ldr	r3, [pc, #600]	@ (8004da4 <_SendPacket+0x270>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 812d 	beq.w	8004dac <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004b52:	4b94      	ldr	r3, [pc, #592]	@ (8004da4 <_SendPacket+0x270>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d109      	bne.n	8004b6e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004b5a:	f7ff ff79 	bl	8004a50 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004b5e:	4b91      	ldr	r3, [pc, #580]	@ (8004da4 <_SendPacket+0x270>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	f040 8124 	bne.w	8004db0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004b68:	e001      	b.n	8004b6e <_SendPacket+0x3a>
    goto Send;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <_SendPacket+0x3c>
Send:
 8004b6e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b1f      	cmp	r3, #31
 8004b74:	d809      	bhi.n	8004b8a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004b76:	4b8b      	ldr	r3, [pc, #556]	@ (8004da4 <_SendPacket+0x270>)
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 8115 	bne.w	8004db4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b17      	cmp	r3, #23
 8004b8e:	d807      	bhi.n	8004ba0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e0c4      	b.n	8004d2a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bac:	d912      	bls.n	8004bd4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	09da      	lsrs	r2, r3, #7
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e006      	b.n	8004be2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b7e      	cmp	r3, #126	@ 0x7e
 8004be6:	d807      	bhi.n	8004bf8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	e098      	b.n	8004d2a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bfe:	d212      	bcs.n	8004c26 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	09da      	lsrs	r2, r3, #7
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	3a01      	subs	r2, #1
 8004c18:	60fa      	str	r2, [r7, #12]
 8004c1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	e081      	b.n	8004d2a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c2c:	d21d      	bcs.n	8004c6a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	0b9a      	lsrs	r2, r3, #14
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	09db      	lsrs	r3, r3, #7
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	3a01      	subs	r2, #1
 8004c48:	60fa      	str	r2, [r7, #12]
 8004c4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	3a01      	subs	r2, #1
 8004c5c:	60fa      	str	r2, [r7, #12]
 8004c5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e05f      	b.n	8004d2a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c70:	d228      	bcs.n	8004cc4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0d5a      	lsrs	r2, r3, #21
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0b9b      	lsrs	r3, r3, #14
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	60fa      	str	r2, [r7, #12]
 8004c8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	09db      	lsrs	r3, r3, #7
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	60fa      	str	r2, [r7, #12]
 8004ca4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	3a01      	subs	r2, #1
 8004cb6:	60fa      	str	r2, [r7, #12]
 8004cb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e032      	b.n	8004d2a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0f1a      	lsrs	r2, r3, #28
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	0d5b      	lsrs	r3, r3, #21
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	3a01      	subs	r2, #1
 8004cde:	60fa      	str	r2, [r7, #12]
 8004ce0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0b9b      	lsrs	r3, r3, #14
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	60fa      	str	r2, [r7, #12]
 8004cf6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	09db      	lsrs	r3, r3, #7
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	3a01      	subs	r2, #1
 8004d0a:	60fa      	str	r2, [r7, #12]
 8004d0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	3a01      	subs	r2, #1
 8004d1e:	60fa      	str	r2, [r7, #12]
 8004d20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004da8 <_SendPacket+0x274>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d30:	4b1c      	ldr	r3, [pc, #112]	@ (8004da4 <_SendPacket+0x270>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	e00b      	b.n	8004d5c <_SendPacket+0x228>
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	09db      	lsrs	r3, r3, #7
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d60:	d8f0      	bhi.n	8004d44 <_SendPacket+0x210>
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004d72:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <_SendPacket+0x270>)
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	4618      	mov	r0, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68f9      	ldr	r1, [r7, #12]
 8004d82:	f7fb fa25 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004d86:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d8e:	4a05      	ldr	r2, [pc, #20]	@ (8004da4 <_SendPacket+0x270>)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	60d3      	str	r3, [r2, #12]
 8004d94:	e00f      	b.n	8004db6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004d96:	4b03      	ldr	r3, [pc, #12]	@ (8004da4 <_SendPacket+0x270>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	4b01      	ldr	r3, [pc, #4]	@ (8004da4 <_SendPacket+0x270>)
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e008      	b.n	8004db6 <_SendPacket+0x282>
 8004da4:	20002670 	.word	0x20002670
 8004da8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004dac:	bf00      	nop
 8004dae:	e002      	b.n	8004db6 <_SendPacket+0x282>
      goto SendDone;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <_SendPacket+0x282>
      goto SendDone;
 8004db4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004db6:	4b14      	ldr	r3, [pc, #80]	@ (8004e08 <_SendPacket+0x2d4>)
 8004db8:	7e1b      	ldrb	r3, [r3, #24]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4a13      	ldr	r2, [pc, #76]	@ (8004e0c <_SendPacket+0x2d8>)
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	440b      	add	r3, r1
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	336c      	adds	r3, #108	@ 0x6c
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <_SendPacket+0x2d4>)
 8004dce:	7e1b      	ldrb	r3, [r3, #24]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	490e      	ldr	r1, [pc, #56]	@ (8004e0c <_SendPacket+0x2d8>)
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4403      	add	r3, r0
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	440b      	add	r3, r1
 8004dde:	3370      	adds	r3, #112	@ 0x70
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d00b      	beq.n	8004dfe <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004de6:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <_SendPacket+0x2d4>)
 8004de8:	789b      	ldrb	r3, [r3, #2]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d107      	bne.n	8004dfe <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004dee:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <_SendPacket+0x2d4>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004df4:	f7ff fdbe 	bl	8004974 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004df8:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <_SendPacket+0x2d4>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004dfe:	bf00      	nop
 8004e00:	3728      	adds	r7, #40	@ 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20002670 	.word	0x20002670
 8004e0c:	200011b0 	.word	0x200011b0

08004e10 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e24:	4917      	ldr	r1, [pc, #92]	@ (8004e84 <SEGGER_SYSVIEW_Init+0x74>)
 8004e26:	4818      	ldr	r0, [pc, #96]	@ (8004e88 <SEGGER_SYSVIEW_Init+0x78>)
 8004e28:	f7ff fc7e 	bl	8004728 <SEGGER_RTT_AllocUpBuffer>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	4b16      	ldr	r3, [pc, #88]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e32:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004e34:	4b15      	ldr	r3, [pc, #84]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e36:	785a      	ldrb	r2, [r3, #1]
 8004e38:	4b14      	ldr	r3, [pc, #80]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e3c:	4b13      	ldr	r3, [pc, #76]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3e:	7e1b      	ldrb	r3, [r3, #24]
 8004e40:	4618      	mov	r0, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2308      	movs	r3, #8
 8004e48:	4a11      	ldr	r2, [pc, #68]	@ (8004e90 <SEGGER_SYSVIEW_Init+0x80>)
 8004e4a:	490f      	ldr	r1, [pc, #60]	@ (8004e88 <SEGGER_SYSVIEW_Init+0x78>)
 8004e4c:	f7ff fcf0 	bl	8004830 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e50:	4b0e      	ldr	r3, [pc, #56]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e56:	4b0f      	ldr	r3, [pc, #60]	@ (8004e94 <SEGGER_SYSVIEW_Init+0x84>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e5c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e64:	4a09      	ldr	r2, [pc, #36]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e6a:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e70:	4a06      	ldr	r2, [pc, #24]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e76:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20001668 	.word	0x20001668
 8004e88:	0800a674 	.word	0x0800a674
 8004e8c:	20002670 	.word	0x20002670
 8004e90:	20002668 	.word	0x20002668
 8004e94:	e0001004 	.word	0xe0001004

08004e98 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ea0:	4a04      	ldr	r2, [pc, #16]	@ (8004eb4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6113      	str	r3, [r2, #16]
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20002670 	.word	0x20002670

08004eb8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec4:	f04f 0120 	mov.w	r1, #32
 8004ec8:	f381 8811 	msr	BASEPRI, r1
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	4808      	ldr	r0, [pc, #32]	@ (8004ef0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ed0:	f7ff fd44 	bl	800495c <_PreparePacket>
 8004ed4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68b8      	ldr	r0, [r7, #8]
 8004edc:	f7ff fe2a 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f383 8811 	msr	BASEPRI, r3
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200026a0 	.word	0x200026a0

08004ef4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004efe:	f3ef 8311 	mrs	r3, BASEPRI
 8004f02:	f04f 0120 	mov.w	r1, #32
 8004f06:	f381 8811 	msr	BASEPRI, r1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	4816      	ldr	r0, [pc, #88]	@ (8004f68 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004f0e:	f7ff fd25 	bl	800495c <_PreparePacket>
 8004f12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e00b      	b.n	8004f3a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1c59      	adds	r1, r3, #1
 8004f2a:	61f9      	str	r1, [r7, #28]
 8004f2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	09db      	lsrs	r3, r3, #7
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f3e:	d8f0      	bhi.n	8004f22 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	61fa      	str	r2, [r7, #28]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	6938      	ldr	r0, [r7, #16]
 8004f56:	f7ff fded 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f383 8811 	msr	BASEPRI, r3
}
 8004f60:	bf00      	nop
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200026a0 	.word	0x200026a0

08004f6c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	@ 0x30
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f78:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7c:	f04f 0120 	mov.w	r1, #32
 8004f80:	f381 8811 	msr	BASEPRI, r1
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	4825      	ldr	r0, [pc, #148]	@ (800501c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f88:	f7ff fce8 	bl	800495c <_PreparePacket>
 8004f8c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f9a:	e00b      	b.n	8004fb4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004fa6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb0:	09db      	lsrs	r3, r3, #7
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fb8:	d8f0      	bhi.n	8004f9c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e00b      	b.n	8004fec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	09db      	lsrs	r3, r3, #7
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ff0:	d8f0      	bhi.n	8004fd4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	69b8      	ldr	r0, [r7, #24]
 8005008:	f7ff fd94 	bl	8004b34 <_SendPacket>
  RECORD_END();
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f383 8811 	msr	BASEPRI, r3
}
 8005012:	bf00      	nop
 8005014:	3730      	adds	r7, #48	@ 0x30
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200026a0 	.word	0x200026a0

08005020 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b08c      	sub	sp, #48	@ 0x30
 8005024:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005026:	4b58      	ldr	r3, [pc, #352]	@ (8005188 <SEGGER_SYSVIEW_Start+0x168>)
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800502c:	f3ef 8311 	mrs	r3, BASEPRI
 8005030:	f04f 0120 	mov.w	r1, #32
 8005034:	f381 8811 	msr	BASEPRI, r1
 8005038:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800503a:	4b53      	ldr	r3, [pc, #332]	@ (8005188 <SEGGER_SYSVIEW_Start+0x168>)
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	220a      	movs	r2, #10
 8005040:	4952      	ldr	r1, [pc, #328]	@ (800518c <SEGGER_SYSVIEW_Start+0x16c>)
 8005042:	4618      	mov	r0, r3
 8005044:	f7fb f8c4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800504e:	200a      	movs	r0, #10
 8005050:	f7ff ff32 	bl	8004eb8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005054:	f3ef 8311 	mrs	r3, BASEPRI
 8005058:	f04f 0120 	mov.w	r1, #32
 800505c:	f381 8811 	msr	BASEPRI, r1
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	484b      	ldr	r0, [pc, #300]	@ (8005190 <SEGGER_SYSVIEW_Start+0x170>)
 8005064:	f7ff fc7a 	bl	800495c <_PreparePacket>
 8005068:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005072:	4b45      	ldr	r3, [pc, #276]	@ (8005188 <SEGGER_SYSVIEW_Start+0x168>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005078:	e00b      	b.n	8005092 <SEGGER_SYSVIEW_Start+0x72>
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	b2da      	uxtb	r2, r3
 800507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005080:	1c59      	adds	r1, r3, #1
 8005082:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005084:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	09db      	lsrs	r3, r3, #7
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005094:	2b7f      	cmp	r3, #127	@ 0x7f
 8005096:	d8f0      	bhi.n	800507a <SEGGER_SYSVIEW_Start+0x5a>
 8005098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800509e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ac:	4b36      	ldr	r3, [pc, #216]	@ (8005188 <SEGGER_SYSVIEW_Start+0x168>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	e00b      	b.n	80050cc <SEGGER_SYSVIEW_Start+0xac>
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80050be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	09db      	lsrs	r3, r3, #7
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80050d0:	d8f0      	bhi.n	80050b4 <SEGGER_SYSVIEW_Start+0x94>
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80050d8:	6a3a      	ldr	r2, [r7, #32]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <SEGGER_SYSVIEW_Start+0x168>)
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	e00b      	b.n	8005106 <SEGGER_SYSVIEW_Start+0xe6>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	1c59      	adds	r1, r3, #1
 80050f6:	61f9      	str	r1, [r7, #28]
 80050f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	09db      	lsrs	r3, r3, #7
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b7f      	cmp	r3, #127	@ 0x7f
 800510a:	d8f0      	bhi.n	80050ee <SEGGER_SYSVIEW_Start+0xce>
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	61fa      	str	r2, [r7, #28]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e00b      	b.n	800513e <SEGGER_SYSVIEW_Start+0x11e>
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	1c59      	adds	r1, r3, #1
 800512e:	6179      	str	r1, [r7, #20]
 8005130:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	09db      	lsrs	r3, r3, #7
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b7f      	cmp	r3, #127	@ 0x7f
 8005142:	d8f0      	bhi.n	8005126 <SEGGER_SYSVIEW_Start+0x106>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	617a      	str	r2, [r7, #20]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005154:	2218      	movs	r2, #24
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff fceb 	bl	8004b34 <_SendPacket>
      RECORD_END();
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005164:	4b08      	ldr	r3, [pc, #32]	@ (8005188 <SEGGER_SYSVIEW_Start+0x168>)
 8005166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800516c:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <SEGGER_SYSVIEW_Start+0x168>)
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005172:	f000 f9eb 	bl	800554c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005176:	f000 f9b1 	bl	80054dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800517a:	f000 fc7d 	bl	8005a78 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800517e:	bf00      	nop
 8005180:	3730      	adds	r7, #48	@ 0x30
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20002670 	.word	0x20002670
 800518c:	0800a760 	.word	0x0800a760
 8005190:	200026a0 	.word	0x200026a0

08005194 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800519a:	f3ef 8311 	mrs	r3, BASEPRI
 800519e:	f04f 0120 	mov.w	r1, #32
 80051a2:	f381 8811 	msr	BASEPRI, r1
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	480b      	ldr	r0, [pc, #44]	@ (80051d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80051aa:	f7ff fbd7 	bl	800495c <_PreparePacket>
 80051ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80051b0:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <SEGGER_SYSVIEW_Stop+0x48>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80051b8:	220b      	movs	r2, #11
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	6838      	ldr	r0, [r7, #0]
 80051be:	f7ff fcb9 	bl	8004b34 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <SEGGER_SYSVIEW_Stop+0x48>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f383 8811 	msr	BASEPRI, r3
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	200026a0 	.word	0x200026a0
 80051dc:	20002670 	.word	0x20002670

080051e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	@ 0x30
 80051e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051e6:	f3ef 8311 	mrs	r3, BASEPRI
 80051ea:	f04f 0120 	mov.w	r1, #32
 80051ee:	f381 8811 	msr	BASEPRI, r1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	4845      	ldr	r0, [pc, #276]	@ (800530c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051f6:	f7ff fbb1 	bl	800495c <_PreparePacket>
 80051fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005204:	4b42      	ldr	r3, [pc, #264]	@ (8005310 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520a:	e00b      	b.n	8005224 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	b2da      	uxtb	r2, r3
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005212:	1c59      	adds	r1, r3, #1
 8005214:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005216:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	09db      	lsrs	r3, r3, #7
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	2b7f      	cmp	r3, #127	@ 0x7f
 8005228:	d8f0      	bhi.n	800520c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005238:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
 800523e:	4b34      	ldr	r3, [pc, #208]	@ (8005310 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	e00b      	b.n	800525e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	1c59      	adds	r1, r3, #1
 800524e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005250:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	09db      	lsrs	r3, r3, #7
 800525c:	623b      	str	r3, [r7, #32]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	2b7f      	cmp	r3, #127	@ 0x7f
 8005262:	d8f0      	bhi.n	8005246 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	627a      	str	r2, [r7, #36]	@ 0x24
 800526a:	6a3a      	ldr	r2, [r7, #32]
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	4b25      	ldr	r3, [pc, #148]	@ (8005310 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	e00b      	b.n	8005298 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	1c59      	adds	r1, r3, #1
 8005288:	61f9      	str	r1, [r7, #28]
 800528a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	09db      	lsrs	r3, r3, #7
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b7f      	cmp	r3, #127	@ 0x7f
 800529c:	d8f0      	bhi.n	8005280 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	61fa      	str	r2, [r7, #28]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	e00b      	b.n	80052d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1c59      	adds	r1, r3, #1
 80052c0:	6179      	str	r1, [r7, #20]
 80052c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	09db      	lsrs	r3, r3, #7
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052d4:	d8f0      	bhi.n	80052b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	617a      	str	r2, [r7, #20]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052e6:	2218      	movs	r2, #24
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	68b8      	ldr	r0, [r7, #8]
 80052ec:	f7ff fc22 	bl	8004b34 <_SendPacket>
  RECORD_END();
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052fe:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	4798      	blx	r3
  }
}
 8005304:	bf00      	nop
 8005306:	3730      	adds	r7, #48	@ 0x30
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	200026a0 	.word	0x200026a0
 8005310:	20002670 	.word	0x20002670

08005314 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b092      	sub	sp, #72	@ 0x48
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800531c:	f3ef 8311 	mrs	r3, BASEPRI
 8005320:	f04f 0120 	mov.w	r1, #32
 8005324:	f381 8811 	msr	BASEPRI, r1
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	486a      	ldr	r0, [pc, #424]	@ (80054d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800532c:	f7ff fb16 	bl	800495c <_PreparePacket>
 8005330:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	647b      	str	r3, [r7, #68]	@ 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b66      	ldr	r3, [pc, #408]	@ (80054d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	643b      	str	r3, [r7, #64]	@ 0x40
 8005346:	e00b      	b.n	8005360 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800534a:	b2da      	uxtb	r2, r3
 800534c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800534e:	1c59      	adds	r1, r3, #1
 8005350:	6479      	str	r1, [r7, #68]	@ 0x44
 8005352:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800535c:	09db      	lsrs	r3, r3, #7
 800535e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005362:	2b7f      	cmp	r3, #127	@ 0x7f
 8005364:	d8f0      	bhi.n	8005348 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	647a      	str	r2, [r7, #68]	@ 0x44
 800536c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005374:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005380:	e00b      	b.n	800539a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	b2da      	uxtb	r2, r3
 8005386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005388:	1c59      	adds	r1, r3, #1
 800538a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800538c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	09db      	lsrs	r3, r3, #7
 8005398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	2b7f      	cmp	r3, #127	@ 0x7f
 800539e:	d8f0      	bhi.n	8005382 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80053a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	4619      	mov	r1, r3
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff fa96 	bl	80048ea <_EncodeStr>
 80053be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053c0:	2209      	movs	r2, #9
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	6938      	ldr	r0, [r7, #16]
 80053c6:	f7ff fbb5 	bl	8004b34 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b40      	ldr	r3, [pc, #256]	@ (80054d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053de:	e00b      	b.n	80053f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	6379      	str	r1, [r7, #52]	@ 0x34
 80053ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80053fc:	d8f0      	bhi.n	80053e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80053fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	637a      	str	r2, [r7, #52]	@ 0x34
 8005404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005418:	e00b      	b.n	8005432 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	b2da      	uxtb	r2, r3
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005420:	1c59      	adds	r1, r3, #1
 8005422:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005424:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	09db      	lsrs	r3, r3, #7
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005434:	2b7f      	cmp	r3, #127	@ 0x7f
 8005436:	d8f0      	bhi.n	800541a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005446:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	e00b      	b.n	800546c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	6279      	str	r1, [r7, #36]	@ 0x24
 800545e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	09db      	lsrs	r3, r3, #7
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005470:	d8f0      	bhi.n	8005454 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	627a      	str	r2, [r7, #36]	@ 0x24
 8005478:	6a3a      	ldr	r2, [r7, #32]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e00b      	b.n	80054a6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	1c59      	adds	r1, r3, #1
 8005496:	61f9      	str	r1, [r7, #28]
 8005498:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	09db      	lsrs	r3, r3, #7
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054aa:	d8f0      	bhi.n	800548e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	61fa      	str	r2, [r7, #28]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80054bc:	2215      	movs	r2, #21
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	6938      	ldr	r0, [r7, #16]
 80054c2:	f7ff fb37 	bl	8004b34 <_SendPacket>
  RECORD_END();
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f383 8811 	msr	BASEPRI, r3
}
 80054cc:	bf00      	nop
 80054ce:	3748      	adds	r7, #72	@ 0x48
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	200026a0 	.word	0x200026a0
 80054d8:	20002670 	.word	0x20002670

080054dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054e0:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054f2:	4b03      	ldr	r3, [pc, #12]	@ (8005500 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4798      	blx	r3
  }
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20002670 	.word	0x20002670

08005504 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800550c:	f3ef 8311 	mrs	r3, BASEPRI
 8005510:	f04f 0120 	mov.w	r1, #32
 8005514:	f381 8811 	msr	BASEPRI, r1
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	480b      	ldr	r0, [pc, #44]	@ (8005548 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800551c:	f7ff fa1e 	bl	800495c <_PreparePacket>
 8005520:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005522:	2280      	movs	r2, #128	@ 0x80
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	6938      	ldr	r0, [r7, #16]
 8005528:	f7ff f9df 	bl	80048ea <_EncodeStr>
 800552c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800552e:	220e      	movs	r2, #14
 8005530:	68f9      	ldr	r1, [r7, #12]
 8005532:	6938      	ldr	r0, [r7, #16]
 8005534:	f7ff fafe 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	200026a0 	.word	0x200026a0

0800554c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005552:	4b15      	ldr	r3, [pc, #84]	@ (80055a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01a      	beq.n	8005590 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800555a:	4b13      	ldr	r3, [pc, #76]	@ (80055a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005564:	4b10      	ldr	r3, [pc, #64]	@ (80055a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4798      	blx	r3
 800556c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005570:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	000a      	movs	r2, r1
 8005580:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005582:	4613      	mov	r3, r2
 8005584:	461a      	mov	r2, r3
 8005586:	4621      	mov	r1, r4
 8005588:	200d      	movs	r0, #13
 800558a:	f7ff fcef 	bl	8004f6c <SEGGER_SYSVIEW_RecordU32x2>
 800558e:	e006      	b.n	800559e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005590:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4619      	mov	r1, r3
 8005596:	200c      	movs	r0, #12
 8005598:	f7ff fcac 	bl	8004ef4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20002670 	.word	0x20002670
 80055ac:	e0001004 	.word	0xe0001004

080055b0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055b6:	f3ef 8311 	mrs	r3, BASEPRI
 80055ba:	f04f 0120 	mov.w	r1, #32
 80055be:	f381 8811 	msr	BASEPRI, r1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	4819      	ldr	r0, [pc, #100]	@ (800562c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80055c6:	f7ff f9c9 	bl	800495c <_PreparePacket>
 80055ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80055d0:	4b17      	ldr	r3, [pc, #92]	@ (8005630 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	e00b      	b.n	80055fc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	1c59      	adds	r1, r3, #1
 80055ec:	6179      	str	r1, [r7, #20]
 80055ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	09db      	lsrs	r3, r3, #7
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005600:	d8f0      	bhi.n	80055e4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	617a      	str	r2, [r7, #20]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005612:	2202      	movs	r2, #2
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	68b8      	ldr	r0, [r7, #8]
 8005618:	f7ff fa8c 	bl	8004b34 <_SendPacket>
  RECORD_END();
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f383 8811 	msr	BASEPRI, r3
}
 8005622:	bf00      	nop
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	200026a0 	.word	0x200026a0
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800563a:	f3ef 8311 	mrs	r3, BASEPRI
 800563e:	f04f 0120 	mov.w	r1, #32
 8005642:	f381 8811 	msr	BASEPRI, r1
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	4807      	ldr	r0, [pc, #28]	@ (8005668 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800564a:	f7ff f987 	bl	800495c <_PreparePacket>
 800564e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005650:	2203      	movs	r2, #3
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	6838      	ldr	r0, [r7, #0]
 8005656:	f7ff fa6d 	bl	8004b34 <_SendPacket>
  RECORD_END();
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f383 8811 	msr	BASEPRI, r3
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	200026a0 	.word	0x200026a0

0800566c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005672:	f3ef 8311 	mrs	r3, BASEPRI
 8005676:	f04f 0120 	mov.w	r1, #32
 800567a:	f381 8811 	msr	BASEPRI, r1
 800567e:	607b      	str	r3, [r7, #4]
 8005680:	4807      	ldr	r0, [pc, #28]	@ (80056a0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005682:	f7ff f96b 	bl	800495c <_PreparePacket>
 8005686:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005688:	2212      	movs	r2, #18
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6838      	ldr	r0, [r7, #0]
 800568e:	f7ff fa51 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f383 8811 	msr	BASEPRI, r3
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	200026a0 	.word	0x200026a0

080056a4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056aa:	f3ef 8311 	mrs	r3, BASEPRI
 80056ae:	f04f 0120 	mov.w	r1, #32
 80056b2:	f381 8811 	msr	BASEPRI, r1
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	4807      	ldr	r0, [pc, #28]	@ (80056d8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80056ba:	f7ff f94f 	bl	800495c <_PreparePacket>
 80056be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80056c0:	2211      	movs	r2, #17
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6838      	ldr	r0, [r7, #0]
 80056c6:	f7ff fa35 	bl	8004b34 <_SendPacket>
  RECORD_END();
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f383 8811 	msr	BASEPRI, r3
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	200026a0 	.word	0x200026a0

080056dc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056e4:	f3ef 8311 	mrs	r3, BASEPRI
 80056e8:	f04f 0120 	mov.w	r1, #32
 80056ec:	f381 8811 	msr	BASEPRI, r1
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	4819      	ldr	r0, [pc, #100]	@ (8005758 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80056f4:	f7ff f932 	bl	800495c <_PreparePacket>
 80056f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056fe:	4b17      	ldr	r3, [pc, #92]	@ (800575c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	e00b      	b.n	800572a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	1c59      	adds	r1, r3, #1
 800571a:	61f9      	str	r1, [r7, #28]
 800571c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	09db      	lsrs	r3, r3, #7
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b7f      	cmp	r3, #127	@ 0x7f
 800572e:	d8f0      	bhi.n	8005712 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	61fa      	str	r2, [r7, #28]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005740:	2208      	movs	r2, #8
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f7ff f9f5 	bl	8004b34 <_SendPacket>
  RECORD_END();
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f383 8811 	msr	BASEPRI, r3
}
 8005750:	bf00      	nop
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	200026a0 	.word	0x200026a0
 800575c:	20002670 	.word	0x20002670

08005760 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005768:	f3ef 8311 	mrs	r3, BASEPRI
 800576c:	f04f 0120 	mov.w	r1, #32
 8005770:	f381 8811 	msr	BASEPRI, r1
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	4819      	ldr	r0, [pc, #100]	@ (80057dc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005778:	f7ff f8f0 	bl	800495c <_PreparePacket>
 800577c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005782:	4b17      	ldr	r3, [pc, #92]	@ (80057e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	e00b      	b.n	80057ae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	1c59      	adds	r1, r3, #1
 800579e:	61f9      	str	r1, [r7, #28]
 80057a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	09db      	lsrs	r3, r3, #7
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057b2:	d8f0      	bhi.n	8005796 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	61fa      	str	r2, [r7, #28]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80057c4:	2204      	movs	r2, #4
 80057c6:	68f9      	ldr	r1, [r7, #12]
 80057c8:	6938      	ldr	r0, [r7, #16]
 80057ca:	f7ff f9b3 	bl	8004b34 <_SendPacket>
  RECORD_END();
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f383 8811 	msr	BASEPRI, r3
}
 80057d4:	bf00      	nop
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	200026a0 	.word	0x200026a0
 80057e0:	20002670 	.word	0x20002670

080057e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057ec:	f3ef 8311 	mrs	r3, BASEPRI
 80057f0:	f04f 0120 	mov.w	r1, #32
 80057f4:	f381 8811 	msr	BASEPRI, r1
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	4819      	ldr	r0, [pc, #100]	@ (8005860 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80057fc:	f7ff f8ae 	bl	800495c <_PreparePacket>
 8005800:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005806:	4b17      	ldr	r3, [pc, #92]	@ (8005864 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e00b      	b.n	8005832 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	1c59      	adds	r1, r3, #1
 8005822:	61f9      	str	r1, [r7, #28]
 8005824:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	09db      	lsrs	r3, r3, #7
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b7f      	cmp	r3, #127	@ 0x7f
 8005836:	d8f0      	bhi.n	800581a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	61fa      	str	r2, [r7, #28]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005848:	2206      	movs	r2, #6
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	6938      	ldr	r0, [r7, #16]
 800584e:	f7ff f971 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f383 8811 	msr	BASEPRI, r3
}
 8005858:	bf00      	nop
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	200026a0 	.word	0x200026a0
 8005864:	20002670 	.word	0x20002670

08005868 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	@ 0x28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005872:	f3ef 8311 	mrs	r3, BASEPRI
 8005876:	f04f 0120 	mov.w	r1, #32
 800587a:	f381 8811 	msr	BASEPRI, r1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	4827      	ldr	r0, [pc, #156]	@ (8005920 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005882:	f7ff f86b 	bl	800495c <_PreparePacket>
 8005886:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800588c:	4b25      	ldr	r3, [pc, #148]	@ (8005924 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	e00b      	b.n	80058b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80058aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	09db      	lsrs	r3, r3, #7
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80058bc:	d8f0      	bhi.n	80058a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80058c4:	6a3a      	ldr	r2, [r7, #32]
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e00b      	b.n	80058f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	61f9      	str	r1, [r7, #28]
 80058e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	09db      	lsrs	r3, r3, #7
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058f4:	d8f0      	bhi.n	80058d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	61fa      	str	r2, [r7, #28]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005906:	2207      	movs	r2, #7
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	6938      	ldr	r0, [r7, #16]
 800590c:	f7ff f912 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f383 8811 	msr	BASEPRI, r3
}
 8005916:	bf00      	nop
 8005918:	3728      	adds	r7, #40	@ 0x28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200026a0 	.word	0x200026a0
 8005924:	20002670 	.word	0x20002670

08005928 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b08c      	sub	sp, #48	@ 0x30
 800592c:	af00      	add	r7, sp, #0
 800592e:	4603      	mov	r3, r0
 8005930:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005932:	4b40      	ldr	r3, [pc, #256]	@ (8005a34 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d077      	beq.n	8005a2a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800593a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005940:	2300      	movs	r3, #0
 8005942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005944:	e008      	b.n	8005958 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005954:	3301      	adds	r3, #1
 8005956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800595c:	429a      	cmp	r2, r3
 800595e:	d3f2      	bcc.n	8005946 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005960:	e000      	b.n	8005964 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005962:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d055      	beq.n	8005a16 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800596a:	f3ef 8311 	mrs	r3, BASEPRI
 800596e:	f04f 0120 	mov.w	r1, #32
 8005972:	f381 8811 	msr	BASEPRI, r1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	482f      	ldr	r0, [pc, #188]	@ (8005a38 <SEGGER_SYSVIEW_SendModule+0x110>)
 800597a:	f7fe ffef 	bl	800495c <_PreparePacket>
 800597e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	e00b      	b.n	80059a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005994:	1c59      	adds	r1, r3, #1
 8005996:	6279      	str	r1, [r7, #36]	@ 0x24
 8005998:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	09db      	lsrs	r3, r3, #7
 80059a4:	623b      	str	r3, [r7, #32]
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80059aa:	d8f0      	bhi.n	800598e <SEGGER_SYSVIEW_SendModule+0x66>
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	e00b      	b.n	80059e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	61f9      	str	r1, [r7, #28]
 80059d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	09db      	lsrs	r3, r3, #7
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e4:	d8f0      	bhi.n	80059c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	61fa      	str	r2, [r7, #28]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2280      	movs	r2, #128	@ 0x80
 80059fc:	4619      	mov	r1, r3
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7fe ff73 	bl	80048ea <_EncodeStr>
 8005a04:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005a06:	2216      	movs	r2, #22
 8005a08:	68f9      	ldr	r1, [r7, #12]
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f7ff f892 	bl	8004b34 <_SendPacket>
      RECORD_END();
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d006      	beq.n	8005a2a <SEGGER_SYSVIEW_SendModule+0x102>
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4798      	blx	r3
    }
  }
}
 8005a2a:	bf00      	nop
 8005a2c:	3730      	adds	r7, #48	@ 0x30
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20002698 	.word	0x20002698
 8005a38:	200026a0 	.word	0x200026a0

08005a3c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a42:	4b0c      	ldr	r3, [pc, #48]	@ (8005a74 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00f      	beq.n	8005a6a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a74 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f2      	bne.n	8005a50 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20002698 	.word	0x20002698

08005a78 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a82:	f04f 0120 	mov.w	r1, #32
 8005a86:	f381 8811 	msr	BASEPRI, r1
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	4817      	ldr	r0, [pc, #92]	@ (8005aec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a8e:	f7fe ff65 	bl	800495c <_PreparePacket>
 8005a92:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	e00b      	b.n	8005abc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	6179      	str	r1, [r7, #20]
 8005aae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	09db      	lsrs	r3, r3, #7
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ac0:	d8f0      	bhi.n	8005aa4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	617a      	str	r2, [r7, #20]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005ad2:	221b      	movs	r2, #27
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	68b8      	ldr	r0, [r7, #8]
 8005ad8:	f7ff f82c 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f383 8811 	msr	BASEPRI, r3
}
 8005ae2:	bf00      	nop
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	200026a0 	.word	0x200026a0
 8005af0:	2000269c 	.word	0x2000269c

08005af4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	@ 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005afc:	f3ef 8311 	mrs	r3, BASEPRI
 8005b00:	f04f 0120 	mov.w	r1, #32
 8005b04:	f381 8811 	msr	BASEPRI, r1
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	4827      	ldr	r0, [pc, #156]	@ (8005ba8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005b0c:	f7fe ff26 	bl	800495c <_PreparePacket>
 8005b10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b12:	2280      	movs	r2, #128	@ 0x80
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	6938      	ldr	r0, [r7, #16]
 8005b18:	f7fe fee7 	bl	80048ea <_EncodeStr>
 8005b1c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b22:	2301      	movs	r3, #1
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	e00b      	b.n	8005b40 <SEGGER_SYSVIEW_Warn+0x4c>
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	09db      	lsrs	r3, r3, #7
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b44:	d8f0      	bhi.n	8005b28 <SEGGER_SYSVIEW_Warn+0x34>
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b4c:	6a3a      	ldr	r2, [r7, #32]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	e00b      	b.n	8005b78 <SEGGER_SYSVIEW_Warn+0x84>
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	61f9      	str	r1, [r7, #28]
 8005b6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	09db      	lsrs	r3, r3, #7
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b7c:	d8f0      	bhi.n	8005b60 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	61fa      	str	r2, [r7, #28]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b8e:	221a      	movs	r2, #26
 8005b90:	68f9      	ldr	r1, [r7, #12]
 8005b92:	6938      	ldr	r0, [r7, #16]
 8005b94:	f7fe ffce 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
}
 8005b9e:	bf00      	nop
 8005ba0:	3728      	adds	r7, #40	@ 0x28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200026a0 	.word	0x200026a0

08005bac <_EnableDWT>:

// The lowest RAM address used for IDs (pointers)
#define SYSVIEW_RAM_BASE        (0x20000000)


static void _EnableDWT(void) {
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005bb0:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <_EnableDWT+0x2c>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4a08      	ldr	r2, [pc, #32]	@ (8005bd8 <_EnableDWT+0x2c>)
 8005bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bba:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8005bbc:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <_EnableDWT+0x30>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	605a      	str	r2, [r3, #4]
  DWT->CTRL  |= DWT_CTRL_CYCCNTENA_Msk;
 8005bc2:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <_EnableDWT+0x30>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a05      	ldr	r2, [pc, #20]	@ (8005bdc <_EnableDWT+0x30>)
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	e000edf0 	.word	0xe000edf0
 8005bdc:	e0001000 	.word	0xe0001000

08005be0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005be4:	4803      	ldr	r0, [pc, #12]	@ (8005bf4 <_cbSendSystemDesc+0x14>)
 8005be6:	f7ff fc8d 	bl	8005504 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005bea:	4803      	ldr	r0, [pc, #12]	@ (8005bf8 <_cbSendSystemDesc+0x18>)
 8005bec:	f7ff fc8a 	bl	8005504 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005bf0:	bf00      	nop
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	0800a67c 	.word	0x0800a67c
 8005bf8:	0800a6b4 	.word	0x0800a6b4

08005bfc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 8005c00:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <SEGGER_SYSVIEW_Conf+0x24>)
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	4b06      	ldr	r3, [pc, #24]	@ (8005c20 <SEGGER_SYSVIEW_Conf+0x24>)
 8005c06:	6819      	ldr	r1, [r3, #0]
 8005c08:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <SEGGER_SYSVIEW_Conf+0x28>)
 8005c0a:	4a07      	ldr	r2, [pc, #28]	@ (8005c28 <SEGGER_SYSVIEW_Conf+0x2c>)
 8005c0c:	f7ff f900 	bl	8004e10 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005c10:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8005c14:	f7ff f940 	bl	8004e98 <SEGGER_SYSVIEW_SetRAMBase>
  _EnableDWT();
 8005c18:	f7ff ffc8 	bl	8005bac <_EnableDWT>
}
 8005c1c:	bf00      	nop
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000000 	.word	0x20000000
 8005c24:	08005be1 	.word	0x08005be1
 8005c28:	0800a76c 	.word	0x0800a76c

08005c2c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
 8005c36:	e033      	b.n	8005ca0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005c38:	491e      	ldr	r1, [pc, #120]	@ (8005cb4 <_cbSendTaskList+0x88>)
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	491a      	ldr	r1, [pc, #104]	@ (8005cb4 <_cbSendTaskList+0x88>)
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	3304      	adds	r3, #4
 8005c58:	6819      	ldr	r1, [r3, #0]
 8005c5a:	4c16      	ldr	r4, [pc, #88]	@ (8005cb4 <_cbSendTaskList+0x88>)
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4423      	add	r3, r4
 8005c68:	3308      	adds	r3, #8
 8005c6a:	681c      	ldr	r4, [r3, #0]
 8005c6c:	4d11      	ldr	r5, [pc, #68]	@ (8005cb4 <_cbSendTaskList+0x88>)
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	442b      	add	r3, r5
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	681d      	ldr	r5, [r3, #0]
 8005c7e:	4e0d      	ldr	r6, [pc, #52]	@ (8005cb4 <_cbSendTaskList+0x88>)
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4433      	add	r3, r6
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	462b      	mov	r3, r5
 8005c94:	4622      	mov	r2, r4
 8005c96:	f000 f8bd 	bl	8005e14 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <_cbSendTaskList+0x8c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3c6      	bcc.n	8005c38 <_cbSendTaskList+0xc>
  }
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb4:	20002784 	.word	0x20002784
 8005cb8:	20002824 	.word	0x20002824

08005cbc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005cc4:	f7fd fc28 	bl	8003518 <xTaskGetTickCountFromISR>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2200      	movs	r2, #0
 8005ccc:	469a      	mov	sl, r3
 8005cce:	4693      	mov	fp, r2
 8005cd0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005cd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	f04f 0a00 	mov.w	sl, #0
 8005ce0:	f04f 0b00 	mov.w	fp, #0
 8005ce4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005ce8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005cec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	465b      	mov	r3, fp
 8005cf4:	1a14      	subs	r4, r2, r0
 8005cf6:	eb63 0501 	sbc.w	r5, r3, r1
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	00ab      	lsls	r3, r5, #2
 8005d04:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005d08:	00a2      	lsls	r2, r4, #2
 8005d0a:	4614      	mov	r4, r2
 8005d0c:	461d      	mov	r5, r3
 8005d0e:	eb14 0800 	adds.w	r8, r4, r0
 8005d12:	eb45 0901 	adc.w	r9, r5, r1
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d2a:	4690      	mov	r8, r2
 8005d2c:	4699      	mov	r9, r3
 8005d2e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005d32:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005d44 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005d52:	2205      	movs	r2, #5
 8005d54:	492b      	ldr	r1, [pc, #172]	@ (8005e04 <SYSVIEW_AddTask+0xc0>)
 8005d56:	68b8      	ldr	r0, [r7, #8]
 8005d58:	f001 f8fa 	bl	8006f50 <memcmp>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d04b      	beq.n	8005dfa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005d62:	4b29      	ldr	r3, [pc, #164]	@ (8005e08 <SYSVIEW_AddTask+0xc4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b07      	cmp	r3, #7
 8005d68:	d903      	bls.n	8005d72 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005d6a:	4828      	ldr	r0, [pc, #160]	@ (8005e0c <SYSVIEW_AddTask+0xc8>)
 8005d6c:	f7ff fec2 	bl	8005af4 <SEGGER_SYSVIEW_Warn>
    return;
 8005d70:	e044      	b.n	8005dfc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005d72:	4b25      	ldr	r3, [pc, #148]	@ (8005e08 <SYSVIEW_AddTask+0xc4>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4926      	ldr	r1, [pc, #152]	@ (8005e10 <SYSVIEW_AddTask+0xcc>)
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005d86:	4b20      	ldr	r3, [pc, #128]	@ (8005e08 <SYSVIEW_AddTask+0xc4>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4921      	ldr	r1, [pc, #132]	@ (8005e10 <SYSVIEW_AddTask+0xcc>)
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	3304      	adds	r3, #4
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005e08 <SYSVIEW_AddTask+0xc4>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	491b      	ldr	r1, [pc, #108]	@ (8005e10 <SYSVIEW_AddTask+0xcc>)
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	3308      	adds	r3, #8
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005db2:	4b15      	ldr	r3, [pc, #84]	@ (8005e08 <SYSVIEW_AddTask+0xc4>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4916      	ldr	r1, [pc, #88]	@ (8005e10 <SYSVIEW_AddTask+0xcc>)
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e08 <SYSVIEW_AddTask+0xc4>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4910      	ldr	r1, [pc, #64]	@ (8005e10 <SYSVIEW_AddTask+0xcc>)
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3310      	adds	r3, #16
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005dde:	4b0a      	ldr	r3, [pc, #40]	@ (8005e08 <SYSVIEW_AddTask+0xc4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	4a08      	ldr	r2, [pc, #32]	@ (8005e08 <SYSVIEW_AddTask+0xc4>)
 8005de6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f80e 	bl	8005e14 <SYSVIEW_SendTaskInfo>
 8005df8:	e000      	b.n	8005dfc <SYSVIEW_AddTask+0xb8>
    return;
 8005dfa:	bf00      	nop

}
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	0800a6c4 	.word	0x0800a6c4
 8005e08:	20002824 	.word	0x20002824
 8005e0c:	0800a6cc 	.word	0x0800a6cc
 8005e10:	20002784 	.word	0x20002784

08005e14 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	@ 0x28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005e22:	f107 0310 	add.w	r3, r7, #16
 8005e26:	2218      	movs	r2, #24
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 f8a0 	bl	8006f70 <memset>
  TaskInfo.TaskID     = TaskID;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005e44:	f107 0310 	add.w	r3, r7, #16
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fa63 	bl	8005314 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005e4e:	bf00      	nop
 8005e50:	3728      	adds	r7, #40	@ 0x28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <__cvt>:
 8005e56:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5a:	ec57 6b10 	vmov	r6, r7, d0
 8005e5e:	2f00      	cmp	r7, #0
 8005e60:	460c      	mov	r4, r1
 8005e62:	4619      	mov	r1, r3
 8005e64:	463b      	mov	r3, r7
 8005e66:	bfbb      	ittet	lt
 8005e68:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e6c:	461f      	movlt	r7, r3
 8005e6e:	2300      	movge	r3, #0
 8005e70:	232d      	movlt	r3, #45	@ 0x2d
 8005e72:	700b      	strb	r3, [r1, #0]
 8005e74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e76:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e7a:	4691      	mov	r9, r2
 8005e7c:	f023 0820 	bic.w	r8, r3, #32
 8005e80:	bfbc      	itt	lt
 8005e82:	4632      	movlt	r2, r6
 8005e84:	4616      	movlt	r6, r2
 8005e86:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e8a:	d005      	beq.n	8005e98 <__cvt+0x42>
 8005e8c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e90:	d100      	bne.n	8005e94 <__cvt+0x3e>
 8005e92:	3401      	adds	r4, #1
 8005e94:	2102      	movs	r1, #2
 8005e96:	e000      	b.n	8005e9a <__cvt+0x44>
 8005e98:	2103      	movs	r1, #3
 8005e9a:	ab03      	add	r3, sp, #12
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	ab02      	add	r3, sp, #8
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	ec47 6b10 	vmov	d0, r6, r7
 8005ea6:	4653      	mov	r3, sl
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	f001 f96d 	bl	8007188 <_dtoa_r>
 8005eae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	d119      	bne.n	8005eea <__cvt+0x94>
 8005eb6:	f019 0f01 	tst.w	r9, #1
 8005eba:	d00e      	beq.n	8005eda <__cvt+0x84>
 8005ebc:	eb00 0904 	add.w	r9, r0, r4
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	f7fa fe4e 	bl	8000b68 <__aeabi_dcmpeq>
 8005ecc:	b108      	cbz	r0, 8005ed2 <__cvt+0x7c>
 8005ece:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ed2:	2230      	movs	r2, #48	@ 0x30
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	454b      	cmp	r3, r9
 8005ed8:	d31e      	bcc.n	8005f18 <__cvt+0xc2>
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ede:	1b5b      	subs	r3, r3, r5
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	b004      	add	sp, #16
 8005ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005eee:	eb00 0904 	add.w	r9, r0, r4
 8005ef2:	d1e5      	bne.n	8005ec0 <__cvt+0x6a>
 8005ef4:	7803      	ldrb	r3, [r0, #0]
 8005ef6:	2b30      	cmp	r3, #48	@ 0x30
 8005ef8:	d10a      	bne.n	8005f10 <__cvt+0xba>
 8005efa:	2200      	movs	r2, #0
 8005efc:	2300      	movs	r3, #0
 8005efe:	4630      	mov	r0, r6
 8005f00:	4639      	mov	r1, r7
 8005f02:	f7fa fe31 	bl	8000b68 <__aeabi_dcmpeq>
 8005f06:	b918      	cbnz	r0, 8005f10 <__cvt+0xba>
 8005f08:	f1c4 0401 	rsb	r4, r4, #1
 8005f0c:	f8ca 4000 	str.w	r4, [sl]
 8005f10:	f8da 3000 	ldr.w	r3, [sl]
 8005f14:	4499      	add	r9, r3
 8005f16:	e7d3      	b.n	8005ec0 <__cvt+0x6a>
 8005f18:	1c59      	adds	r1, r3, #1
 8005f1a:	9103      	str	r1, [sp, #12]
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e7d9      	b.n	8005ed4 <__cvt+0x7e>

08005f20 <__exponent>:
 8005f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f22:	2900      	cmp	r1, #0
 8005f24:	bfba      	itte	lt
 8005f26:	4249      	neglt	r1, r1
 8005f28:	232d      	movlt	r3, #45	@ 0x2d
 8005f2a:	232b      	movge	r3, #43	@ 0x2b
 8005f2c:	2909      	cmp	r1, #9
 8005f2e:	7002      	strb	r2, [r0, #0]
 8005f30:	7043      	strb	r3, [r0, #1]
 8005f32:	dd29      	ble.n	8005f88 <__exponent+0x68>
 8005f34:	f10d 0307 	add.w	r3, sp, #7
 8005f38:	461d      	mov	r5, r3
 8005f3a:	270a      	movs	r7, #10
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f42:	fb07 1416 	mls	r4, r7, r6, r1
 8005f46:	3430      	adds	r4, #48	@ 0x30
 8005f48:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	2c63      	cmp	r4, #99	@ 0x63
 8005f50:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f54:	4631      	mov	r1, r6
 8005f56:	dcf1      	bgt.n	8005f3c <__exponent+0x1c>
 8005f58:	3130      	adds	r1, #48	@ 0x30
 8005f5a:	1e94      	subs	r4, r2, #2
 8005f5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f60:	1c41      	adds	r1, r0, #1
 8005f62:	4623      	mov	r3, r4
 8005f64:	42ab      	cmp	r3, r5
 8005f66:	d30a      	bcc.n	8005f7e <__exponent+0x5e>
 8005f68:	f10d 0309 	add.w	r3, sp, #9
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	42ac      	cmp	r4, r5
 8005f70:	bf88      	it	hi
 8005f72:	2300      	movhi	r3, #0
 8005f74:	3302      	adds	r3, #2
 8005f76:	4403      	add	r3, r0
 8005f78:	1a18      	subs	r0, r3, r0
 8005f7a:	b003      	add	sp, #12
 8005f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f82:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f86:	e7ed      	b.n	8005f64 <__exponent+0x44>
 8005f88:	2330      	movs	r3, #48	@ 0x30
 8005f8a:	3130      	adds	r1, #48	@ 0x30
 8005f8c:	7083      	strb	r3, [r0, #2]
 8005f8e:	70c1      	strb	r1, [r0, #3]
 8005f90:	1d03      	adds	r3, r0, #4
 8005f92:	e7f1      	b.n	8005f78 <__exponent+0x58>

08005f94 <_printf_float>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	b08d      	sub	sp, #52	@ 0x34
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005fa0:	4616      	mov	r6, r2
 8005fa2:	461f      	mov	r7, r3
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	f000 ffeb 	bl	8006f80 <_localeconv_r>
 8005faa:	6803      	ldr	r3, [r0, #0]
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fa f9ae 	bl	8000310 <strlen>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fbc:	9005      	str	r0, [sp, #20]
 8005fbe:	3307      	adds	r3, #7
 8005fc0:	f023 0307 	bic.w	r3, r3, #7
 8005fc4:	f103 0208 	add.w	r2, r3, #8
 8005fc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005fcc:	f8d4 b000 	ldr.w	fp, [r4]
 8005fd0:	f8c8 2000 	str.w	r2, [r8]
 8005fd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fdc:	9307      	str	r3, [sp, #28]
 8005fde:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fe2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fea:	4b9c      	ldr	r3, [pc, #624]	@ (800625c <_printf_float+0x2c8>)
 8005fec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff0:	f7fa fdec 	bl	8000bcc <__aeabi_dcmpun>
 8005ff4:	bb70      	cbnz	r0, 8006054 <_printf_float+0xc0>
 8005ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ffa:	4b98      	ldr	r3, [pc, #608]	@ (800625c <_printf_float+0x2c8>)
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	f7fa fdc6 	bl	8000b90 <__aeabi_dcmple>
 8006004:	bb30      	cbnz	r0, 8006054 <_printf_float+0xc0>
 8006006:	2200      	movs	r2, #0
 8006008:	2300      	movs	r3, #0
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa fdb5 	bl	8000b7c <__aeabi_dcmplt>
 8006012:	b110      	cbz	r0, 800601a <_printf_float+0x86>
 8006014:	232d      	movs	r3, #45	@ 0x2d
 8006016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800601a:	4a91      	ldr	r2, [pc, #580]	@ (8006260 <_printf_float+0x2cc>)
 800601c:	4b91      	ldr	r3, [pc, #580]	@ (8006264 <_printf_float+0x2d0>)
 800601e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006022:	bf8c      	ite	hi
 8006024:	4690      	movhi	r8, r2
 8006026:	4698      	movls	r8, r3
 8006028:	2303      	movs	r3, #3
 800602a:	6123      	str	r3, [r4, #16]
 800602c:	f02b 0304 	bic.w	r3, fp, #4
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	f04f 0900 	mov.w	r9, #0
 8006036:	9700      	str	r7, [sp, #0]
 8006038:	4633      	mov	r3, r6
 800603a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800603c:	4621      	mov	r1, r4
 800603e:	4628      	mov	r0, r5
 8006040:	f000 f9d2 	bl	80063e8 <_printf_common>
 8006044:	3001      	adds	r0, #1
 8006046:	f040 808d 	bne.w	8006164 <_printf_float+0x1d0>
 800604a:	f04f 30ff 	mov.w	r0, #4294967295
 800604e:	b00d      	add	sp, #52	@ 0x34
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006054:	4642      	mov	r2, r8
 8006056:	464b      	mov	r3, r9
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa fdb6 	bl	8000bcc <__aeabi_dcmpun>
 8006060:	b140      	cbz	r0, 8006074 <_printf_float+0xe0>
 8006062:	464b      	mov	r3, r9
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfbc      	itt	lt
 8006068:	232d      	movlt	r3, #45	@ 0x2d
 800606a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800606e:	4a7e      	ldr	r2, [pc, #504]	@ (8006268 <_printf_float+0x2d4>)
 8006070:	4b7e      	ldr	r3, [pc, #504]	@ (800626c <_printf_float+0x2d8>)
 8006072:	e7d4      	b.n	800601e <_printf_float+0x8a>
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800607a:	9206      	str	r2, [sp, #24]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	d13b      	bne.n	80060f8 <_printf_float+0x164>
 8006080:	2306      	movs	r3, #6
 8006082:	6063      	str	r3, [r4, #4]
 8006084:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006088:	2300      	movs	r3, #0
 800608a:	6022      	str	r2, [r4, #0]
 800608c:	9303      	str	r3, [sp, #12]
 800608e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006090:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006094:	ab09      	add	r3, sp, #36	@ 0x24
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	6861      	ldr	r1, [r4, #4]
 800609a:	ec49 8b10 	vmov	d0, r8, r9
 800609e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80060a2:	4628      	mov	r0, r5
 80060a4:	f7ff fed7 	bl	8005e56 <__cvt>
 80060a8:	9b06      	ldr	r3, [sp, #24]
 80060aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060ac:	2b47      	cmp	r3, #71	@ 0x47
 80060ae:	4680      	mov	r8, r0
 80060b0:	d129      	bne.n	8006106 <_printf_float+0x172>
 80060b2:	1cc8      	adds	r0, r1, #3
 80060b4:	db02      	blt.n	80060bc <_printf_float+0x128>
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	4299      	cmp	r1, r3
 80060ba:	dd41      	ble.n	8006140 <_printf_float+0x1ac>
 80060bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80060c0:	fa5f fa8a 	uxtb.w	sl, sl
 80060c4:	3901      	subs	r1, #1
 80060c6:	4652      	mov	r2, sl
 80060c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80060cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80060ce:	f7ff ff27 	bl	8005f20 <__exponent>
 80060d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060d4:	1813      	adds	r3, r2, r0
 80060d6:	2a01      	cmp	r2, #1
 80060d8:	4681      	mov	r9, r0
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	dc02      	bgt.n	80060e4 <_printf_float+0x150>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	07d2      	lsls	r2, r2, #31
 80060e2:	d501      	bpl.n	80060e8 <_printf_float+0x154>
 80060e4:	3301      	adds	r3, #1
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0a2      	beq.n	8006036 <_printf_float+0xa2>
 80060f0:	232d      	movs	r3, #45	@ 0x2d
 80060f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060f6:	e79e      	b.n	8006036 <_printf_float+0xa2>
 80060f8:	9a06      	ldr	r2, [sp, #24]
 80060fa:	2a47      	cmp	r2, #71	@ 0x47
 80060fc:	d1c2      	bne.n	8006084 <_printf_float+0xf0>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1c0      	bne.n	8006084 <_printf_float+0xf0>
 8006102:	2301      	movs	r3, #1
 8006104:	e7bd      	b.n	8006082 <_printf_float+0xee>
 8006106:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800610a:	d9db      	bls.n	80060c4 <_printf_float+0x130>
 800610c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006110:	d118      	bne.n	8006144 <_printf_float+0x1b0>
 8006112:	2900      	cmp	r1, #0
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	dd0b      	ble.n	8006130 <_printf_float+0x19c>
 8006118:	6121      	str	r1, [r4, #16]
 800611a:	b913      	cbnz	r3, 8006122 <_printf_float+0x18e>
 800611c:	6822      	ldr	r2, [r4, #0]
 800611e:	07d0      	lsls	r0, r2, #31
 8006120:	d502      	bpl.n	8006128 <_printf_float+0x194>
 8006122:	3301      	adds	r3, #1
 8006124:	440b      	add	r3, r1
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	65a1      	str	r1, [r4, #88]	@ 0x58
 800612a:	f04f 0900 	mov.w	r9, #0
 800612e:	e7db      	b.n	80060e8 <_printf_float+0x154>
 8006130:	b913      	cbnz	r3, 8006138 <_printf_float+0x1a4>
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	07d2      	lsls	r2, r2, #31
 8006136:	d501      	bpl.n	800613c <_printf_float+0x1a8>
 8006138:	3302      	adds	r3, #2
 800613a:	e7f4      	b.n	8006126 <_printf_float+0x192>
 800613c:	2301      	movs	r3, #1
 800613e:	e7f2      	b.n	8006126 <_printf_float+0x192>
 8006140:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006146:	4299      	cmp	r1, r3
 8006148:	db05      	blt.n	8006156 <_printf_float+0x1c2>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	6121      	str	r1, [r4, #16]
 800614e:	07d8      	lsls	r0, r3, #31
 8006150:	d5ea      	bpl.n	8006128 <_printf_float+0x194>
 8006152:	1c4b      	adds	r3, r1, #1
 8006154:	e7e7      	b.n	8006126 <_printf_float+0x192>
 8006156:	2900      	cmp	r1, #0
 8006158:	bfd4      	ite	le
 800615a:	f1c1 0202 	rsble	r2, r1, #2
 800615e:	2201      	movgt	r2, #1
 8006160:	4413      	add	r3, r2
 8006162:	e7e0      	b.n	8006126 <_printf_float+0x192>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	055a      	lsls	r2, r3, #21
 8006168:	d407      	bmi.n	800617a <_printf_float+0x1e6>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	4642      	mov	r2, r8
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	d12b      	bne.n	80061d0 <_printf_float+0x23c>
 8006178:	e767      	b.n	800604a <_printf_float+0xb6>
 800617a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800617e:	f240 80dd 	bls.w	800633c <_printf_float+0x3a8>
 8006182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006186:	2200      	movs	r2, #0
 8006188:	2300      	movs	r3, #0
 800618a:	f7fa fced 	bl	8000b68 <__aeabi_dcmpeq>
 800618e:	2800      	cmp	r0, #0
 8006190:	d033      	beq.n	80061fa <_printf_float+0x266>
 8006192:	4a37      	ldr	r2, [pc, #220]	@ (8006270 <_printf_float+0x2dc>)
 8006194:	2301      	movs	r3, #1
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	f43f af54 	beq.w	800604a <_printf_float+0xb6>
 80061a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80061a6:	4543      	cmp	r3, r8
 80061a8:	db02      	blt.n	80061b0 <_printf_float+0x21c>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	07d8      	lsls	r0, r3, #31
 80061ae:	d50f      	bpl.n	80061d0 <_printf_float+0x23c>
 80061b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	f43f af45 	beq.w	800604a <_printf_float+0xb6>
 80061c0:	f04f 0900 	mov.w	r9, #0
 80061c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80061c8:	f104 0a1a 	add.w	sl, r4, #26
 80061cc:	45c8      	cmp	r8, r9
 80061ce:	dc09      	bgt.n	80061e4 <_printf_float+0x250>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	079b      	lsls	r3, r3, #30
 80061d4:	f100 8103 	bmi.w	80063de <_printf_float+0x44a>
 80061d8:	68e0      	ldr	r0, [r4, #12]
 80061da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061dc:	4298      	cmp	r0, r3
 80061de:	bfb8      	it	lt
 80061e0:	4618      	movlt	r0, r3
 80061e2:	e734      	b.n	800604e <_printf_float+0xba>
 80061e4:	2301      	movs	r3, #1
 80061e6:	4652      	mov	r2, sl
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f af2b 	beq.w	800604a <_printf_float+0xb6>
 80061f4:	f109 0901 	add.w	r9, r9, #1
 80061f8:	e7e8      	b.n	80061cc <_printf_float+0x238>
 80061fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dc39      	bgt.n	8006274 <_printf_float+0x2e0>
 8006200:	4a1b      	ldr	r2, [pc, #108]	@ (8006270 <_printf_float+0x2dc>)
 8006202:	2301      	movs	r3, #1
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	47b8      	blx	r7
 800620a:	3001      	adds	r0, #1
 800620c:	f43f af1d 	beq.w	800604a <_printf_float+0xb6>
 8006210:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006214:	ea59 0303 	orrs.w	r3, r9, r3
 8006218:	d102      	bne.n	8006220 <_printf_float+0x28c>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	07d9      	lsls	r1, r3, #31
 800621e:	d5d7      	bpl.n	80061d0 <_printf_float+0x23c>
 8006220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006224:	4631      	mov	r1, r6
 8006226:	4628      	mov	r0, r5
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f af0d 	beq.w	800604a <_printf_float+0xb6>
 8006230:	f04f 0a00 	mov.w	sl, #0
 8006234:	f104 0b1a 	add.w	fp, r4, #26
 8006238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800623a:	425b      	negs	r3, r3
 800623c:	4553      	cmp	r3, sl
 800623e:	dc01      	bgt.n	8006244 <_printf_float+0x2b0>
 8006240:	464b      	mov	r3, r9
 8006242:	e793      	b.n	800616c <_printf_float+0x1d8>
 8006244:	2301      	movs	r3, #1
 8006246:	465a      	mov	r2, fp
 8006248:	4631      	mov	r1, r6
 800624a:	4628      	mov	r0, r5
 800624c:	47b8      	blx	r7
 800624e:	3001      	adds	r0, #1
 8006250:	f43f aefb 	beq.w	800604a <_printf_float+0xb6>
 8006254:	f10a 0a01 	add.w	sl, sl, #1
 8006258:	e7ee      	b.n	8006238 <_printf_float+0x2a4>
 800625a:	bf00      	nop
 800625c:	7fefffff 	.word	0x7fefffff
 8006260:	0800a778 	.word	0x0800a778
 8006264:	0800a774 	.word	0x0800a774
 8006268:	0800a780 	.word	0x0800a780
 800626c:	0800a77c 	.word	0x0800a77c
 8006270:	0800a784 	.word	0x0800a784
 8006274:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006276:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800627a:	4553      	cmp	r3, sl
 800627c:	bfa8      	it	ge
 800627e:	4653      	movge	r3, sl
 8006280:	2b00      	cmp	r3, #0
 8006282:	4699      	mov	r9, r3
 8006284:	dc36      	bgt.n	80062f4 <_printf_float+0x360>
 8006286:	f04f 0b00 	mov.w	fp, #0
 800628a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800628e:	f104 021a 	add.w	r2, r4, #26
 8006292:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006294:	9306      	str	r3, [sp, #24]
 8006296:	eba3 0309 	sub.w	r3, r3, r9
 800629a:	455b      	cmp	r3, fp
 800629c:	dc31      	bgt.n	8006302 <_printf_float+0x36e>
 800629e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a0:	459a      	cmp	sl, r3
 80062a2:	dc3a      	bgt.n	800631a <_printf_float+0x386>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07da      	lsls	r2, r3, #31
 80062a8:	d437      	bmi.n	800631a <_printf_float+0x386>
 80062aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ac:	ebaa 0903 	sub.w	r9, sl, r3
 80062b0:	9b06      	ldr	r3, [sp, #24]
 80062b2:	ebaa 0303 	sub.w	r3, sl, r3
 80062b6:	4599      	cmp	r9, r3
 80062b8:	bfa8      	it	ge
 80062ba:	4699      	movge	r9, r3
 80062bc:	f1b9 0f00 	cmp.w	r9, #0
 80062c0:	dc33      	bgt.n	800632a <_printf_float+0x396>
 80062c2:	f04f 0800 	mov.w	r8, #0
 80062c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ca:	f104 0b1a 	add.w	fp, r4, #26
 80062ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d0:	ebaa 0303 	sub.w	r3, sl, r3
 80062d4:	eba3 0309 	sub.w	r3, r3, r9
 80062d8:	4543      	cmp	r3, r8
 80062da:	f77f af79 	ble.w	80061d0 <_printf_float+0x23c>
 80062de:	2301      	movs	r3, #1
 80062e0:	465a      	mov	r2, fp
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f aeae 	beq.w	800604a <_printf_float+0xb6>
 80062ee:	f108 0801 	add.w	r8, r8, #1
 80062f2:	e7ec      	b.n	80062ce <_printf_float+0x33a>
 80062f4:	4642      	mov	r2, r8
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	d1c2      	bne.n	8006286 <_printf_float+0x2f2>
 8006300:	e6a3      	b.n	800604a <_printf_float+0xb6>
 8006302:	2301      	movs	r3, #1
 8006304:	4631      	mov	r1, r6
 8006306:	4628      	mov	r0, r5
 8006308:	9206      	str	r2, [sp, #24]
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	f43f ae9c 	beq.w	800604a <_printf_float+0xb6>
 8006312:	9a06      	ldr	r2, [sp, #24]
 8006314:	f10b 0b01 	add.w	fp, fp, #1
 8006318:	e7bb      	b.n	8006292 <_printf_float+0x2fe>
 800631a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	d1c0      	bne.n	80062aa <_printf_float+0x316>
 8006328:	e68f      	b.n	800604a <_printf_float+0xb6>
 800632a:	9a06      	ldr	r2, [sp, #24]
 800632c:	464b      	mov	r3, r9
 800632e:	4442      	add	r2, r8
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	d1c3      	bne.n	80062c2 <_printf_float+0x32e>
 800633a:	e686      	b.n	800604a <_printf_float+0xb6>
 800633c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006340:	f1ba 0f01 	cmp.w	sl, #1
 8006344:	dc01      	bgt.n	800634a <_printf_float+0x3b6>
 8006346:	07db      	lsls	r3, r3, #31
 8006348:	d536      	bpl.n	80063b8 <_printf_float+0x424>
 800634a:	2301      	movs	r3, #1
 800634c:	4642      	mov	r2, r8
 800634e:	4631      	mov	r1, r6
 8006350:	4628      	mov	r0, r5
 8006352:	47b8      	blx	r7
 8006354:	3001      	adds	r0, #1
 8006356:	f43f ae78 	beq.w	800604a <_printf_float+0xb6>
 800635a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800635e:	4631      	mov	r1, r6
 8006360:	4628      	mov	r0, r5
 8006362:	47b8      	blx	r7
 8006364:	3001      	adds	r0, #1
 8006366:	f43f ae70 	beq.w	800604a <_printf_float+0xb6>
 800636a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800636e:	2200      	movs	r2, #0
 8006370:	2300      	movs	r3, #0
 8006372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006376:	f7fa fbf7 	bl	8000b68 <__aeabi_dcmpeq>
 800637a:	b9c0      	cbnz	r0, 80063ae <_printf_float+0x41a>
 800637c:	4653      	mov	r3, sl
 800637e:	f108 0201 	add.w	r2, r8, #1
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	d10c      	bne.n	80063a6 <_printf_float+0x412>
 800638c:	e65d      	b.n	800604a <_printf_float+0xb6>
 800638e:	2301      	movs	r3, #1
 8006390:	465a      	mov	r2, fp
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	f43f ae56 	beq.w	800604a <_printf_float+0xb6>
 800639e:	f108 0801 	add.w	r8, r8, #1
 80063a2:	45d0      	cmp	r8, sl
 80063a4:	dbf3      	blt.n	800638e <_printf_float+0x3fa>
 80063a6:	464b      	mov	r3, r9
 80063a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80063ac:	e6df      	b.n	800616e <_printf_float+0x1da>
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	f104 0b1a 	add.w	fp, r4, #26
 80063b6:	e7f4      	b.n	80063a2 <_printf_float+0x40e>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4642      	mov	r2, r8
 80063bc:	e7e1      	b.n	8006382 <_printf_float+0x3ee>
 80063be:	2301      	movs	r3, #1
 80063c0:	464a      	mov	r2, r9
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	f43f ae3e 	beq.w	800604a <_printf_float+0xb6>
 80063ce:	f108 0801 	add.w	r8, r8, #1
 80063d2:	68e3      	ldr	r3, [r4, #12]
 80063d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063d6:	1a5b      	subs	r3, r3, r1
 80063d8:	4543      	cmp	r3, r8
 80063da:	dcf0      	bgt.n	80063be <_printf_float+0x42a>
 80063dc:	e6fc      	b.n	80061d8 <_printf_float+0x244>
 80063de:	f04f 0800 	mov.w	r8, #0
 80063e2:	f104 0919 	add.w	r9, r4, #25
 80063e6:	e7f4      	b.n	80063d2 <_printf_float+0x43e>

080063e8 <_printf_common>:
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	4616      	mov	r6, r2
 80063ee:	4698      	mov	r8, r3
 80063f0:	688a      	ldr	r2, [r1, #8]
 80063f2:	690b      	ldr	r3, [r1, #16]
 80063f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bfb8      	it	lt
 80063fc:	4613      	movlt	r3, r2
 80063fe:	6033      	str	r3, [r6, #0]
 8006400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006404:	4607      	mov	r7, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b10a      	cbz	r2, 800640e <_printf_common+0x26>
 800640a:	3301      	adds	r3, #1
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	0699      	lsls	r1, r3, #26
 8006412:	bf42      	ittt	mi
 8006414:	6833      	ldrmi	r3, [r6, #0]
 8006416:	3302      	addmi	r3, #2
 8006418:	6033      	strmi	r3, [r6, #0]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	f015 0506 	ands.w	r5, r5, #6
 8006420:	d106      	bne.n	8006430 <_printf_common+0x48>
 8006422:	f104 0a19 	add.w	sl, r4, #25
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	6832      	ldr	r2, [r6, #0]
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	42ab      	cmp	r3, r5
 800642e:	dc26      	bgt.n	800647e <_printf_common+0x96>
 8006430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006434:	6822      	ldr	r2, [r4, #0]
 8006436:	3b00      	subs	r3, #0
 8006438:	bf18      	it	ne
 800643a:	2301      	movne	r3, #1
 800643c:	0692      	lsls	r2, r2, #26
 800643e:	d42b      	bmi.n	8006498 <_printf_common+0xb0>
 8006440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006444:	4641      	mov	r1, r8
 8006446:	4638      	mov	r0, r7
 8006448:	47c8      	blx	r9
 800644a:	3001      	adds	r0, #1
 800644c:	d01e      	beq.n	800648c <_printf_common+0xa4>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	6922      	ldr	r2, [r4, #16]
 8006452:	f003 0306 	and.w	r3, r3, #6
 8006456:	2b04      	cmp	r3, #4
 8006458:	bf02      	ittt	eq
 800645a:	68e5      	ldreq	r5, [r4, #12]
 800645c:	6833      	ldreq	r3, [r6, #0]
 800645e:	1aed      	subeq	r5, r5, r3
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	bf0c      	ite	eq
 8006464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006468:	2500      	movne	r5, #0
 800646a:	4293      	cmp	r3, r2
 800646c:	bfc4      	itt	gt
 800646e:	1a9b      	subgt	r3, r3, r2
 8006470:	18ed      	addgt	r5, r5, r3
 8006472:	2600      	movs	r6, #0
 8006474:	341a      	adds	r4, #26
 8006476:	42b5      	cmp	r5, r6
 8006478:	d11a      	bne.n	80064b0 <_printf_common+0xc8>
 800647a:	2000      	movs	r0, #0
 800647c:	e008      	b.n	8006490 <_printf_common+0xa8>
 800647e:	2301      	movs	r3, #1
 8006480:	4652      	mov	r2, sl
 8006482:	4641      	mov	r1, r8
 8006484:	4638      	mov	r0, r7
 8006486:	47c8      	blx	r9
 8006488:	3001      	adds	r0, #1
 800648a:	d103      	bne.n	8006494 <_printf_common+0xac>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	3501      	adds	r5, #1
 8006496:	e7c6      	b.n	8006426 <_printf_common+0x3e>
 8006498:	18e1      	adds	r1, r4, r3
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	2030      	movs	r0, #48	@ 0x30
 800649e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064a2:	4422      	add	r2, r4
 80064a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064ac:	3302      	adds	r3, #2
 80064ae:	e7c7      	b.n	8006440 <_printf_common+0x58>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4622      	mov	r2, r4
 80064b4:	4641      	mov	r1, r8
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c8      	blx	r9
 80064ba:	3001      	adds	r0, #1
 80064bc:	d0e6      	beq.n	800648c <_printf_common+0xa4>
 80064be:	3601      	adds	r6, #1
 80064c0:	e7d9      	b.n	8006476 <_printf_common+0x8e>
	...

080064c4 <_printf_i>:
 80064c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	7e0f      	ldrb	r7, [r1, #24]
 80064ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064cc:	2f78      	cmp	r7, #120	@ 0x78
 80064ce:	4691      	mov	r9, r2
 80064d0:	4680      	mov	r8, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	469a      	mov	sl, r3
 80064d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064da:	d807      	bhi.n	80064ec <_printf_i+0x28>
 80064dc:	2f62      	cmp	r7, #98	@ 0x62
 80064de:	d80a      	bhi.n	80064f6 <_printf_i+0x32>
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	f000 80d1 	beq.w	8006688 <_printf_i+0x1c4>
 80064e6:	2f58      	cmp	r7, #88	@ 0x58
 80064e8:	f000 80b8 	beq.w	800665c <_printf_i+0x198>
 80064ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064f4:	e03a      	b.n	800656c <_printf_i+0xa8>
 80064f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064fa:	2b15      	cmp	r3, #21
 80064fc:	d8f6      	bhi.n	80064ec <_printf_i+0x28>
 80064fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006504 <_printf_i+0x40>)
 8006500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006504:	0800655d 	.word	0x0800655d
 8006508:	08006571 	.word	0x08006571
 800650c:	080064ed 	.word	0x080064ed
 8006510:	080064ed 	.word	0x080064ed
 8006514:	080064ed 	.word	0x080064ed
 8006518:	080064ed 	.word	0x080064ed
 800651c:	08006571 	.word	0x08006571
 8006520:	080064ed 	.word	0x080064ed
 8006524:	080064ed 	.word	0x080064ed
 8006528:	080064ed 	.word	0x080064ed
 800652c:	080064ed 	.word	0x080064ed
 8006530:	0800666f 	.word	0x0800666f
 8006534:	0800659b 	.word	0x0800659b
 8006538:	08006629 	.word	0x08006629
 800653c:	080064ed 	.word	0x080064ed
 8006540:	080064ed 	.word	0x080064ed
 8006544:	08006691 	.word	0x08006691
 8006548:	080064ed 	.word	0x080064ed
 800654c:	0800659b 	.word	0x0800659b
 8006550:	080064ed 	.word	0x080064ed
 8006554:	080064ed 	.word	0x080064ed
 8006558:	08006631 	.word	0x08006631
 800655c:	6833      	ldr	r3, [r6, #0]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6032      	str	r2, [r6, #0]
 8006564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e09c      	b.n	80066aa <_printf_i+0x1e6>
 8006570:	6833      	ldr	r3, [r6, #0]
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	1d19      	adds	r1, r3, #4
 8006576:	6031      	str	r1, [r6, #0]
 8006578:	0606      	lsls	r6, r0, #24
 800657a:	d501      	bpl.n	8006580 <_printf_i+0xbc>
 800657c:	681d      	ldr	r5, [r3, #0]
 800657e:	e003      	b.n	8006588 <_printf_i+0xc4>
 8006580:	0645      	lsls	r5, r0, #25
 8006582:	d5fb      	bpl.n	800657c <_printf_i+0xb8>
 8006584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006588:	2d00      	cmp	r5, #0
 800658a:	da03      	bge.n	8006594 <_printf_i+0xd0>
 800658c:	232d      	movs	r3, #45	@ 0x2d
 800658e:	426d      	negs	r5, r5
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006594:	4858      	ldr	r0, [pc, #352]	@ (80066f8 <_printf_i+0x234>)
 8006596:	230a      	movs	r3, #10
 8006598:	e011      	b.n	80065be <_printf_i+0xfa>
 800659a:	6821      	ldr	r1, [r4, #0]
 800659c:	6833      	ldr	r3, [r6, #0]
 800659e:	0608      	lsls	r0, r1, #24
 80065a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80065a4:	d402      	bmi.n	80065ac <_printf_i+0xe8>
 80065a6:	0649      	lsls	r1, r1, #25
 80065a8:	bf48      	it	mi
 80065aa:	b2ad      	uxthmi	r5, r5
 80065ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80065ae:	4852      	ldr	r0, [pc, #328]	@ (80066f8 <_printf_i+0x234>)
 80065b0:	6033      	str	r3, [r6, #0]
 80065b2:	bf14      	ite	ne
 80065b4:	230a      	movne	r3, #10
 80065b6:	2308      	moveq	r3, #8
 80065b8:	2100      	movs	r1, #0
 80065ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065be:	6866      	ldr	r6, [r4, #4]
 80065c0:	60a6      	str	r6, [r4, #8]
 80065c2:	2e00      	cmp	r6, #0
 80065c4:	db05      	blt.n	80065d2 <_printf_i+0x10e>
 80065c6:	6821      	ldr	r1, [r4, #0]
 80065c8:	432e      	orrs	r6, r5
 80065ca:	f021 0104 	bic.w	r1, r1, #4
 80065ce:	6021      	str	r1, [r4, #0]
 80065d0:	d04b      	beq.n	800666a <_printf_i+0x1a6>
 80065d2:	4616      	mov	r6, r2
 80065d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80065d8:	fb03 5711 	mls	r7, r3, r1, r5
 80065dc:	5dc7      	ldrb	r7, [r0, r7]
 80065de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065e2:	462f      	mov	r7, r5
 80065e4:	42bb      	cmp	r3, r7
 80065e6:	460d      	mov	r5, r1
 80065e8:	d9f4      	bls.n	80065d4 <_printf_i+0x110>
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d10b      	bne.n	8006606 <_printf_i+0x142>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	07df      	lsls	r7, r3, #31
 80065f2:	d508      	bpl.n	8006606 <_printf_i+0x142>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	6861      	ldr	r1, [r4, #4]
 80065f8:	4299      	cmp	r1, r3
 80065fa:	bfde      	ittt	le
 80065fc:	2330      	movle	r3, #48	@ 0x30
 80065fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006602:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006606:	1b92      	subs	r2, r2, r6
 8006608:	6122      	str	r2, [r4, #16]
 800660a:	f8cd a000 	str.w	sl, [sp]
 800660e:	464b      	mov	r3, r9
 8006610:	aa03      	add	r2, sp, #12
 8006612:	4621      	mov	r1, r4
 8006614:	4640      	mov	r0, r8
 8006616:	f7ff fee7 	bl	80063e8 <_printf_common>
 800661a:	3001      	adds	r0, #1
 800661c:	d14a      	bne.n	80066b4 <_printf_i+0x1f0>
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	b004      	add	sp, #16
 8006624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	f043 0320 	orr.w	r3, r3, #32
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	4832      	ldr	r0, [pc, #200]	@ (80066fc <_printf_i+0x238>)
 8006632:	2778      	movs	r7, #120	@ 0x78
 8006634:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	6831      	ldr	r1, [r6, #0]
 800663c:	061f      	lsls	r7, r3, #24
 800663e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006642:	d402      	bmi.n	800664a <_printf_i+0x186>
 8006644:	065f      	lsls	r7, r3, #25
 8006646:	bf48      	it	mi
 8006648:	b2ad      	uxthmi	r5, r5
 800664a:	6031      	str	r1, [r6, #0]
 800664c:	07d9      	lsls	r1, r3, #31
 800664e:	bf44      	itt	mi
 8006650:	f043 0320 	orrmi.w	r3, r3, #32
 8006654:	6023      	strmi	r3, [r4, #0]
 8006656:	b11d      	cbz	r5, 8006660 <_printf_i+0x19c>
 8006658:	2310      	movs	r3, #16
 800665a:	e7ad      	b.n	80065b8 <_printf_i+0xf4>
 800665c:	4826      	ldr	r0, [pc, #152]	@ (80066f8 <_printf_i+0x234>)
 800665e:	e7e9      	b.n	8006634 <_printf_i+0x170>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	f023 0320 	bic.w	r3, r3, #32
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	e7f6      	b.n	8006658 <_printf_i+0x194>
 800666a:	4616      	mov	r6, r2
 800666c:	e7bd      	b.n	80065ea <_printf_i+0x126>
 800666e:	6833      	ldr	r3, [r6, #0]
 8006670:	6825      	ldr	r5, [r4, #0]
 8006672:	6961      	ldr	r1, [r4, #20]
 8006674:	1d18      	adds	r0, r3, #4
 8006676:	6030      	str	r0, [r6, #0]
 8006678:	062e      	lsls	r6, r5, #24
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	d501      	bpl.n	8006682 <_printf_i+0x1be>
 800667e:	6019      	str	r1, [r3, #0]
 8006680:	e002      	b.n	8006688 <_printf_i+0x1c4>
 8006682:	0668      	lsls	r0, r5, #25
 8006684:	d5fb      	bpl.n	800667e <_printf_i+0x1ba>
 8006686:	8019      	strh	r1, [r3, #0]
 8006688:	2300      	movs	r3, #0
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	4616      	mov	r6, r2
 800668e:	e7bc      	b.n	800660a <_printf_i+0x146>
 8006690:	6833      	ldr	r3, [r6, #0]
 8006692:	1d1a      	adds	r2, r3, #4
 8006694:	6032      	str	r2, [r6, #0]
 8006696:	681e      	ldr	r6, [r3, #0]
 8006698:	6862      	ldr	r2, [r4, #4]
 800669a:	2100      	movs	r1, #0
 800669c:	4630      	mov	r0, r6
 800669e:	f7f9 fde7 	bl	8000270 <memchr>
 80066a2:	b108      	cbz	r0, 80066a8 <_printf_i+0x1e4>
 80066a4:	1b80      	subs	r0, r0, r6
 80066a6:	6060      	str	r0, [r4, #4]
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	2300      	movs	r3, #0
 80066ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066b2:	e7aa      	b.n	800660a <_printf_i+0x146>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	4632      	mov	r2, r6
 80066b8:	4649      	mov	r1, r9
 80066ba:	4640      	mov	r0, r8
 80066bc:	47d0      	blx	sl
 80066be:	3001      	adds	r0, #1
 80066c0:	d0ad      	beq.n	800661e <_printf_i+0x15a>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	079b      	lsls	r3, r3, #30
 80066c6:	d413      	bmi.n	80066f0 <_printf_i+0x22c>
 80066c8:	68e0      	ldr	r0, [r4, #12]
 80066ca:	9b03      	ldr	r3, [sp, #12]
 80066cc:	4298      	cmp	r0, r3
 80066ce:	bfb8      	it	lt
 80066d0:	4618      	movlt	r0, r3
 80066d2:	e7a6      	b.n	8006622 <_printf_i+0x15e>
 80066d4:	2301      	movs	r3, #1
 80066d6:	4632      	mov	r2, r6
 80066d8:	4649      	mov	r1, r9
 80066da:	4640      	mov	r0, r8
 80066dc:	47d0      	blx	sl
 80066de:	3001      	adds	r0, #1
 80066e0:	d09d      	beq.n	800661e <_printf_i+0x15a>
 80066e2:	3501      	adds	r5, #1
 80066e4:	68e3      	ldr	r3, [r4, #12]
 80066e6:	9903      	ldr	r1, [sp, #12]
 80066e8:	1a5b      	subs	r3, r3, r1
 80066ea:	42ab      	cmp	r3, r5
 80066ec:	dcf2      	bgt.n	80066d4 <_printf_i+0x210>
 80066ee:	e7eb      	b.n	80066c8 <_printf_i+0x204>
 80066f0:	2500      	movs	r5, #0
 80066f2:	f104 0619 	add.w	r6, r4, #25
 80066f6:	e7f5      	b.n	80066e4 <_printf_i+0x220>
 80066f8:	0800a786 	.word	0x0800a786
 80066fc:	0800a797 	.word	0x0800a797

08006700 <_scanf_float>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	b087      	sub	sp, #28
 8006706:	4691      	mov	r9, r2
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	688b      	ldr	r3, [r1, #8]
 800670c:	1e5a      	subs	r2, r3, #1
 800670e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006712:	bf81      	itttt	hi
 8006714:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006718:	eb03 0b05 	addhi.w	fp, r3, r5
 800671c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006720:	608b      	strhi	r3, [r1, #8]
 8006722:	680b      	ldr	r3, [r1, #0]
 8006724:	460a      	mov	r2, r1
 8006726:	f04f 0500 	mov.w	r5, #0
 800672a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800672e:	f842 3b1c 	str.w	r3, [r2], #28
 8006732:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006736:	4680      	mov	r8, r0
 8006738:	460c      	mov	r4, r1
 800673a:	bf98      	it	ls
 800673c:	f04f 0b00 	movls.w	fp, #0
 8006740:	9201      	str	r2, [sp, #4]
 8006742:	4616      	mov	r6, r2
 8006744:	46aa      	mov	sl, r5
 8006746:	462f      	mov	r7, r5
 8006748:	9502      	str	r5, [sp, #8]
 800674a:	68a2      	ldr	r2, [r4, #8]
 800674c:	b15a      	cbz	r2, 8006766 <_scanf_float+0x66>
 800674e:	f8d9 3000 	ldr.w	r3, [r9]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b4e      	cmp	r3, #78	@ 0x4e
 8006756:	d863      	bhi.n	8006820 <_scanf_float+0x120>
 8006758:	2b40      	cmp	r3, #64	@ 0x40
 800675a:	d83b      	bhi.n	80067d4 <_scanf_float+0xd4>
 800675c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006760:	b2c8      	uxtb	r0, r1
 8006762:	280e      	cmp	r0, #14
 8006764:	d939      	bls.n	80067da <_scanf_float+0xda>
 8006766:	b11f      	cbz	r7, 8006770 <_scanf_float+0x70>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800676e:	6023      	str	r3, [r4, #0]
 8006770:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006774:	f1ba 0f01 	cmp.w	sl, #1
 8006778:	f200 8114 	bhi.w	80069a4 <_scanf_float+0x2a4>
 800677c:	9b01      	ldr	r3, [sp, #4]
 800677e:	429e      	cmp	r6, r3
 8006780:	f200 8105 	bhi.w	800698e <_scanf_float+0x28e>
 8006784:	2001      	movs	r0, #1
 8006786:	b007      	add	sp, #28
 8006788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006790:	2a0d      	cmp	r2, #13
 8006792:	d8e8      	bhi.n	8006766 <_scanf_float+0x66>
 8006794:	a101      	add	r1, pc, #4	@ (adr r1, 800679c <_scanf_float+0x9c>)
 8006796:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800679a:	bf00      	nop
 800679c:	080068e5 	.word	0x080068e5
 80067a0:	08006767 	.word	0x08006767
 80067a4:	08006767 	.word	0x08006767
 80067a8:	08006767 	.word	0x08006767
 80067ac:	08006941 	.word	0x08006941
 80067b0:	0800691b 	.word	0x0800691b
 80067b4:	08006767 	.word	0x08006767
 80067b8:	08006767 	.word	0x08006767
 80067bc:	080068f3 	.word	0x080068f3
 80067c0:	08006767 	.word	0x08006767
 80067c4:	08006767 	.word	0x08006767
 80067c8:	08006767 	.word	0x08006767
 80067cc:	08006767 	.word	0x08006767
 80067d0:	080068af 	.word	0x080068af
 80067d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80067d8:	e7da      	b.n	8006790 <_scanf_float+0x90>
 80067da:	290e      	cmp	r1, #14
 80067dc:	d8c3      	bhi.n	8006766 <_scanf_float+0x66>
 80067de:	a001      	add	r0, pc, #4	@ (adr r0, 80067e4 <_scanf_float+0xe4>)
 80067e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067e4:	0800689f 	.word	0x0800689f
 80067e8:	08006767 	.word	0x08006767
 80067ec:	0800689f 	.word	0x0800689f
 80067f0:	0800692f 	.word	0x0800692f
 80067f4:	08006767 	.word	0x08006767
 80067f8:	08006841 	.word	0x08006841
 80067fc:	08006885 	.word	0x08006885
 8006800:	08006885 	.word	0x08006885
 8006804:	08006885 	.word	0x08006885
 8006808:	08006885 	.word	0x08006885
 800680c:	08006885 	.word	0x08006885
 8006810:	08006885 	.word	0x08006885
 8006814:	08006885 	.word	0x08006885
 8006818:	08006885 	.word	0x08006885
 800681c:	08006885 	.word	0x08006885
 8006820:	2b6e      	cmp	r3, #110	@ 0x6e
 8006822:	d809      	bhi.n	8006838 <_scanf_float+0x138>
 8006824:	2b60      	cmp	r3, #96	@ 0x60
 8006826:	d8b1      	bhi.n	800678c <_scanf_float+0x8c>
 8006828:	2b54      	cmp	r3, #84	@ 0x54
 800682a:	d07b      	beq.n	8006924 <_scanf_float+0x224>
 800682c:	2b59      	cmp	r3, #89	@ 0x59
 800682e:	d19a      	bne.n	8006766 <_scanf_float+0x66>
 8006830:	2d07      	cmp	r5, #7
 8006832:	d198      	bne.n	8006766 <_scanf_float+0x66>
 8006834:	2508      	movs	r5, #8
 8006836:	e02f      	b.n	8006898 <_scanf_float+0x198>
 8006838:	2b74      	cmp	r3, #116	@ 0x74
 800683a:	d073      	beq.n	8006924 <_scanf_float+0x224>
 800683c:	2b79      	cmp	r3, #121	@ 0x79
 800683e:	e7f6      	b.n	800682e <_scanf_float+0x12e>
 8006840:	6821      	ldr	r1, [r4, #0]
 8006842:	05c8      	lsls	r0, r1, #23
 8006844:	d51e      	bpl.n	8006884 <_scanf_float+0x184>
 8006846:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800684a:	6021      	str	r1, [r4, #0]
 800684c:	3701      	adds	r7, #1
 800684e:	f1bb 0f00 	cmp.w	fp, #0
 8006852:	d003      	beq.n	800685c <_scanf_float+0x15c>
 8006854:	3201      	adds	r2, #1
 8006856:	f10b 3bff 	add.w	fp, fp, #4294967295
 800685a:	60a2      	str	r2, [r4, #8]
 800685c:	68a3      	ldr	r3, [r4, #8]
 800685e:	3b01      	subs	r3, #1
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	3301      	adds	r3, #1
 8006866:	6123      	str	r3, [r4, #16]
 8006868:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800686c:	3b01      	subs	r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	f8c9 3004 	str.w	r3, [r9, #4]
 8006874:	f340 8082 	ble.w	800697c <_scanf_float+0x27c>
 8006878:	f8d9 3000 	ldr.w	r3, [r9]
 800687c:	3301      	adds	r3, #1
 800687e:	f8c9 3000 	str.w	r3, [r9]
 8006882:	e762      	b.n	800674a <_scanf_float+0x4a>
 8006884:	eb1a 0105 	adds.w	r1, sl, r5
 8006888:	f47f af6d 	bne.w	8006766 <_scanf_float+0x66>
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006892:	6022      	str	r2, [r4, #0]
 8006894:	460d      	mov	r5, r1
 8006896:	468a      	mov	sl, r1
 8006898:	f806 3b01 	strb.w	r3, [r6], #1
 800689c:	e7de      	b.n	800685c <_scanf_float+0x15c>
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	0610      	lsls	r0, r2, #24
 80068a2:	f57f af60 	bpl.w	8006766 <_scanf_float+0x66>
 80068a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068aa:	6022      	str	r2, [r4, #0]
 80068ac:	e7f4      	b.n	8006898 <_scanf_float+0x198>
 80068ae:	f1ba 0f00 	cmp.w	sl, #0
 80068b2:	d10c      	bne.n	80068ce <_scanf_float+0x1ce>
 80068b4:	b977      	cbnz	r7, 80068d4 <_scanf_float+0x1d4>
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80068bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80068c0:	d108      	bne.n	80068d4 <_scanf_float+0x1d4>
 80068c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80068c6:	6022      	str	r2, [r4, #0]
 80068c8:	f04f 0a01 	mov.w	sl, #1
 80068cc:	e7e4      	b.n	8006898 <_scanf_float+0x198>
 80068ce:	f1ba 0f02 	cmp.w	sl, #2
 80068d2:	d050      	beq.n	8006976 <_scanf_float+0x276>
 80068d4:	2d01      	cmp	r5, #1
 80068d6:	d002      	beq.n	80068de <_scanf_float+0x1de>
 80068d8:	2d04      	cmp	r5, #4
 80068da:	f47f af44 	bne.w	8006766 <_scanf_float+0x66>
 80068de:	3501      	adds	r5, #1
 80068e0:	b2ed      	uxtb	r5, r5
 80068e2:	e7d9      	b.n	8006898 <_scanf_float+0x198>
 80068e4:	f1ba 0f01 	cmp.w	sl, #1
 80068e8:	f47f af3d 	bne.w	8006766 <_scanf_float+0x66>
 80068ec:	f04f 0a02 	mov.w	sl, #2
 80068f0:	e7d2      	b.n	8006898 <_scanf_float+0x198>
 80068f2:	b975      	cbnz	r5, 8006912 <_scanf_float+0x212>
 80068f4:	2f00      	cmp	r7, #0
 80068f6:	f47f af37 	bne.w	8006768 <_scanf_float+0x68>
 80068fa:	6822      	ldr	r2, [r4, #0]
 80068fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006900:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006904:	f040 8103 	bne.w	8006b0e <_scanf_float+0x40e>
 8006908:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800690c:	6022      	str	r2, [r4, #0]
 800690e:	2501      	movs	r5, #1
 8006910:	e7c2      	b.n	8006898 <_scanf_float+0x198>
 8006912:	2d03      	cmp	r5, #3
 8006914:	d0e3      	beq.n	80068de <_scanf_float+0x1de>
 8006916:	2d05      	cmp	r5, #5
 8006918:	e7df      	b.n	80068da <_scanf_float+0x1da>
 800691a:	2d02      	cmp	r5, #2
 800691c:	f47f af23 	bne.w	8006766 <_scanf_float+0x66>
 8006920:	2503      	movs	r5, #3
 8006922:	e7b9      	b.n	8006898 <_scanf_float+0x198>
 8006924:	2d06      	cmp	r5, #6
 8006926:	f47f af1e 	bne.w	8006766 <_scanf_float+0x66>
 800692a:	2507      	movs	r5, #7
 800692c:	e7b4      	b.n	8006898 <_scanf_float+0x198>
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	0591      	lsls	r1, r2, #22
 8006932:	f57f af18 	bpl.w	8006766 <_scanf_float+0x66>
 8006936:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800693a:	6022      	str	r2, [r4, #0]
 800693c:	9702      	str	r7, [sp, #8]
 800693e:	e7ab      	b.n	8006898 <_scanf_float+0x198>
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006946:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800694a:	d005      	beq.n	8006958 <_scanf_float+0x258>
 800694c:	0550      	lsls	r0, r2, #21
 800694e:	f57f af0a 	bpl.w	8006766 <_scanf_float+0x66>
 8006952:	2f00      	cmp	r7, #0
 8006954:	f000 80db 	beq.w	8006b0e <_scanf_float+0x40e>
 8006958:	0591      	lsls	r1, r2, #22
 800695a:	bf58      	it	pl
 800695c:	9902      	ldrpl	r1, [sp, #8]
 800695e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006962:	bf58      	it	pl
 8006964:	1a79      	subpl	r1, r7, r1
 8006966:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800696a:	bf58      	it	pl
 800696c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	2700      	movs	r7, #0
 8006974:	e790      	b.n	8006898 <_scanf_float+0x198>
 8006976:	f04f 0a03 	mov.w	sl, #3
 800697a:	e78d      	b.n	8006898 <_scanf_float+0x198>
 800697c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006980:	4649      	mov	r1, r9
 8006982:	4640      	mov	r0, r8
 8006984:	4798      	blx	r3
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f aedf 	beq.w	800674a <_scanf_float+0x4a>
 800698c:	e6eb      	b.n	8006766 <_scanf_float+0x66>
 800698e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006992:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006996:	464a      	mov	r2, r9
 8006998:	4640      	mov	r0, r8
 800699a:	4798      	blx	r3
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	3b01      	subs	r3, #1
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	e6eb      	b.n	800677c <_scanf_float+0x7c>
 80069a4:	1e6b      	subs	r3, r5, #1
 80069a6:	2b06      	cmp	r3, #6
 80069a8:	d824      	bhi.n	80069f4 <_scanf_float+0x2f4>
 80069aa:	2d02      	cmp	r5, #2
 80069ac:	d836      	bhi.n	8006a1c <_scanf_float+0x31c>
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	429e      	cmp	r6, r3
 80069b2:	f67f aee7 	bls.w	8006784 <_scanf_float+0x84>
 80069b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069be:	464a      	mov	r2, r9
 80069c0:	4640      	mov	r0, r8
 80069c2:	4798      	blx	r3
 80069c4:	6923      	ldr	r3, [r4, #16]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	6123      	str	r3, [r4, #16]
 80069ca:	e7f0      	b.n	80069ae <_scanf_float+0x2ae>
 80069cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80069d4:	464a      	mov	r2, r9
 80069d6:	4640      	mov	r0, r8
 80069d8:	4798      	blx	r3
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	3b01      	subs	r3, #1
 80069de:	6123      	str	r3, [r4, #16]
 80069e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069e4:	fa5f fa8a 	uxtb.w	sl, sl
 80069e8:	f1ba 0f02 	cmp.w	sl, #2
 80069ec:	d1ee      	bne.n	80069cc <_scanf_float+0x2cc>
 80069ee:	3d03      	subs	r5, #3
 80069f0:	b2ed      	uxtb	r5, r5
 80069f2:	1b76      	subs	r6, r6, r5
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	05da      	lsls	r2, r3, #23
 80069f8:	d530      	bpl.n	8006a5c <_scanf_float+0x35c>
 80069fa:	055b      	lsls	r3, r3, #21
 80069fc:	d511      	bpl.n	8006a22 <_scanf_float+0x322>
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	429e      	cmp	r6, r3
 8006a02:	f67f aebf 	bls.w	8006784 <_scanf_float+0x84>
 8006a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a0e:	464a      	mov	r2, r9
 8006a10:	4640      	mov	r0, r8
 8006a12:	4798      	blx	r3
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	6123      	str	r3, [r4, #16]
 8006a1a:	e7f0      	b.n	80069fe <_scanf_float+0x2fe>
 8006a1c:	46aa      	mov	sl, r5
 8006a1e:	46b3      	mov	fp, r6
 8006a20:	e7de      	b.n	80069e0 <_scanf_float+0x2e0>
 8006a22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	2965      	cmp	r1, #101	@ 0x65
 8006a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a32:	6123      	str	r3, [r4, #16]
 8006a34:	d00c      	beq.n	8006a50 <_scanf_float+0x350>
 8006a36:	2945      	cmp	r1, #69	@ 0x45
 8006a38:	d00a      	beq.n	8006a50 <_scanf_float+0x350>
 8006a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a3e:	464a      	mov	r2, r9
 8006a40:	4640      	mov	r0, r8
 8006a42:	4798      	blx	r3
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	1eb5      	subs	r5, r6, #2
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a54:	464a      	mov	r2, r9
 8006a56:	4640      	mov	r0, r8
 8006a58:	4798      	blx	r3
 8006a5a:	462e      	mov	r6, r5
 8006a5c:	6822      	ldr	r2, [r4, #0]
 8006a5e:	f012 0210 	ands.w	r2, r2, #16
 8006a62:	d001      	beq.n	8006a68 <_scanf_float+0x368>
 8006a64:	2000      	movs	r0, #0
 8006a66:	e68e      	b.n	8006786 <_scanf_float+0x86>
 8006a68:	7032      	strb	r2, [r6, #0]
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a74:	d125      	bne.n	8006ac2 <_scanf_float+0x3c2>
 8006a76:	9b02      	ldr	r3, [sp, #8]
 8006a78:	429f      	cmp	r7, r3
 8006a7a:	d00a      	beq.n	8006a92 <_scanf_float+0x392>
 8006a7c:	1bda      	subs	r2, r3, r7
 8006a7e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006a82:	429e      	cmp	r6, r3
 8006a84:	bf28      	it	cs
 8006a86:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006a8a:	4922      	ldr	r1, [pc, #136]	@ (8006b14 <_scanf_float+0x414>)
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f965 	bl	8006d5c <siprintf>
 8006a92:	9901      	ldr	r1, [sp, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	4640      	mov	r0, r8
 8006a98:	f002 fcf2 	bl	8009480 <_strtod_r>
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	6821      	ldr	r1, [r4, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f011 0f02 	tst.w	r1, #2
 8006aa6:	ec57 6b10 	vmov	r6, r7, d0
 8006aaa:	f103 0204 	add.w	r2, r3, #4
 8006aae:	d015      	beq.n	8006adc <_scanf_float+0x3dc>
 8006ab0:	9903      	ldr	r1, [sp, #12]
 8006ab2:	600a      	str	r2, [r1, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	e9c3 6700 	strd	r6, r7, [r3]
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60e3      	str	r3, [r4, #12]
 8006ac0:	e7d0      	b.n	8006a64 <_scanf_float+0x364>
 8006ac2:	9b04      	ldr	r3, [sp, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0e4      	beq.n	8006a92 <_scanf_float+0x392>
 8006ac8:	9905      	ldr	r1, [sp, #20]
 8006aca:	230a      	movs	r3, #10
 8006acc:	3101      	adds	r1, #1
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f002 fd56 	bl	8009580 <_strtol_r>
 8006ad4:	9b04      	ldr	r3, [sp, #16]
 8006ad6:	9e05      	ldr	r6, [sp, #20]
 8006ad8:	1ac2      	subs	r2, r0, r3
 8006ada:	e7d0      	b.n	8006a7e <_scanf_float+0x37e>
 8006adc:	f011 0f04 	tst.w	r1, #4
 8006ae0:	9903      	ldr	r1, [sp, #12]
 8006ae2:	600a      	str	r2, [r1, #0]
 8006ae4:	d1e6      	bne.n	8006ab4 <_scanf_float+0x3b4>
 8006ae6:	681d      	ldr	r5, [r3, #0]
 8006ae8:	4632      	mov	r2, r6
 8006aea:	463b      	mov	r3, r7
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7fa f86c 	bl	8000bcc <__aeabi_dcmpun>
 8006af4:	b128      	cbz	r0, 8006b02 <_scanf_float+0x402>
 8006af6:	4808      	ldr	r0, [pc, #32]	@ (8006b18 <_scanf_float+0x418>)
 8006af8:	f000 fab6 	bl	8007068 <nanf>
 8006afc:	ed85 0a00 	vstr	s0, [r5]
 8006b00:	e7db      	b.n	8006aba <_scanf_float+0x3ba>
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7fa f8bf 	bl	8000c88 <__aeabi_d2f>
 8006b0a:	6028      	str	r0, [r5, #0]
 8006b0c:	e7d5      	b.n	8006aba <_scanf_float+0x3ba>
 8006b0e:	2700      	movs	r7, #0
 8006b10:	e62e      	b.n	8006770 <_scanf_float+0x70>
 8006b12:	bf00      	nop
 8006b14:	0800a7a8 	.word	0x0800a7a8
 8006b18:	0800a8e9 	.word	0x0800a8e9

08006b1c <std>:
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	4604      	mov	r4, r0
 8006b22:	e9c0 3300 	strd	r3, r3, [r0]
 8006b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b2a:	6083      	str	r3, [r0, #8]
 8006b2c:	8181      	strh	r1, [r0, #12]
 8006b2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b30:	81c2      	strh	r2, [r0, #14]
 8006b32:	6183      	str	r3, [r0, #24]
 8006b34:	4619      	mov	r1, r3
 8006b36:	2208      	movs	r2, #8
 8006b38:	305c      	adds	r0, #92	@ 0x5c
 8006b3a:	f000 fa19 	bl	8006f70 <memset>
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <std+0x58>)
 8006b40:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <std+0x5c>)
 8006b44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <std+0x60>)
 8006b48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b80 <std+0x64>)
 8006b4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <std+0x68>)
 8006b50:	6224      	str	r4, [r4, #32]
 8006b52:	429c      	cmp	r4, r3
 8006b54:	d006      	beq.n	8006b64 <std+0x48>
 8006b56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b5a:	4294      	cmp	r4, r2
 8006b5c:	d002      	beq.n	8006b64 <std+0x48>
 8006b5e:	33d0      	adds	r3, #208	@ 0xd0
 8006b60:	429c      	cmp	r4, r3
 8006b62:	d105      	bne.n	8006b70 <std+0x54>
 8006b64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6c:	f000 ba6a 	b.w	8007044 <__retarget_lock_init_recursive>
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	08006da1 	.word	0x08006da1
 8006b78:	08006dc3 	.word	0x08006dc3
 8006b7c:	08006dfb 	.word	0x08006dfb
 8006b80:	08006e1f 	.word	0x08006e1f
 8006b84:	20002828 	.word	0x20002828

08006b88 <stdio_exit_handler>:
 8006b88:	4a02      	ldr	r2, [pc, #8]	@ (8006b94 <stdio_exit_handler+0xc>)
 8006b8a:	4903      	ldr	r1, [pc, #12]	@ (8006b98 <stdio_exit_handler+0x10>)
 8006b8c:	4803      	ldr	r0, [pc, #12]	@ (8006b9c <stdio_exit_handler+0x14>)
 8006b8e:	f000 b869 	b.w	8006c64 <_fwalk_sglue>
 8006b92:	bf00      	nop
 8006b94:	20000010 	.word	0x20000010
 8006b98:	0800993d 	.word	0x0800993d
 8006b9c:	20000020 	.word	0x20000020

08006ba0 <cleanup_stdio>:
 8006ba0:	6841      	ldr	r1, [r0, #4]
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <cleanup_stdio+0x34>)
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	4604      	mov	r4, r0
 8006baa:	d001      	beq.n	8006bb0 <cleanup_stdio+0x10>
 8006bac:	f002 fec6 	bl	800993c <_fflush_r>
 8006bb0:	68a1      	ldr	r1, [r4, #8]
 8006bb2:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <cleanup_stdio+0x38>)
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d002      	beq.n	8006bbe <cleanup_stdio+0x1e>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f002 febf 	bl	800993c <_fflush_r>
 8006bbe:	68e1      	ldr	r1, [r4, #12]
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <cleanup_stdio+0x3c>)
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	d004      	beq.n	8006bd0 <cleanup_stdio+0x30>
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bcc:	f002 beb6 	b.w	800993c <_fflush_r>
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20002828 	.word	0x20002828
 8006bd8:	20002890 	.word	0x20002890
 8006bdc:	200028f8 	.word	0x200028f8

08006be0 <global_stdio_init.part.0>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c10 <global_stdio_init.part.0+0x30>)
 8006be4:	4c0b      	ldr	r4, [pc, #44]	@ (8006c14 <global_stdio_init.part.0+0x34>)
 8006be6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <global_stdio_init.part.0+0x38>)
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	4620      	mov	r0, r4
 8006bec:	2200      	movs	r2, #0
 8006bee:	2104      	movs	r1, #4
 8006bf0:	f7ff ff94 	bl	8006b1c <std>
 8006bf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	2109      	movs	r1, #9
 8006bfc:	f7ff ff8e 	bl	8006b1c <std>
 8006c00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c04:	2202      	movs	r2, #2
 8006c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0a:	2112      	movs	r1, #18
 8006c0c:	f7ff bf86 	b.w	8006b1c <std>
 8006c10:	20002960 	.word	0x20002960
 8006c14:	20002828 	.word	0x20002828
 8006c18:	08006b89 	.word	0x08006b89

08006c1c <__sfp_lock_acquire>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__sfp_lock_acquire+0x8>)
 8006c1e:	f000 ba12 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	20002969 	.word	0x20002969

08006c28 <__sfp_lock_release>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__sfp_lock_release+0x8>)
 8006c2a:	f000 ba0d 	b.w	8007048 <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20002969 	.word	0x20002969

08006c34 <__sinit>:
 8006c34:	b510      	push	{r4, lr}
 8006c36:	4604      	mov	r4, r0
 8006c38:	f7ff fff0 	bl	8006c1c <__sfp_lock_acquire>
 8006c3c:	6a23      	ldr	r3, [r4, #32]
 8006c3e:	b11b      	cbz	r3, 8006c48 <__sinit+0x14>
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c44:	f7ff bff0 	b.w	8006c28 <__sfp_lock_release>
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <__sinit+0x28>)
 8006c4a:	6223      	str	r3, [r4, #32]
 8006c4c:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <__sinit+0x2c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f5      	bne.n	8006c40 <__sinit+0xc>
 8006c54:	f7ff ffc4 	bl	8006be0 <global_stdio_init.part.0>
 8006c58:	e7f2      	b.n	8006c40 <__sinit+0xc>
 8006c5a:	bf00      	nop
 8006c5c:	08006ba1 	.word	0x08006ba1
 8006c60:	20002960 	.word	0x20002960

08006c64 <_fwalk_sglue>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4607      	mov	r7, r0
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	2600      	movs	r6, #0
 8006c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c74:	f1b9 0901 	subs.w	r9, r9, #1
 8006c78:	d505      	bpl.n	8006c86 <_fwalk_sglue+0x22>
 8006c7a:	6824      	ldr	r4, [r4, #0]
 8006c7c:	2c00      	cmp	r4, #0
 8006c7e:	d1f7      	bne.n	8006c70 <_fwalk_sglue+0xc>
 8006c80:	4630      	mov	r0, r6
 8006c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d907      	bls.n	8006c9c <_fwalk_sglue+0x38>
 8006c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c90:	3301      	adds	r3, #1
 8006c92:	d003      	beq.n	8006c9c <_fwalk_sglue+0x38>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4638      	mov	r0, r7
 8006c98:	47c0      	blx	r8
 8006c9a:	4306      	orrs	r6, r0
 8006c9c:	3568      	adds	r5, #104	@ 0x68
 8006c9e:	e7e9      	b.n	8006c74 <_fwalk_sglue+0x10>

08006ca0 <_puts_r>:
 8006ca0:	6a03      	ldr	r3, [r0, #32]
 8006ca2:	b570      	push	{r4, r5, r6, lr}
 8006ca4:	6884      	ldr	r4, [r0, #8]
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	460e      	mov	r6, r1
 8006caa:	b90b      	cbnz	r3, 8006cb0 <_puts_r+0x10>
 8006cac:	f7ff ffc2 	bl	8006c34 <__sinit>
 8006cb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cb2:	07db      	lsls	r3, r3, #31
 8006cb4:	d405      	bmi.n	8006cc2 <_puts_r+0x22>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	0598      	lsls	r0, r3, #22
 8006cba:	d402      	bmi.n	8006cc2 <_puts_r+0x22>
 8006cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cbe:	f000 f9c2 	bl	8007046 <__retarget_lock_acquire_recursive>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	0719      	lsls	r1, r3, #28
 8006cc6:	d502      	bpl.n	8006cce <_puts_r+0x2e>
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d135      	bne.n	8006d3a <_puts_r+0x9a>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f000 f8e7 	bl	8006ea4 <__swsetup_r>
 8006cd6:	b380      	cbz	r0, 8006d3a <_puts_r+0x9a>
 8006cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006cdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cde:	07da      	lsls	r2, r3, #31
 8006ce0:	d405      	bmi.n	8006cee <_puts_r+0x4e>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	059b      	lsls	r3, r3, #22
 8006ce6:	d402      	bmi.n	8006cee <_puts_r+0x4e>
 8006ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cea:	f000 f9ad 	bl	8007048 <__retarget_lock_release_recursive>
 8006cee:	4628      	mov	r0, r5
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da04      	bge.n	8006d00 <_puts_r+0x60>
 8006cf6:	69a2      	ldr	r2, [r4, #24]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	dc17      	bgt.n	8006d2c <_puts_r+0x8c>
 8006cfc:	290a      	cmp	r1, #10
 8006cfe:	d015      	beq.n	8006d2c <_puts_r+0x8c>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	6022      	str	r2, [r4, #0]
 8006d06:	7019      	strb	r1, [r3, #0]
 8006d08:	68a3      	ldr	r3, [r4, #8]
 8006d0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	60a3      	str	r3, [r4, #8]
 8006d12:	2900      	cmp	r1, #0
 8006d14:	d1ed      	bne.n	8006cf2 <_puts_r+0x52>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da11      	bge.n	8006d3e <_puts_r+0x9e>
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	210a      	movs	r1, #10
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 f881 	bl	8006e26 <__swbuf_r>
 8006d24:	3001      	adds	r0, #1
 8006d26:	d0d7      	beq.n	8006cd8 <_puts_r+0x38>
 8006d28:	250a      	movs	r5, #10
 8006d2a:	e7d7      	b.n	8006cdc <_puts_r+0x3c>
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f879 	bl	8006e26 <__swbuf_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1e7      	bne.n	8006d08 <_puts_r+0x68>
 8006d38:	e7ce      	b.n	8006cd8 <_puts_r+0x38>
 8006d3a:	3e01      	subs	r6, #1
 8006d3c:	e7e4      	b.n	8006d08 <_puts_r+0x68>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	6022      	str	r2, [r4, #0]
 8006d44:	220a      	movs	r2, #10
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	e7ee      	b.n	8006d28 <_puts_r+0x88>
	...

08006d4c <puts>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	@ (8006d58 <puts+0xc>)
 8006d4e:	4601      	mov	r1, r0
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	f7ff bfa5 	b.w	8006ca0 <_puts_r>
 8006d56:	bf00      	nop
 8006d58:	2000001c 	.word	0x2000001c

08006d5c <siprintf>:
 8006d5c:	b40e      	push	{r1, r2, r3}
 8006d5e:	b510      	push	{r4, lr}
 8006d60:	b09d      	sub	sp, #116	@ 0x74
 8006d62:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d64:	9002      	str	r0, [sp, #8]
 8006d66:	9006      	str	r0, [sp, #24]
 8006d68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d6c:	480a      	ldr	r0, [pc, #40]	@ (8006d98 <siprintf+0x3c>)
 8006d6e:	9107      	str	r1, [sp, #28]
 8006d70:	9104      	str	r1, [sp, #16]
 8006d72:	490a      	ldr	r1, [pc, #40]	@ (8006d9c <siprintf+0x40>)
 8006d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d78:	9105      	str	r1, [sp, #20]
 8006d7a:	2400      	movs	r4, #0
 8006d7c:	a902      	add	r1, sp, #8
 8006d7e:	6800      	ldr	r0, [r0, #0]
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d84:	f002 fc5a 	bl	800963c <_svfiprintf_r>
 8006d88:	9b02      	ldr	r3, [sp, #8]
 8006d8a:	701c      	strb	r4, [r3, #0]
 8006d8c:	b01d      	add	sp, #116	@ 0x74
 8006d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d92:	b003      	add	sp, #12
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	2000001c 	.word	0x2000001c
 8006d9c:	ffff0208 	.word	0xffff0208

08006da0 <__sread>:
 8006da0:	b510      	push	{r4, lr}
 8006da2:	460c      	mov	r4, r1
 8006da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da8:	f000 f910 	bl	8006fcc <_read_r>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	bfab      	itete	ge
 8006db0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006db2:	89a3      	ldrhlt	r3, [r4, #12]
 8006db4:	181b      	addge	r3, r3, r0
 8006db6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dba:	bfac      	ite	ge
 8006dbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dbe:	81a3      	strhlt	r3, [r4, #12]
 8006dc0:	bd10      	pop	{r4, pc}

08006dc2 <__swrite>:
 8006dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc6:	461f      	mov	r7, r3
 8006dc8:	898b      	ldrh	r3, [r1, #12]
 8006dca:	05db      	lsls	r3, r3, #23
 8006dcc:	4605      	mov	r5, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	4616      	mov	r6, r2
 8006dd2:	d505      	bpl.n	8006de0 <__swrite+0x1e>
 8006dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd8:	2302      	movs	r3, #2
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f000 f8e4 	bl	8006fa8 <_lseek_r>
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	4632      	mov	r2, r6
 8006dee:	463b      	mov	r3, r7
 8006df0:	4628      	mov	r0, r5
 8006df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	f7fd bd67 	b.w	80048c8 <_write_r>

08006dfa <__sseek>:
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e02:	f000 f8d1 	bl	8006fa8 <_lseek_r>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	bf15      	itete	ne
 8006e0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e16:	81a3      	strheq	r3, [r4, #12]
 8006e18:	bf18      	it	ne
 8006e1a:	81a3      	strhne	r3, [r4, #12]
 8006e1c:	bd10      	pop	{r4, pc}

08006e1e <__sclose>:
 8006e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e22:	f000 b8b1 	b.w	8006f88 <_close_r>

08006e26 <__swbuf_r>:
 8006e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e28:	460e      	mov	r6, r1
 8006e2a:	4614      	mov	r4, r2
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	b118      	cbz	r0, 8006e38 <__swbuf_r+0x12>
 8006e30:	6a03      	ldr	r3, [r0, #32]
 8006e32:	b90b      	cbnz	r3, 8006e38 <__swbuf_r+0x12>
 8006e34:	f7ff fefe 	bl	8006c34 <__sinit>
 8006e38:	69a3      	ldr	r3, [r4, #24]
 8006e3a:	60a3      	str	r3, [r4, #8]
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	071a      	lsls	r2, r3, #28
 8006e40:	d501      	bpl.n	8006e46 <__swbuf_r+0x20>
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	b943      	cbnz	r3, 8006e58 <__swbuf_r+0x32>
 8006e46:	4621      	mov	r1, r4
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f000 f82b 	bl	8006ea4 <__swsetup_r>
 8006e4e:	b118      	cbz	r0, 8006e58 <__swbuf_r+0x32>
 8006e50:	f04f 37ff 	mov.w	r7, #4294967295
 8006e54:	4638      	mov	r0, r7
 8006e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	6922      	ldr	r2, [r4, #16]
 8006e5c:	1a98      	subs	r0, r3, r2
 8006e5e:	6963      	ldr	r3, [r4, #20]
 8006e60:	b2f6      	uxtb	r6, r6
 8006e62:	4283      	cmp	r3, r0
 8006e64:	4637      	mov	r7, r6
 8006e66:	dc05      	bgt.n	8006e74 <__swbuf_r+0x4e>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f002 fd66 	bl	800993c <_fflush_r>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d1ed      	bne.n	8006e50 <__swbuf_r+0x2a>
 8006e74:	68a3      	ldr	r3, [r4, #8]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	60a3      	str	r3, [r4, #8]
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	701e      	strb	r6, [r3, #0]
 8006e82:	6962      	ldr	r2, [r4, #20]
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d004      	beq.n	8006e94 <__swbuf_r+0x6e>
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	07db      	lsls	r3, r3, #31
 8006e8e:	d5e1      	bpl.n	8006e54 <__swbuf_r+0x2e>
 8006e90:	2e0a      	cmp	r6, #10
 8006e92:	d1df      	bne.n	8006e54 <__swbuf_r+0x2e>
 8006e94:	4621      	mov	r1, r4
 8006e96:	4628      	mov	r0, r5
 8006e98:	f002 fd50 	bl	800993c <_fflush_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d0d9      	beq.n	8006e54 <__swbuf_r+0x2e>
 8006ea0:	e7d6      	b.n	8006e50 <__swbuf_r+0x2a>
	...

08006ea4 <__swsetup_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4b29      	ldr	r3, [pc, #164]	@ (8006f4c <__swsetup_r+0xa8>)
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	460c      	mov	r4, r1
 8006eae:	b118      	cbz	r0, 8006eb8 <__swsetup_r+0x14>
 8006eb0:	6a03      	ldr	r3, [r0, #32]
 8006eb2:	b90b      	cbnz	r3, 8006eb8 <__swsetup_r+0x14>
 8006eb4:	f7ff febe 	bl	8006c34 <__sinit>
 8006eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebc:	0719      	lsls	r1, r3, #28
 8006ebe:	d422      	bmi.n	8006f06 <__swsetup_r+0x62>
 8006ec0:	06da      	lsls	r2, r3, #27
 8006ec2:	d407      	bmi.n	8006ed4 <__swsetup_r+0x30>
 8006ec4:	2209      	movs	r2, #9
 8006ec6:	602a      	str	r2, [r5, #0]
 8006ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ecc:	81a3      	strh	r3, [r4, #12]
 8006ece:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed2:	e033      	b.n	8006f3c <__swsetup_r+0x98>
 8006ed4:	0758      	lsls	r0, r3, #29
 8006ed6:	d512      	bpl.n	8006efe <__swsetup_r+0x5a>
 8006ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eda:	b141      	cbz	r1, 8006eee <__swsetup_r+0x4a>
 8006edc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	d002      	beq.n	8006eea <__swsetup_r+0x46>
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f000 ff1f 	bl	8007d28 <_free_r>
 8006eea:	2300      	movs	r3, #0
 8006eec:	6363      	str	r3, [r4, #52]	@ 0x34
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ef4:	81a3      	strh	r3, [r4, #12]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6063      	str	r3, [r4, #4]
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	f043 0308 	orr.w	r3, r3, #8
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	b94b      	cbnz	r3, 8006f1e <__swsetup_r+0x7a>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f14:	d003      	beq.n	8006f1e <__swsetup_r+0x7a>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f002 fd5d 	bl	80099d8 <__smakebuf_r>
 8006f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f22:	f013 0201 	ands.w	r2, r3, #1
 8006f26:	d00a      	beq.n	8006f3e <__swsetup_r+0x9a>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	60a2      	str	r2, [r4, #8]
 8006f2c:	6962      	ldr	r2, [r4, #20]
 8006f2e:	4252      	negs	r2, r2
 8006f30:	61a2      	str	r2, [r4, #24]
 8006f32:	6922      	ldr	r2, [r4, #16]
 8006f34:	b942      	cbnz	r2, 8006f48 <__swsetup_r+0xa4>
 8006f36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f3a:	d1c5      	bne.n	8006ec8 <__swsetup_r+0x24>
 8006f3c:	bd38      	pop	{r3, r4, r5, pc}
 8006f3e:	0799      	lsls	r1, r3, #30
 8006f40:	bf58      	it	pl
 8006f42:	6962      	ldrpl	r2, [r4, #20]
 8006f44:	60a2      	str	r2, [r4, #8]
 8006f46:	e7f4      	b.n	8006f32 <__swsetup_r+0x8e>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	e7f7      	b.n	8006f3c <__swsetup_r+0x98>
 8006f4c:	2000001c 	.word	0x2000001c

08006f50 <memcmp>:
 8006f50:	b510      	push	{r4, lr}
 8006f52:	3901      	subs	r1, #1
 8006f54:	4402      	add	r2, r0
 8006f56:	4290      	cmp	r0, r2
 8006f58:	d101      	bne.n	8006f5e <memcmp+0xe>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e005      	b.n	8006f6a <memcmp+0x1a>
 8006f5e:	7803      	ldrb	r3, [r0, #0]
 8006f60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d001      	beq.n	8006f6c <memcmp+0x1c>
 8006f68:	1b18      	subs	r0, r3, r4
 8006f6a:	bd10      	pop	{r4, pc}
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	e7f2      	b.n	8006f56 <memcmp+0x6>

08006f70 <memset>:
 8006f70:	4402      	add	r2, r0
 8006f72:	4603      	mov	r3, r0
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d100      	bne.n	8006f7a <memset+0xa>
 8006f78:	4770      	bx	lr
 8006f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7e:	e7f9      	b.n	8006f74 <memset+0x4>

08006f80 <_localeconv_r>:
 8006f80:	4800      	ldr	r0, [pc, #0]	@ (8006f84 <_localeconv_r+0x4>)
 8006f82:	4770      	bx	lr
 8006f84:	2000015c 	.word	0x2000015c

08006f88 <_close_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4d06      	ldr	r5, [pc, #24]	@ (8006fa4 <_close_r+0x1c>)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	602b      	str	r3, [r5, #0]
 8006f94:	f7fa f939 	bl	800120a <_close>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_close_r+0x1a>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_close_r+0x1a>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20002964 	.word	0x20002964

08006fa8 <_lseek_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	@ (8006fc8 <_lseek_r+0x20>)
 8006fac:	4604      	mov	r4, r0
 8006fae:	4608      	mov	r0, r1
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f7fa f94e 	bl	8001258 <_lseek>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_lseek_r+0x1e>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_lseek_r+0x1e>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	20002964 	.word	0x20002964

08006fcc <_read_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d07      	ldr	r5, [pc, #28]	@ (8006fec <_read_r+0x20>)
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7fa f8f8 	bl	80011d0 <_read>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_read_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_read_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20002964 	.word	0x20002964

08006ff0 <__errno>:
 8006ff0:	4b01      	ldr	r3, [pc, #4]	@ (8006ff8 <__errno+0x8>)
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	2000001c 	.word	0x2000001c

08006ffc <__libc_init_array>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8007034 <__libc_init_array+0x38>)
 8007000:	4c0d      	ldr	r4, [pc, #52]	@ (8007038 <__libc_init_array+0x3c>)
 8007002:	1b64      	subs	r4, r4, r5
 8007004:	10a4      	asrs	r4, r4, #2
 8007006:	2600      	movs	r6, #0
 8007008:	42a6      	cmp	r6, r4
 800700a:	d109      	bne.n	8007020 <__libc_init_array+0x24>
 800700c:	4d0b      	ldr	r5, [pc, #44]	@ (800703c <__libc_init_array+0x40>)
 800700e:	4c0c      	ldr	r4, [pc, #48]	@ (8007040 <__libc_init_array+0x44>)
 8007010:	f003 fae4 	bl	800a5dc <_init>
 8007014:	1b64      	subs	r4, r4, r5
 8007016:	10a4      	asrs	r4, r4, #2
 8007018:	2600      	movs	r6, #0
 800701a:	42a6      	cmp	r6, r4
 800701c:	d105      	bne.n	800702a <__libc_init_array+0x2e>
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	f855 3b04 	ldr.w	r3, [r5], #4
 8007024:	4798      	blx	r3
 8007026:	3601      	adds	r6, #1
 8007028:	e7ee      	b.n	8007008 <__libc_init_array+0xc>
 800702a:	f855 3b04 	ldr.w	r3, [r5], #4
 800702e:	4798      	blx	r3
 8007030:	3601      	adds	r6, #1
 8007032:	e7f2      	b.n	800701a <__libc_init_array+0x1e>
 8007034:	0800aba4 	.word	0x0800aba4
 8007038:	0800aba4 	.word	0x0800aba4
 800703c:	0800aba4 	.word	0x0800aba4
 8007040:	0800aba8 	.word	0x0800aba8

08007044 <__retarget_lock_init_recursive>:
 8007044:	4770      	bx	lr

08007046 <__retarget_lock_acquire_recursive>:
 8007046:	4770      	bx	lr

08007048 <__retarget_lock_release_recursive>:
 8007048:	4770      	bx	lr

0800704a <memcpy>:
 800704a:	440a      	add	r2, r1
 800704c:	4291      	cmp	r1, r2
 800704e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007052:	d100      	bne.n	8007056 <memcpy+0xc>
 8007054:	4770      	bx	lr
 8007056:	b510      	push	{r4, lr}
 8007058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800705c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007060:	4291      	cmp	r1, r2
 8007062:	d1f9      	bne.n	8007058 <memcpy+0xe>
 8007064:	bd10      	pop	{r4, pc}
	...

08007068 <nanf>:
 8007068:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007070 <nanf+0x8>
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	7fc00000 	.word	0x7fc00000

08007074 <quorem>:
 8007074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	6903      	ldr	r3, [r0, #16]
 800707a:	690c      	ldr	r4, [r1, #16]
 800707c:	42a3      	cmp	r3, r4
 800707e:	4607      	mov	r7, r0
 8007080:	db7e      	blt.n	8007180 <quorem+0x10c>
 8007082:	3c01      	subs	r4, #1
 8007084:	f101 0814 	add.w	r8, r1, #20
 8007088:	00a3      	lsls	r3, r4, #2
 800708a:	f100 0514 	add.w	r5, r0, #20
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800709a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800709e:	3301      	adds	r3, #1
 80070a0:	429a      	cmp	r2, r3
 80070a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80070aa:	d32e      	bcc.n	800710a <quorem+0x96>
 80070ac:	f04f 0a00 	mov.w	sl, #0
 80070b0:	46c4      	mov	ip, r8
 80070b2:	46ae      	mov	lr, r5
 80070b4:	46d3      	mov	fp, sl
 80070b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070ba:	b298      	uxth	r0, r3
 80070bc:	fb06 a000 	mla	r0, r6, r0, sl
 80070c0:	0c02      	lsrs	r2, r0, #16
 80070c2:	0c1b      	lsrs	r3, r3, #16
 80070c4:	fb06 2303 	mla	r3, r6, r3, r2
 80070c8:	f8de 2000 	ldr.w	r2, [lr]
 80070cc:	b280      	uxth	r0, r0
 80070ce:	b292      	uxth	r2, r2
 80070d0:	1a12      	subs	r2, r2, r0
 80070d2:	445a      	add	r2, fp
 80070d4:	f8de 0000 	ldr.w	r0, [lr]
 80070d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070dc:	b29b      	uxth	r3, r3
 80070de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070e6:	b292      	uxth	r2, r2
 80070e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070ec:	45e1      	cmp	r9, ip
 80070ee:	f84e 2b04 	str.w	r2, [lr], #4
 80070f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80070f6:	d2de      	bcs.n	80070b6 <quorem+0x42>
 80070f8:	9b00      	ldr	r3, [sp, #0]
 80070fa:	58eb      	ldr	r3, [r5, r3]
 80070fc:	b92b      	cbnz	r3, 800710a <quorem+0x96>
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	3b04      	subs	r3, #4
 8007102:	429d      	cmp	r5, r3
 8007104:	461a      	mov	r2, r3
 8007106:	d32f      	bcc.n	8007168 <quorem+0xf4>
 8007108:	613c      	str	r4, [r7, #16]
 800710a:	4638      	mov	r0, r7
 800710c:	f001 f9c8 	bl	80084a0 <__mcmp>
 8007110:	2800      	cmp	r0, #0
 8007112:	db25      	blt.n	8007160 <quorem+0xec>
 8007114:	4629      	mov	r1, r5
 8007116:	2000      	movs	r0, #0
 8007118:	f858 2b04 	ldr.w	r2, [r8], #4
 800711c:	f8d1 c000 	ldr.w	ip, [r1]
 8007120:	fa1f fe82 	uxth.w	lr, r2
 8007124:	fa1f f38c 	uxth.w	r3, ip
 8007128:	eba3 030e 	sub.w	r3, r3, lr
 800712c:	4403      	add	r3, r0
 800712e:	0c12      	lsrs	r2, r2, #16
 8007130:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007134:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800713e:	45c1      	cmp	r9, r8
 8007140:	f841 3b04 	str.w	r3, [r1], #4
 8007144:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007148:	d2e6      	bcs.n	8007118 <quorem+0xa4>
 800714a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800714e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007152:	b922      	cbnz	r2, 800715e <quorem+0xea>
 8007154:	3b04      	subs	r3, #4
 8007156:	429d      	cmp	r5, r3
 8007158:	461a      	mov	r2, r3
 800715a:	d30b      	bcc.n	8007174 <quorem+0x100>
 800715c:	613c      	str	r4, [r7, #16]
 800715e:	3601      	adds	r6, #1
 8007160:	4630      	mov	r0, r6
 8007162:	b003      	add	sp, #12
 8007164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	3b04      	subs	r3, #4
 800716c:	2a00      	cmp	r2, #0
 800716e:	d1cb      	bne.n	8007108 <quorem+0x94>
 8007170:	3c01      	subs	r4, #1
 8007172:	e7c6      	b.n	8007102 <quorem+0x8e>
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	3b04      	subs	r3, #4
 8007178:	2a00      	cmp	r2, #0
 800717a:	d1ef      	bne.n	800715c <quorem+0xe8>
 800717c:	3c01      	subs	r4, #1
 800717e:	e7ea      	b.n	8007156 <quorem+0xe2>
 8007180:	2000      	movs	r0, #0
 8007182:	e7ee      	b.n	8007162 <quorem+0xee>
 8007184:	0000      	movs	r0, r0
	...

08007188 <_dtoa_r>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	69c7      	ldr	r7, [r0, #28]
 800718e:	b097      	sub	sp, #92	@ 0x5c
 8007190:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007194:	ec55 4b10 	vmov	r4, r5, d0
 8007198:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800719a:	9107      	str	r1, [sp, #28]
 800719c:	4681      	mov	r9, r0
 800719e:	920c      	str	r2, [sp, #48]	@ 0x30
 80071a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80071a2:	b97f      	cbnz	r7, 80071c4 <_dtoa_r+0x3c>
 80071a4:	2010      	movs	r0, #16
 80071a6:	f000 fe09 	bl	8007dbc <malloc>
 80071aa:	4602      	mov	r2, r0
 80071ac:	f8c9 001c 	str.w	r0, [r9, #28]
 80071b0:	b920      	cbnz	r0, 80071bc <_dtoa_r+0x34>
 80071b2:	4ba9      	ldr	r3, [pc, #676]	@ (8007458 <_dtoa_r+0x2d0>)
 80071b4:	21ef      	movs	r1, #239	@ 0xef
 80071b6:	48a9      	ldr	r0, [pc, #676]	@ (800745c <_dtoa_r+0x2d4>)
 80071b8:	f002 fcb2 	bl	8009b20 <__assert_func>
 80071bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071c0:	6007      	str	r7, [r0, #0]
 80071c2:	60c7      	str	r7, [r0, #12]
 80071c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071c8:	6819      	ldr	r1, [r3, #0]
 80071ca:	b159      	cbz	r1, 80071e4 <_dtoa_r+0x5c>
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	604a      	str	r2, [r1, #4]
 80071d0:	2301      	movs	r3, #1
 80071d2:	4093      	lsls	r3, r2
 80071d4:	608b      	str	r3, [r1, #8]
 80071d6:	4648      	mov	r0, r9
 80071d8:	f000 fee6 	bl	8007fa8 <_Bfree>
 80071dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	1e2b      	subs	r3, r5, #0
 80071e6:	bfb9      	ittee	lt
 80071e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80071ec:	9305      	strlt	r3, [sp, #20]
 80071ee:	2300      	movge	r3, #0
 80071f0:	6033      	strge	r3, [r6, #0]
 80071f2:	9f05      	ldr	r7, [sp, #20]
 80071f4:	4b9a      	ldr	r3, [pc, #616]	@ (8007460 <_dtoa_r+0x2d8>)
 80071f6:	bfbc      	itt	lt
 80071f8:	2201      	movlt	r2, #1
 80071fa:	6032      	strlt	r2, [r6, #0]
 80071fc:	43bb      	bics	r3, r7
 80071fe:	d112      	bne.n	8007226 <_dtoa_r+0x9e>
 8007200:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007202:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800720c:	4323      	orrs	r3, r4
 800720e:	f000 855a 	beq.w	8007cc6 <_dtoa_r+0xb3e>
 8007212:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007214:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007474 <_dtoa_r+0x2ec>
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 855c 	beq.w	8007cd6 <_dtoa_r+0xb4e>
 800721e:	f10a 0303 	add.w	r3, sl, #3
 8007222:	f000 bd56 	b.w	8007cd2 <_dtoa_r+0xb4a>
 8007226:	ed9d 7b04 	vldr	d7, [sp, #16]
 800722a:	2200      	movs	r2, #0
 800722c:	ec51 0b17 	vmov	r0, r1, d7
 8007230:	2300      	movs	r3, #0
 8007232:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007236:	f7f9 fc97 	bl	8000b68 <__aeabi_dcmpeq>
 800723a:	4680      	mov	r8, r0
 800723c:	b158      	cbz	r0, 8007256 <_dtoa_r+0xce>
 800723e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007240:	2301      	movs	r3, #1
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007246:	b113      	cbz	r3, 800724e <_dtoa_r+0xc6>
 8007248:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800724a:	4b86      	ldr	r3, [pc, #536]	@ (8007464 <_dtoa_r+0x2dc>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007478 <_dtoa_r+0x2f0>
 8007252:	f000 bd40 	b.w	8007cd6 <_dtoa_r+0xb4e>
 8007256:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800725a:	aa14      	add	r2, sp, #80	@ 0x50
 800725c:	a915      	add	r1, sp, #84	@ 0x54
 800725e:	4648      	mov	r0, r9
 8007260:	f001 fa3e 	bl	80086e0 <__d2b>
 8007264:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007268:	9002      	str	r0, [sp, #8]
 800726a:	2e00      	cmp	r6, #0
 800726c:	d078      	beq.n	8007360 <_dtoa_r+0x1d8>
 800726e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007270:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800727c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007280:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007284:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007288:	4619      	mov	r1, r3
 800728a:	2200      	movs	r2, #0
 800728c:	4b76      	ldr	r3, [pc, #472]	@ (8007468 <_dtoa_r+0x2e0>)
 800728e:	f7f9 f84b 	bl	8000328 <__aeabi_dsub>
 8007292:	a36b      	add	r3, pc, #428	@ (adr r3, 8007440 <_dtoa_r+0x2b8>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f9 f9fe 	bl	8000698 <__aeabi_dmul>
 800729c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007448 <_dtoa_r+0x2c0>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f9 f843 	bl	800032c <__adddf3>
 80072a6:	4604      	mov	r4, r0
 80072a8:	4630      	mov	r0, r6
 80072aa:	460d      	mov	r5, r1
 80072ac:	f7f9 f98a 	bl	80005c4 <__aeabi_i2d>
 80072b0:	a367      	add	r3, pc, #412	@ (adr r3, 8007450 <_dtoa_r+0x2c8>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f9 f9ef 	bl	8000698 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f9 f833 	bl	800032c <__adddf3>
 80072c6:	4604      	mov	r4, r0
 80072c8:	460d      	mov	r5, r1
 80072ca:	f7f9 fc95 	bl	8000bf8 <__aeabi_d2iz>
 80072ce:	2200      	movs	r2, #0
 80072d0:	4607      	mov	r7, r0
 80072d2:	2300      	movs	r3, #0
 80072d4:	4620      	mov	r0, r4
 80072d6:	4629      	mov	r1, r5
 80072d8:	f7f9 fc50 	bl	8000b7c <__aeabi_dcmplt>
 80072dc:	b140      	cbz	r0, 80072f0 <_dtoa_r+0x168>
 80072de:	4638      	mov	r0, r7
 80072e0:	f7f9 f970 	bl	80005c4 <__aeabi_i2d>
 80072e4:	4622      	mov	r2, r4
 80072e6:	462b      	mov	r3, r5
 80072e8:	f7f9 fc3e 	bl	8000b68 <__aeabi_dcmpeq>
 80072ec:	b900      	cbnz	r0, 80072f0 <_dtoa_r+0x168>
 80072ee:	3f01      	subs	r7, #1
 80072f0:	2f16      	cmp	r7, #22
 80072f2:	d852      	bhi.n	800739a <_dtoa_r+0x212>
 80072f4:	4b5d      	ldr	r3, [pc, #372]	@ (800746c <_dtoa_r+0x2e4>)
 80072f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007302:	f7f9 fc3b 	bl	8000b7c <__aeabi_dcmplt>
 8007306:	2800      	cmp	r0, #0
 8007308:	d049      	beq.n	800739e <_dtoa_r+0x216>
 800730a:	3f01      	subs	r7, #1
 800730c:	2300      	movs	r3, #0
 800730e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007310:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007312:	1b9b      	subs	r3, r3, r6
 8007314:	1e5a      	subs	r2, r3, #1
 8007316:	bf45      	ittet	mi
 8007318:	f1c3 0301 	rsbmi	r3, r3, #1
 800731c:	9300      	strmi	r3, [sp, #0]
 800731e:	2300      	movpl	r3, #0
 8007320:	2300      	movmi	r3, #0
 8007322:	9206      	str	r2, [sp, #24]
 8007324:	bf54      	ite	pl
 8007326:	9300      	strpl	r3, [sp, #0]
 8007328:	9306      	strmi	r3, [sp, #24]
 800732a:	2f00      	cmp	r7, #0
 800732c:	db39      	blt.n	80073a2 <_dtoa_r+0x21a>
 800732e:	9b06      	ldr	r3, [sp, #24]
 8007330:	970d      	str	r7, [sp, #52]	@ 0x34
 8007332:	443b      	add	r3, r7
 8007334:	9306      	str	r3, [sp, #24]
 8007336:	2300      	movs	r3, #0
 8007338:	9308      	str	r3, [sp, #32]
 800733a:	9b07      	ldr	r3, [sp, #28]
 800733c:	2b09      	cmp	r3, #9
 800733e:	d863      	bhi.n	8007408 <_dtoa_r+0x280>
 8007340:	2b05      	cmp	r3, #5
 8007342:	bfc4      	itt	gt
 8007344:	3b04      	subgt	r3, #4
 8007346:	9307      	strgt	r3, [sp, #28]
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	f1a3 0302 	sub.w	r3, r3, #2
 800734e:	bfcc      	ite	gt
 8007350:	2400      	movgt	r4, #0
 8007352:	2401      	movle	r4, #1
 8007354:	2b03      	cmp	r3, #3
 8007356:	d863      	bhi.n	8007420 <_dtoa_r+0x298>
 8007358:	e8df f003 	tbb	[pc, r3]
 800735c:	2b375452 	.word	0x2b375452
 8007360:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007364:	441e      	add	r6, r3
 8007366:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800736a:	2b20      	cmp	r3, #32
 800736c:	bfc1      	itttt	gt
 800736e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007372:	409f      	lslgt	r7, r3
 8007374:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007378:	fa24 f303 	lsrgt.w	r3, r4, r3
 800737c:	bfd6      	itet	le
 800737e:	f1c3 0320 	rsble	r3, r3, #32
 8007382:	ea47 0003 	orrgt.w	r0, r7, r3
 8007386:	fa04 f003 	lslle.w	r0, r4, r3
 800738a:	f7f9 f90b 	bl	80005a4 <__aeabi_ui2d>
 800738e:	2201      	movs	r2, #1
 8007390:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007394:	3e01      	subs	r6, #1
 8007396:	9212      	str	r2, [sp, #72]	@ 0x48
 8007398:	e776      	b.n	8007288 <_dtoa_r+0x100>
 800739a:	2301      	movs	r3, #1
 800739c:	e7b7      	b.n	800730e <_dtoa_r+0x186>
 800739e:	9010      	str	r0, [sp, #64]	@ 0x40
 80073a0:	e7b6      	b.n	8007310 <_dtoa_r+0x188>
 80073a2:	9b00      	ldr	r3, [sp, #0]
 80073a4:	1bdb      	subs	r3, r3, r7
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	427b      	negs	r3, r7
 80073aa:	9308      	str	r3, [sp, #32]
 80073ac:	2300      	movs	r3, #0
 80073ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80073b0:	e7c3      	b.n	800733a <_dtoa_r+0x1b2>
 80073b2:	2301      	movs	r3, #1
 80073b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073b8:	eb07 0b03 	add.w	fp, r7, r3
 80073bc:	f10b 0301 	add.w	r3, fp, #1
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	9303      	str	r3, [sp, #12]
 80073c4:	bfb8      	it	lt
 80073c6:	2301      	movlt	r3, #1
 80073c8:	e006      	b.n	80073d8 <_dtoa_r+0x250>
 80073ca:	2301      	movs	r3, #1
 80073cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dd28      	ble.n	8007426 <_dtoa_r+0x29e>
 80073d4:	469b      	mov	fp, r3
 80073d6:	9303      	str	r3, [sp, #12]
 80073d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80073dc:	2100      	movs	r1, #0
 80073de:	2204      	movs	r2, #4
 80073e0:	f102 0514 	add.w	r5, r2, #20
 80073e4:	429d      	cmp	r5, r3
 80073e6:	d926      	bls.n	8007436 <_dtoa_r+0x2ae>
 80073e8:	6041      	str	r1, [r0, #4]
 80073ea:	4648      	mov	r0, r9
 80073ec:	f000 fd9c 	bl	8007f28 <_Balloc>
 80073f0:	4682      	mov	sl, r0
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d142      	bne.n	800747c <_dtoa_r+0x2f4>
 80073f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007470 <_dtoa_r+0x2e8>)
 80073f8:	4602      	mov	r2, r0
 80073fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80073fe:	e6da      	b.n	80071b6 <_dtoa_r+0x2e>
 8007400:	2300      	movs	r3, #0
 8007402:	e7e3      	b.n	80073cc <_dtoa_r+0x244>
 8007404:	2300      	movs	r3, #0
 8007406:	e7d5      	b.n	80073b4 <_dtoa_r+0x22c>
 8007408:	2401      	movs	r4, #1
 800740a:	2300      	movs	r3, #0
 800740c:	9307      	str	r3, [sp, #28]
 800740e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007410:	f04f 3bff 	mov.w	fp, #4294967295
 8007414:	2200      	movs	r2, #0
 8007416:	f8cd b00c 	str.w	fp, [sp, #12]
 800741a:	2312      	movs	r3, #18
 800741c:	920c      	str	r2, [sp, #48]	@ 0x30
 800741e:	e7db      	b.n	80073d8 <_dtoa_r+0x250>
 8007420:	2301      	movs	r3, #1
 8007422:	9309      	str	r3, [sp, #36]	@ 0x24
 8007424:	e7f4      	b.n	8007410 <_dtoa_r+0x288>
 8007426:	f04f 0b01 	mov.w	fp, #1
 800742a:	f8cd b00c 	str.w	fp, [sp, #12]
 800742e:	465b      	mov	r3, fp
 8007430:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007434:	e7d0      	b.n	80073d8 <_dtoa_r+0x250>
 8007436:	3101      	adds	r1, #1
 8007438:	0052      	lsls	r2, r2, #1
 800743a:	e7d1      	b.n	80073e0 <_dtoa_r+0x258>
 800743c:	f3af 8000 	nop.w
 8007440:	636f4361 	.word	0x636f4361
 8007444:	3fd287a7 	.word	0x3fd287a7
 8007448:	8b60c8b3 	.word	0x8b60c8b3
 800744c:	3fc68a28 	.word	0x3fc68a28
 8007450:	509f79fb 	.word	0x509f79fb
 8007454:	3fd34413 	.word	0x3fd34413
 8007458:	0800a7ba 	.word	0x0800a7ba
 800745c:	0800a7d1 	.word	0x0800a7d1
 8007460:	7ff00000 	.word	0x7ff00000
 8007464:	0800a785 	.word	0x0800a785
 8007468:	3ff80000 	.word	0x3ff80000
 800746c:	0800a980 	.word	0x0800a980
 8007470:	0800a829 	.word	0x0800a829
 8007474:	0800a7b6 	.word	0x0800a7b6
 8007478:	0800a784 	.word	0x0800a784
 800747c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007480:	6018      	str	r0, [r3, #0]
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	2b0e      	cmp	r3, #14
 8007486:	f200 80a1 	bhi.w	80075cc <_dtoa_r+0x444>
 800748a:	2c00      	cmp	r4, #0
 800748c:	f000 809e 	beq.w	80075cc <_dtoa_r+0x444>
 8007490:	2f00      	cmp	r7, #0
 8007492:	dd33      	ble.n	80074fc <_dtoa_r+0x374>
 8007494:	4b9c      	ldr	r3, [pc, #624]	@ (8007708 <_dtoa_r+0x580>)
 8007496:	f007 020f 	and.w	r2, r7, #15
 800749a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800749e:	ed93 7b00 	vldr	d7, [r3]
 80074a2:	05f8      	lsls	r0, r7, #23
 80074a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80074a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074ac:	d516      	bpl.n	80074dc <_dtoa_r+0x354>
 80074ae:	4b97      	ldr	r3, [pc, #604]	@ (800770c <_dtoa_r+0x584>)
 80074b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074b8:	f7f9 fa18 	bl	80008ec <__aeabi_ddiv>
 80074bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074c0:	f004 040f 	and.w	r4, r4, #15
 80074c4:	2603      	movs	r6, #3
 80074c6:	4d91      	ldr	r5, [pc, #580]	@ (800770c <_dtoa_r+0x584>)
 80074c8:	b954      	cbnz	r4, 80074e0 <_dtoa_r+0x358>
 80074ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074d2:	f7f9 fa0b 	bl	80008ec <__aeabi_ddiv>
 80074d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074da:	e028      	b.n	800752e <_dtoa_r+0x3a6>
 80074dc:	2602      	movs	r6, #2
 80074de:	e7f2      	b.n	80074c6 <_dtoa_r+0x33e>
 80074e0:	07e1      	lsls	r1, r4, #31
 80074e2:	d508      	bpl.n	80074f6 <_dtoa_r+0x36e>
 80074e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80074e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074ec:	f7f9 f8d4 	bl	8000698 <__aeabi_dmul>
 80074f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074f4:	3601      	adds	r6, #1
 80074f6:	1064      	asrs	r4, r4, #1
 80074f8:	3508      	adds	r5, #8
 80074fa:	e7e5      	b.n	80074c8 <_dtoa_r+0x340>
 80074fc:	f000 80af 	beq.w	800765e <_dtoa_r+0x4d6>
 8007500:	427c      	negs	r4, r7
 8007502:	4b81      	ldr	r3, [pc, #516]	@ (8007708 <_dtoa_r+0x580>)
 8007504:	4d81      	ldr	r5, [pc, #516]	@ (800770c <_dtoa_r+0x584>)
 8007506:	f004 020f 	and.w	r2, r4, #15
 800750a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007516:	f7f9 f8bf 	bl	8000698 <__aeabi_dmul>
 800751a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800751e:	1124      	asrs	r4, r4, #4
 8007520:	2300      	movs	r3, #0
 8007522:	2602      	movs	r6, #2
 8007524:	2c00      	cmp	r4, #0
 8007526:	f040 808f 	bne.w	8007648 <_dtoa_r+0x4c0>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1d3      	bne.n	80074d6 <_dtoa_r+0x34e>
 800752e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007530:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8094 	beq.w	8007662 <_dtoa_r+0x4da>
 800753a:	4b75      	ldr	r3, [pc, #468]	@ (8007710 <_dtoa_r+0x588>)
 800753c:	2200      	movs	r2, #0
 800753e:	4620      	mov	r0, r4
 8007540:	4629      	mov	r1, r5
 8007542:	f7f9 fb1b 	bl	8000b7c <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	f000 808b 	beq.w	8007662 <_dtoa_r+0x4da>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 8087 	beq.w	8007662 <_dtoa_r+0x4da>
 8007554:	f1bb 0f00 	cmp.w	fp, #0
 8007558:	dd34      	ble.n	80075c4 <_dtoa_r+0x43c>
 800755a:	4620      	mov	r0, r4
 800755c:	4b6d      	ldr	r3, [pc, #436]	@ (8007714 <_dtoa_r+0x58c>)
 800755e:	2200      	movs	r2, #0
 8007560:	4629      	mov	r1, r5
 8007562:	f7f9 f899 	bl	8000698 <__aeabi_dmul>
 8007566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800756a:	f107 38ff 	add.w	r8, r7, #4294967295
 800756e:	3601      	adds	r6, #1
 8007570:	465c      	mov	r4, fp
 8007572:	4630      	mov	r0, r6
 8007574:	f7f9 f826 	bl	80005c4 <__aeabi_i2d>
 8007578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800757c:	f7f9 f88c 	bl	8000698 <__aeabi_dmul>
 8007580:	4b65      	ldr	r3, [pc, #404]	@ (8007718 <_dtoa_r+0x590>)
 8007582:	2200      	movs	r2, #0
 8007584:	f7f8 fed2 	bl	800032c <__adddf3>
 8007588:	4605      	mov	r5, r0
 800758a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800758e:	2c00      	cmp	r4, #0
 8007590:	d16a      	bne.n	8007668 <_dtoa_r+0x4e0>
 8007592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007596:	4b61      	ldr	r3, [pc, #388]	@ (800771c <_dtoa_r+0x594>)
 8007598:	2200      	movs	r2, #0
 800759a:	f7f8 fec5 	bl	8000328 <__aeabi_dsub>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075a6:	462a      	mov	r2, r5
 80075a8:	4633      	mov	r3, r6
 80075aa:	f7f9 fb05 	bl	8000bb8 <__aeabi_dcmpgt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f040 8298 	bne.w	8007ae4 <_dtoa_r+0x95c>
 80075b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075b8:	462a      	mov	r2, r5
 80075ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075be:	f7f9 fadd 	bl	8000b7c <__aeabi_dcmplt>
 80075c2:	bb38      	cbnz	r0, 8007614 <_dtoa_r+0x48c>
 80075c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80075c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f2c0 8157 	blt.w	8007882 <_dtoa_r+0x6fa>
 80075d4:	2f0e      	cmp	r7, #14
 80075d6:	f300 8154 	bgt.w	8007882 <_dtoa_r+0x6fa>
 80075da:	4b4b      	ldr	r3, [pc, #300]	@ (8007708 <_dtoa_r+0x580>)
 80075dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075e0:	ed93 7b00 	vldr	d7, [r3]
 80075e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	ed8d 7b00 	vstr	d7, [sp]
 80075ec:	f280 80e5 	bge.w	80077ba <_dtoa_r+0x632>
 80075f0:	9b03      	ldr	r3, [sp, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f300 80e1 	bgt.w	80077ba <_dtoa_r+0x632>
 80075f8:	d10c      	bne.n	8007614 <_dtoa_r+0x48c>
 80075fa:	4b48      	ldr	r3, [pc, #288]	@ (800771c <_dtoa_r+0x594>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	ec51 0b17 	vmov	r0, r1, d7
 8007602:	f7f9 f849 	bl	8000698 <__aeabi_dmul>
 8007606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800760a:	f7f9 facb 	bl	8000ba4 <__aeabi_dcmpge>
 800760e:	2800      	cmp	r0, #0
 8007610:	f000 8266 	beq.w	8007ae0 <_dtoa_r+0x958>
 8007614:	2400      	movs	r4, #0
 8007616:	4625      	mov	r5, r4
 8007618:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800761a:	4656      	mov	r6, sl
 800761c:	ea6f 0803 	mvn.w	r8, r3
 8007620:	2700      	movs	r7, #0
 8007622:	4621      	mov	r1, r4
 8007624:	4648      	mov	r0, r9
 8007626:	f000 fcbf 	bl	8007fa8 <_Bfree>
 800762a:	2d00      	cmp	r5, #0
 800762c:	f000 80bd 	beq.w	80077aa <_dtoa_r+0x622>
 8007630:	b12f      	cbz	r7, 800763e <_dtoa_r+0x4b6>
 8007632:	42af      	cmp	r7, r5
 8007634:	d003      	beq.n	800763e <_dtoa_r+0x4b6>
 8007636:	4639      	mov	r1, r7
 8007638:	4648      	mov	r0, r9
 800763a:	f000 fcb5 	bl	8007fa8 <_Bfree>
 800763e:	4629      	mov	r1, r5
 8007640:	4648      	mov	r0, r9
 8007642:	f000 fcb1 	bl	8007fa8 <_Bfree>
 8007646:	e0b0      	b.n	80077aa <_dtoa_r+0x622>
 8007648:	07e2      	lsls	r2, r4, #31
 800764a:	d505      	bpl.n	8007658 <_dtoa_r+0x4d0>
 800764c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007650:	f7f9 f822 	bl	8000698 <__aeabi_dmul>
 8007654:	3601      	adds	r6, #1
 8007656:	2301      	movs	r3, #1
 8007658:	1064      	asrs	r4, r4, #1
 800765a:	3508      	adds	r5, #8
 800765c:	e762      	b.n	8007524 <_dtoa_r+0x39c>
 800765e:	2602      	movs	r6, #2
 8007660:	e765      	b.n	800752e <_dtoa_r+0x3a6>
 8007662:	9c03      	ldr	r4, [sp, #12]
 8007664:	46b8      	mov	r8, r7
 8007666:	e784      	b.n	8007572 <_dtoa_r+0x3ea>
 8007668:	4b27      	ldr	r3, [pc, #156]	@ (8007708 <_dtoa_r+0x580>)
 800766a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800766c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007670:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007674:	4454      	add	r4, sl
 8007676:	2900      	cmp	r1, #0
 8007678:	d054      	beq.n	8007724 <_dtoa_r+0x59c>
 800767a:	4929      	ldr	r1, [pc, #164]	@ (8007720 <_dtoa_r+0x598>)
 800767c:	2000      	movs	r0, #0
 800767e:	f7f9 f935 	bl	80008ec <__aeabi_ddiv>
 8007682:	4633      	mov	r3, r6
 8007684:	462a      	mov	r2, r5
 8007686:	f7f8 fe4f 	bl	8000328 <__aeabi_dsub>
 800768a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800768e:	4656      	mov	r6, sl
 8007690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007694:	f7f9 fab0 	bl	8000bf8 <__aeabi_d2iz>
 8007698:	4605      	mov	r5, r0
 800769a:	f7f8 ff93 	bl	80005c4 <__aeabi_i2d>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a6:	f7f8 fe3f 	bl	8000328 <__aeabi_dsub>
 80076aa:	3530      	adds	r5, #48	@ 0x30
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076b4:	f806 5b01 	strb.w	r5, [r6], #1
 80076b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076bc:	f7f9 fa5e 	bl	8000b7c <__aeabi_dcmplt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d172      	bne.n	80077aa <_dtoa_r+0x622>
 80076c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c8:	4911      	ldr	r1, [pc, #68]	@ (8007710 <_dtoa_r+0x588>)
 80076ca:	2000      	movs	r0, #0
 80076cc:	f7f8 fe2c 	bl	8000328 <__aeabi_dsub>
 80076d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076d4:	f7f9 fa52 	bl	8000b7c <__aeabi_dcmplt>
 80076d8:	2800      	cmp	r0, #0
 80076da:	f040 80b4 	bne.w	8007846 <_dtoa_r+0x6be>
 80076de:	42a6      	cmp	r6, r4
 80076e0:	f43f af70 	beq.w	80075c4 <_dtoa_r+0x43c>
 80076e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80076e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <_dtoa_r+0x58c>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	f7f8 ffd4 	bl	8000698 <__aeabi_dmul>
 80076f0:	4b08      	ldr	r3, [pc, #32]	@ (8007714 <_dtoa_r+0x58c>)
 80076f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076f6:	2200      	movs	r2, #0
 80076f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076fc:	f7f8 ffcc 	bl	8000698 <__aeabi_dmul>
 8007700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007704:	e7c4      	b.n	8007690 <_dtoa_r+0x508>
 8007706:	bf00      	nop
 8007708:	0800a980 	.word	0x0800a980
 800770c:	0800a958 	.word	0x0800a958
 8007710:	3ff00000 	.word	0x3ff00000
 8007714:	40240000 	.word	0x40240000
 8007718:	401c0000 	.word	0x401c0000
 800771c:	40140000 	.word	0x40140000
 8007720:	3fe00000 	.word	0x3fe00000
 8007724:	4631      	mov	r1, r6
 8007726:	4628      	mov	r0, r5
 8007728:	f7f8 ffb6 	bl	8000698 <__aeabi_dmul>
 800772c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007730:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007732:	4656      	mov	r6, sl
 8007734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007738:	f7f9 fa5e 	bl	8000bf8 <__aeabi_d2iz>
 800773c:	4605      	mov	r5, r0
 800773e:	f7f8 ff41 	bl	80005c4 <__aeabi_i2d>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800774a:	f7f8 fded 	bl	8000328 <__aeabi_dsub>
 800774e:	3530      	adds	r5, #48	@ 0x30
 8007750:	f806 5b01 	strb.w	r5, [r6], #1
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	42a6      	cmp	r6, r4
 800775a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	d124      	bne.n	80077ae <_dtoa_r+0x626>
 8007764:	4baf      	ldr	r3, [pc, #700]	@ (8007a24 <_dtoa_r+0x89c>)
 8007766:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800776a:	f7f8 fddf 	bl	800032c <__adddf3>
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007776:	f7f9 fa1f 	bl	8000bb8 <__aeabi_dcmpgt>
 800777a:	2800      	cmp	r0, #0
 800777c:	d163      	bne.n	8007846 <_dtoa_r+0x6be>
 800777e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007782:	49a8      	ldr	r1, [pc, #672]	@ (8007a24 <_dtoa_r+0x89c>)
 8007784:	2000      	movs	r0, #0
 8007786:	f7f8 fdcf 	bl	8000328 <__aeabi_dsub>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007792:	f7f9 f9f3 	bl	8000b7c <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	f43f af14 	beq.w	80075c4 <_dtoa_r+0x43c>
 800779c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800779e:	1e73      	subs	r3, r6, #1
 80077a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077a6:	2b30      	cmp	r3, #48	@ 0x30
 80077a8:	d0f8      	beq.n	800779c <_dtoa_r+0x614>
 80077aa:	4647      	mov	r7, r8
 80077ac:	e03b      	b.n	8007826 <_dtoa_r+0x69e>
 80077ae:	4b9e      	ldr	r3, [pc, #632]	@ (8007a28 <_dtoa_r+0x8a0>)
 80077b0:	f7f8 ff72 	bl	8000698 <__aeabi_dmul>
 80077b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077b8:	e7bc      	b.n	8007734 <_dtoa_r+0x5ac>
 80077ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80077be:	4656      	mov	r6, sl
 80077c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c4:	4620      	mov	r0, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	f7f9 f890 	bl	80008ec <__aeabi_ddiv>
 80077cc:	f7f9 fa14 	bl	8000bf8 <__aeabi_d2iz>
 80077d0:	4680      	mov	r8, r0
 80077d2:	f7f8 fef7 	bl	80005c4 <__aeabi_i2d>
 80077d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077da:	f7f8 ff5d 	bl	8000698 <__aeabi_dmul>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4620      	mov	r0, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077ea:	f7f8 fd9d 	bl	8000328 <__aeabi_dsub>
 80077ee:	f806 4b01 	strb.w	r4, [r6], #1
 80077f2:	9d03      	ldr	r5, [sp, #12]
 80077f4:	eba6 040a 	sub.w	r4, r6, sl
 80077f8:	42a5      	cmp	r5, r4
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	d133      	bne.n	8007868 <_dtoa_r+0x6e0>
 8007800:	f7f8 fd94 	bl	800032c <__adddf3>
 8007804:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007808:	4604      	mov	r4, r0
 800780a:	460d      	mov	r5, r1
 800780c:	f7f9 f9d4 	bl	8000bb8 <__aeabi_dcmpgt>
 8007810:	b9c0      	cbnz	r0, 8007844 <_dtoa_r+0x6bc>
 8007812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007816:	4620      	mov	r0, r4
 8007818:	4629      	mov	r1, r5
 800781a:	f7f9 f9a5 	bl	8000b68 <__aeabi_dcmpeq>
 800781e:	b110      	cbz	r0, 8007826 <_dtoa_r+0x69e>
 8007820:	f018 0f01 	tst.w	r8, #1
 8007824:	d10e      	bne.n	8007844 <_dtoa_r+0x6bc>
 8007826:	9902      	ldr	r1, [sp, #8]
 8007828:	4648      	mov	r0, r9
 800782a:	f000 fbbd 	bl	8007fa8 <_Bfree>
 800782e:	2300      	movs	r3, #0
 8007830:	7033      	strb	r3, [r6, #0]
 8007832:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007834:	3701      	adds	r7, #1
 8007836:	601f      	str	r7, [r3, #0]
 8007838:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 824b 	beq.w	8007cd6 <_dtoa_r+0xb4e>
 8007840:	601e      	str	r6, [r3, #0]
 8007842:	e248      	b.n	8007cd6 <_dtoa_r+0xb4e>
 8007844:	46b8      	mov	r8, r7
 8007846:	4633      	mov	r3, r6
 8007848:	461e      	mov	r6, r3
 800784a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800784e:	2a39      	cmp	r2, #57	@ 0x39
 8007850:	d106      	bne.n	8007860 <_dtoa_r+0x6d8>
 8007852:	459a      	cmp	sl, r3
 8007854:	d1f8      	bne.n	8007848 <_dtoa_r+0x6c0>
 8007856:	2230      	movs	r2, #48	@ 0x30
 8007858:	f108 0801 	add.w	r8, r8, #1
 800785c:	f88a 2000 	strb.w	r2, [sl]
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	3201      	adds	r2, #1
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	e7a0      	b.n	80077aa <_dtoa_r+0x622>
 8007868:	4b6f      	ldr	r3, [pc, #444]	@ (8007a28 <_dtoa_r+0x8a0>)
 800786a:	2200      	movs	r2, #0
 800786c:	f7f8 ff14 	bl	8000698 <__aeabi_dmul>
 8007870:	2200      	movs	r2, #0
 8007872:	2300      	movs	r3, #0
 8007874:	4604      	mov	r4, r0
 8007876:	460d      	mov	r5, r1
 8007878:	f7f9 f976 	bl	8000b68 <__aeabi_dcmpeq>
 800787c:	2800      	cmp	r0, #0
 800787e:	d09f      	beq.n	80077c0 <_dtoa_r+0x638>
 8007880:	e7d1      	b.n	8007826 <_dtoa_r+0x69e>
 8007882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007884:	2a00      	cmp	r2, #0
 8007886:	f000 80ea 	beq.w	8007a5e <_dtoa_r+0x8d6>
 800788a:	9a07      	ldr	r2, [sp, #28]
 800788c:	2a01      	cmp	r2, #1
 800788e:	f300 80cd 	bgt.w	8007a2c <_dtoa_r+0x8a4>
 8007892:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007894:	2a00      	cmp	r2, #0
 8007896:	f000 80c1 	beq.w	8007a1c <_dtoa_r+0x894>
 800789a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800789e:	9c08      	ldr	r4, [sp, #32]
 80078a0:	9e00      	ldr	r6, [sp, #0]
 80078a2:	9a00      	ldr	r2, [sp, #0]
 80078a4:	441a      	add	r2, r3
 80078a6:	9200      	str	r2, [sp, #0]
 80078a8:	9a06      	ldr	r2, [sp, #24]
 80078aa:	2101      	movs	r1, #1
 80078ac:	441a      	add	r2, r3
 80078ae:	4648      	mov	r0, r9
 80078b0:	9206      	str	r2, [sp, #24]
 80078b2:	f000 fc77 	bl	80081a4 <__i2b>
 80078b6:	4605      	mov	r5, r0
 80078b8:	b166      	cbz	r6, 80078d4 <_dtoa_r+0x74c>
 80078ba:	9b06      	ldr	r3, [sp, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dd09      	ble.n	80078d4 <_dtoa_r+0x74c>
 80078c0:	42b3      	cmp	r3, r6
 80078c2:	9a00      	ldr	r2, [sp, #0]
 80078c4:	bfa8      	it	ge
 80078c6:	4633      	movge	r3, r6
 80078c8:	1ad2      	subs	r2, r2, r3
 80078ca:	9200      	str	r2, [sp, #0]
 80078cc:	9a06      	ldr	r2, [sp, #24]
 80078ce:	1af6      	subs	r6, r6, r3
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	9b08      	ldr	r3, [sp, #32]
 80078d6:	b30b      	cbz	r3, 800791c <_dtoa_r+0x794>
 80078d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80c6 	beq.w	8007a6c <_dtoa_r+0x8e4>
 80078e0:	2c00      	cmp	r4, #0
 80078e2:	f000 80c0 	beq.w	8007a66 <_dtoa_r+0x8de>
 80078e6:	4629      	mov	r1, r5
 80078e8:	4622      	mov	r2, r4
 80078ea:	4648      	mov	r0, r9
 80078ec:	f000 fd12 	bl	8008314 <__pow5mult>
 80078f0:	9a02      	ldr	r2, [sp, #8]
 80078f2:	4601      	mov	r1, r0
 80078f4:	4605      	mov	r5, r0
 80078f6:	4648      	mov	r0, r9
 80078f8:	f000 fc6a 	bl	80081d0 <__multiply>
 80078fc:	9902      	ldr	r1, [sp, #8]
 80078fe:	4680      	mov	r8, r0
 8007900:	4648      	mov	r0, r9
 8007902:	f000 fb51 	bl	8007fa8 <_Bfree>
 8007906:	9b08      	ldr	r3, [sp, #32]
 8007908:	1b1b      	subs	r3, r3, r4
 800790a:	9308      	str	r3, [sp, #32]
 800790c:	f000 80b1 	beq.w	8007a72 <_dtoa_r+0x8ea>
 8007910:	9a08      	ldr	r2, [sp, #32]
 8007912:	4641      	mov	r1, r8
 8007914:	4648      	mov	r0, r9
 8007916:	f000 fcfd 	bl	8008314 <__pow5mult>
 800791a:	9002      	str	r0, [sp, #8]
 800791c:	2101      	movs	r1, #1
 800791e:	4648      	mov	r0, r9
 8007920:	f000 fc40 	bl	80081a4 <__i2b>
 8007924:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007926:	4604      	mov	r4, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 81d8 	beq.w	8007cde <_dtoa_r+0xb56>
 800792e:	461a      	mov	r2, r3
 8007930:	4601      	mov	r1, r0
 8007932:	4648      	mov	r0, r9
 8007934:	f000 fcee 	bl	8008314 <__pow5mult>
 8007938:	9b07      	ldr	r3, [sp, #28]
 800793a:	2b01      	cmp	r3, #1
 800793c:	4604      	mov	r4, r0
 800793e:	f300 809f 	bgt.w	8007a80 <_dtoa_r+0x8f8>
 8007942:	9b04      	ldr	r3, [sp, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	f040 8097 	bne.w	8007a78 <_dtoa_r+0x8f0>
 800794a:	9b05      	ldr	r3, [sp, #20]
 800794c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 8093 	bne.w	8007a7c <_dtoa_r+0x8f4>
 8007956:	9b05      	ldr	r3, [sp, #20]
 8007958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800795c:	0d1b      	lsrs	r3, r3, #20
 800795e:	051b      	lsls	r3, r3, #20
 8007960:	b133      	cbz	r3, 8007970 <_dtoa_r+0x7e8>
 8007962:	9b00      	ldr	r3, [sp, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	9b06      	ldr	r3, [sp, #24]
 800796a:	3301      	adds	r3, #1
 800796c:	9306      	str	r3, [sp, #24]
 800796e:	2301      	movs	r3, #1
 8007970:	9308      	str	r3, [sp, #32]
 8007972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 81b8 	beq.w	8007cea <_dtoa_r+0xb62>
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007980:	6918      	ldr	r0, [r3, #16]
 8007982:	f000 fbc3 	bl	800810c <__hi0bits>
 8007986:	f1c0 0020 	rsb	r0, r0, #32
 800798a:	9b06      	ldr	r3, [sp, #24]
 800798c:	4418      	add	r0, r3
 800798e:	f010 001f 	ands.w	r0, r0, #31
 8007992:	f000 8082 	beq.w	8007a9a <_dtoa_r+0x912>
 8007996:	f1c0 0320 	rsb	r3, r0, #32
 800799a:	2b04      	cmp	r3, #4
 800799c:	dd73      	ble.n	8007a86 <_dtoa_r+0x8fe>
 800799e:	9b00      	ldr	r3, [sp, #0]
 80079a0:	f1c0 001c 	rsb	r0, r0, #28
 80079a4:	4403      	add	r3, r0
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	9b06      	ldr	r3, [sp, #24]
 80079aa:	4403      	add	r3, r0
 80079ac:	4406      	add	r6, r0
 80079ae:	9306      	str	r3, [sp, #24]
 80079b0:	9b00      	ldr	r3, [sp, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dd05      	ble.n	80079c2 <_dtoa_r+0x83a>
 80079b6:	9902      	ldr	r1, [sp, #8]
 80079b8:	461a      	mov	r2, r3
 80079ba:	4648      	mov	r0, r9
 80079bc:	f000 fd04 	bl	80083c8 <__lshift>
 80079c0:	9002      	str	r0, [sp, #8]
 80079c2:	9b06      	ldr	r3, [sp, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dd05      	ble.n	80079d4 <_dtoa_r+0x84c>
 80079c8:	4621      	mov	r1, r4
 80079ca:	461a      	mov	r2, r3
 80079cc:	4648      	mov	r0, r9
 80079ce:	f000 fcfb 	bl	80083c8 <__lshift>
 80079d2:	4604      	mov	r4, r0
 80079d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d061      	beq.n	8007a9e <_dtoa_r+0x916>
 80079da:	9802      	ldr	r0, [sp, #8]
 80079dc:	4621      	mov	r1, r4
 80079de:	f000 fd5f 	bl	80084a0 <__mcmp>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	da5b      	bge.n	8007a9e <_dtoa_r+0x916>
 80079e6:	2300      	movs	r3, #0
 80079e8:	9902      	ldr	r1, [sp, #8]
 80079ea:	220a      	movs	r2, #10
 80079ec:	4648      	mov	r0, r9
 80079ee:	f000 fafd 	bl	8007fec <__multadd>
 80079f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f4:	9002      	str	r0, [sp, #8]
 80079f6:	f107 38ff 	add.w	r8, r7, #4294967295
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8177 	beq.w	8007cee <_dtoa_r+0xb66>
 8007a00:	4629      	mov	r1, r5
 8007a02:	2300      	movs	r3, #0
 8007a04:	220a      	movs	r2, #10
 8007a06:	4648      	mov	r0, r9
 8007a08:	f000 faf0 	bl	8007fec <__multadd>
 8007a0c:	f1bb 0f00 	cmp.w	fp, #0
 8007a10:	4605      	mov	r5, r0
 8007a12:	dc6f      	bgt.n	8007af4 <_dtoa_r+0x96c>
 8007a14:	9b07      	ldr	r3, [sp, #28]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	dc49      	bgt.n	8007aae <_dtoa_r+0x926>
 8007a1a:	e06b      	b.n	8007af4 <_dtoa_r+0x96c>
 8007a1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a22:	e73c      	b.n	800789e <_dtoa_r+0x716>
 8007a24:	3fe00000 	.word	0x3fe00000
 8007a28:	40240000 	.word	0x40240000
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	1e5c      	subs	r4, r3, #1
 8007a30:	9b08      	ldr	r3, [sp, #32]
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	db09      	blt.n	8007a4a <_dtoa_r+0x8c2>
 8007a36:	1b1c      	subs	r4, r3, r4
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f6bf af30 	bge.w	80078a0 <_dtoa_r+0x718>
 8007a40:	9b00      	ldr	r3, [sp, #0]
 8007a42:	9a03      	ldr	r2, [sp, #12]
 8007a44:	1a9e      	subs	r6, r3, r2
 8007a46:	2300      	movs	r3, #0
 8007a48:	e72b      	b.n	80078a2 <_dtoa_r+0x71a>
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a4e:	9408      	str	r4, [sp, #32]
 8007a50:	1ae3      	subs	r3, r4, r3
 8007a52:	441a      	add	r2, r3
 8007a54:	9e00      	ldr	r6, [sp, #0]
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	920d      	str	r2, [sp, #52]	@ 0x34
 8007a5a:	2400      	movs	r4, #0
 8007a5c:	e721      	b.n	80078a2 <_dtoa_r+0x71a>
 8007a5e:	9c08      	ldr	r4, [sp, #32]
 8007a60:	9e00      	ldr	r6, [sp, #0]
 8007a62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007a64:	e728      	b.n	80078b8 <_dtoa_r+0x730>
 8007a66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007a6a:	e751      	b.n	8007910 <_dtoa_r+0x788>
 8007a6c:	9a08      	ldr	r2, [sp, #32]
 8007a6e:	9902      	ldr	r1, [sp, #8]
 8007a70:	e750      	b.n	8007914 <_dtoa_r+0x78c>
 8007a72:	f8cd 8008 	str.w	r8, [sp, #8]
 8007a76:	e751      	b.n	800791c <_dtoa_r+0x794>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e779      	b.n	8007970 <_dtoa_r+0x7e8>
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	e777      	b.n	8007970 <_dtoa_r+0x7e8>
 8007a80:	2300      	movs	r3, #0
 8007a82:	9308      	str	r3, [sp, #32]
 8007a84:	e779      	b.n	800797a <_dtoa_r+0x7f2>
 8007a86:	d093      	beq.n	80079b0 <_dtoa_r+0x828>
 8007a88:	9a00      	ldr	r2, [sp, #0]
 8007a8a:	331c      	adds	r3, #28
 8007a8c:	441a      	add	r2, r3
 8007a8e:	9200      	str	r2, [sp, #0]
 8007a90:	9a06      	ldr	r2, [sp, #24]
 8007a92:	441a      	add	r2, r3
 8007a94:	441e      	add	r6, r3
 8007a96:	9206      	str	r2, [sp, #24]
 8007a98:	e78a      	b.n	80079b0 <_dtoa_r+0x828>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	e7f4      	b.n	8007a88 <_dtoa_r+0x900>
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	46b8      	mov	r8, r7
 8007aa4:	dc20      	bgt.n	8007ae8 <_dtoa_r+0x960>
 8007aa6:	469b      	mov	fp, r3
 8007aa8:	9b07      	ldr	r3, [sp, #28]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	dd1e      	ble.n	8007aec <_dtoa_r+0x964>
 8007aae:	f1bb 0f00 	cmp.w	fp, #0
 8007ab2:	f47f adb1 	bne.w	8007618 <_dtoa_r+0x490>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	465b      	mov	r3, fp
 8007aba:	2205      	movs	r2, #5
 8007abc:	4648      	mov	r0, r9
 8007abe:	f000 fa95 	bl	8007fec <__multadd>
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	9802      	ldr	r0, [sp, #8]
 8007ac8:	f000 fcea 	bl	80084a0 <__mcmp>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f77f ada3 	ble.w	8007618 <_dtoa_r+0x490>
 8007ad2:	4656      	mov	r6, sl
 8007ad4:	2331      	movs	r3, #49	@ 0x31
 8007ad6:	f806 3b01 	strb.w	r3, [r6], #1
 8007ada:	f108 0801 	add.w	r8, r8, #1
 8007ade:	e59f      	b.n	8007620 <_dtoa_r+0x498>
 8007ae0:	9c03      	ldr	r4, [sp, #12]
 8007ae2:	46b8      	mov	r8, r7
 8007ae4:	4625      	mov	r5, r4
 8007ae6:	e7f4      	b.n	8007ad2 <_dtoa_r+0x94a>
 8007ae8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 8101 	beq.w	8007cf6 <_dtoa_r+0xb6e>
 8007af4:	2e00      	cmp	r6, #0
 8007af6:	dd05      	ble.n	8007b04 <_dtoa_r+0x97c>
 8007af8:	4629      	mov	r1, r5
 8007afa:	4632      	mov	r2, r6
 8007afc:	4648      	mov	r0, r9
 8007afe:	f000 fc63 	bl	80083c8 <__lshift>
 8007b02:	4605      	mov	r5, r0
 8007b04:	9b08      	ldr	r3, [sp, #32]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d05c      	beq.n	8007bc4 <_dtoa_r+0xa3c>
 8007b0a:	6869      	ldr	r1, [r5, #4]
 8007b0c:	4648      	mov	r0, r9
 8007b0e:	f000 fa0b 	bl	8007f28 <_Balloc>
 8007b12:	4606      	mov	r6, r0
 8007b14:	b928      	cbnz	r0, 8007b22 <_dtoa_r+0x99a>
 8007b16:	4b82      	ldr	r3, [pc, #520]	@ (8007d20 <_dtoa_r+0xb98>)
 8007b18:	4602      	mov	r2, r0
 8007b1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b1e:	f7ff bb4a 	b.w	80071b6 <_dtoa_r+0x2e>
 8007b22:	692a      	ldr	r2, [r5, #16]
 8007b24:	3202      	adds	r2, #2
 8007b26:	0092      	lsls	r2, r2, #2
 8007b28:	f105 010c 	add.w	r1, r5, #12
 8007b2c:	300c      	adds	r0, #12
 8007b2e:	f7ff fa8c 	bl	800704a <memcpy>
 8007b32:	2201      	movs	r2, #1
 8007b34:	4631      	mov	r1, r6
 8007b36:	4648      	mov	r0, r9
 8007b38:	f000 fc46 	bl	80083c8 <__lshift>
 8007b3c:	f10a 0301 	add.w	r3, sl, #1
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	eb0a 030b 	add.w	r3, sl, fp
 8007b46:	9308      	str	r3, [sp, #32]
 8007b48:	9b04      	ldr	r3, [sp, #16]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	462f      	mov	r7, r5
 8007b50:	9306      	str	r3, [sp, #24]
 8007b52:	4605      	mov	r5, r0
 8007b54:	9b00      	ldr	r3, [sp, #0]
 8007b56:	9802      	ldr	r0, [sp, #8]
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b5e:	f7ff fa89 	bl	8007074 <quorem>
 8007b62:	4603      	mov	r3, r0
 8007b64:	3330      	adds	r3, #48	@ 0x30
 8007b66:	9003      	str	r0, [sp, #12]
 8007b68:	4639      	mov	r1, r7
 8007b6a:	9802      	ldr	r0, [sp, #8]
 8007b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b6e:	f000 fc97 	bl	80084a0 <__mcmp>
 8007b72:	462a      	mov	r2, r5
 8007b74:	9004      	str	r0, [sp, #16]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4648      	mov	r0, r9
 8007b7a:	f000 fcad 	bl	80084d8 <__mdiff>
 8007b7e:	68c2      	ldr	r2, [r0, #12]
 8007b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b82:	4606      	mov	r6, r0
 8007b84:	bb02      	cbnz	r2, 8007bc8 <_dtoa_r+0xa40>
 8007b86:	4601      	mov	r1, r0
 8007b88:	9802      	ldr	r0, [sp, #8]
 8007b8a:	f000 fc89 	bl	80084a0 <__mcmp>
 8007b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b90:	4602      	mov	r2, r0
 8007b92:	4631      	mov	r1, r6
 8007b94:	4648      	mov	r0, r9
 8007b96:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b9a:	f000 fa05 	bl	8007fa8 <_Bfree>
 8007b9e:	9b07      	ldr	r3, [sp, #28]
 8007ba0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007ba2:	9e00      	ldr	r6, [sp, #0]
 8007ba4:	ea42 0103 	orr.w	r1, r2, r3
 8007ba8:	9b06      	ldr	r3, [sp, #24]
 8007baa:	4319      	orrs	r1, r3
 8007bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bae:	d10d      	bne.n	8007bcc <_dtoa_r+0xa44>
 8007bb0:	2b39      	cmp	r3, #57	@ 0x39
 8007bb2:	d027      	beq.n	8007c04 <_dtoa_r+0xa7c>
 8007bb4:	9a04      	ldr	r2, [sp, #16]
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	dd01      	ble.n	8007bbe <_dtoa_r+0xa36>
 8007bba:	9b03      	ldr	r3, [sp, #12]
 8007bbc:	3331      	adds	r3, #49	@ 0x31
 8007bbe:	f88b 3000 	strb.w	r3, [fp]
 8007bc2:	e52e      	b.n	8007622 <_dtoa_r+0x49a>
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	e7b9      	b.n	8007b3c <_dtoa_r+0x9b4>
 8007bc8:	2201      	movs	r2, #1
 8007bca:	e7e2      	b.n	8007b92 <_dtoa_r+0xa0a>
 8007bcc:	9904      	ldr	r1, [sp, #16]
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	db04      	blt.n	8007bdc <_dtoa_r+0xa54>
 8007bd2:	9807      	ldr	r0, [sp, #28]
 8007bd4:	4301      	orrs	r1, r0
 8007bd6:	9806      	ldr	r0, [sp, #24]
 8007bd8:	4301      	orrs	r1, r0
 8007bda:	d120      	bne.n	8007c1e <_dtoa_r+0xa96>
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	ddee      	ble.n	8007bbe <_dtoa_r+0xa36>
 8007be0:	9902      	ldr	r1, [sp, #8]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	2201      	movs	r2, #1
 8007be6:	4648      	mov	r0, r9
 8007be8:	f000 fbee 	bl	80083c8 <__lshift>
 8007bec:	4621      	mov	r1, r4
 8007bee:	9002      	str	r0, [sp, #8]
 8007bf0:	f000 fc56 	bl	80084a0 <__mcmp>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	9b00      	ldr	r3, [sp, #0]
 8007bf8:	dc02      	bgt.n	8007c00 <_dtoa_r+0xa78>
 8007bfa:	d1e0      	bne.n	8007bbe <_dtoa_r+0xa36>
 8007bfc:	07da      	lsls	r2, r3, #31
 8007bfe:	d5de      	bpl.n	8007bbe <_dtoa_r+0xa36>
 8007c00:	2b39      	cmp	r3, #57	@ 0x39
 8007c02:	d1da      	bne.n	8007bba <_dtoa_r+0xa32>
 8007c04:	2339      	movs	r3, #57	@ 0x39
 8007c06:	f88b 3000 	strb.w	r3, [fp]
 8007c0a:	4633      	mov	r3, r6
 8007c0c:	461e      	mov	r6, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c14:	2a39      	cmp	r2, #57	@ 0x39
 8007c16:	d04e      	beq.n	8007cb6 <_dtoa_r+0xb2e>
 8007c18:	3201      	adds	r2, #1
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	e501      	b.n	8007622 <_dtoa_r+0x49a>
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	dd03      	ble.n	8007c2a <_dtoa_r+0xaa2>
 8007c22:	2b39      	cmp	r3, #57	@ 0x39
 8007c24:	d0ee      	beq.n	8007c04 <_dtoa_r+0xa7c>
 8007c26:	3301      	adds	r3, #1
 8007c28:	e7c9      	b.n	8007bbe <_dtoa_r+0xa36>
 8007c2a:	9a00      	ldr	r2, [sp, #0]
 8007c2c:	9908      	ldr	r1, [sp, #32]
 8007c2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c32:	428a      	cmp	r2, r1
 8007c34:	d028      	beq.n	8007c88 <_dtoa_r+0xb00>
 8007c36:	9902      	ldr	r1, [sp, #8]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	220a      	movs	r2, #10
 8007c3c:	4648      	mov	r0, r9
 8007c3e:	f000 f9d5 	bl	8007fec <__multadd>
 8007c42:	42af      	cmp	r7, r5
 8007c44:	9002      	str	r0, [sp, #8]
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	f04f 020a 	mov.w	r2, #10
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4648      	mov	r0, r9
 8007c52:	d107      	bne.n	8007c64 <_dtoa_r+0xadc>
 8007c54:	f000 f9ca 	bl	8007fec <__multadd>
 8007c58:	4607      	mov	r7, r0
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	9b00      	ldr	r3, [sp, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	e777      	b.n	8007b54 <_dtoa_r+0x9cc>
 8007c64:	f000 f9c2 	bl	8007fec <__multadd>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	220a      	movs	r2, #10
 8007c70:	4648      	mov	r0, r9
 8007c72:	f000 f9bb 	bl	8007fec <__multadd>
 8007c76:	4605      	mov	r5, r0
 8007c78:	e7f0      	b.n	8007c5c <_dtoa_r+0xad4>
 8007c7a:	f1bb 0f00 	cmp.w	fp, #0
 8007c7e:	bfcc      	ite	gt
 8007c80:	465e      	movgt	r6, fp
 8007c82:	2601      	movle	r6, #1
 8007c84:	4456      	add	r6, sl
 8007c86:	2700      	movs	r7, #0
 8007c88:	9902      	ldr	r1, [sp, #8]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4648      	mov	r0, r9
 8007c90:	f000 fb9a 	bl	80083c8 <__lshift>
 8007c94:	4621      	mov	r1, r4
 8007c96:	9002      	str	r0, [sp, #8]
 8007c98:	f000 fc02 	bl	80084a0 <__mcmp>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	dcb4      	bgt.n	8007c0a <_dtoa_r+0xa82>
 8007ca0:	d102      	bne.n	8007ca8 <_dtoa_r+0xb20>
 8007ca2:	9b00      	ldr	r3, [sp, #0]
 8007ca4:	07db      	lsls	r3, r3, #31
 8007ca6:	d4b0      	bmi.n	8007c0a <_dtoa_r+0xa82>
 8007ca8:	4633      	mov	r3, r6
 8007caa:	461e      	mov	r6, r3
 8007cac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cb0:	2a30      	cmp	r2, #48	@ 0x30
 8007cb2:	d0fa      	beq.n	8007caa <_dtoa_r+0xb22>
 8007cb4:	e4b5      	b.n	8007622 <_dtoa_r+0x49a>
 8007cb6:	459a      	cmp	sl, r3
 8007cb8:	d1a8      	bne.n	8007c0c <_dtoa_r+0xa84>
 8007cba:	2331      	movs	r3, #49	@ 0x31
 8007cbc:	f108 0801 	add.w	r8, r8, #1
 8007cc0:	f88a 3000 	strb.w	r3, [sl]
 8007cc4:	e4ad      	b.n	8007622 <_dtoa_r+0x49a>
 8007cc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cc8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007d24 <_dtoa_r+0xb9c>
 8007ccc:	b11b      	cbz	r3, 8007cd6 <_dtoa_r+0xb4e>
 8007cce:	f10a 0308 	add.w	r3, sl, #8
 8007cd2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	4650      	mov	r0, sl
 8007cd8:	b017      	add	sp, #92	@ 0x5c
 8007cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cde:	9b07      	ldr	r3, [sp, #28]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	f77f ae2e 	ble.w	8007942 <_dtoa_r+0x7ba>
 8007ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ce8:	9308      	str	r3, [sp, #32]
 8007cea:	2001      	movs	r0, #1
 8007cec:	e64d      	b.n	800798a <_dtoa_r+0x802>
 8007cee:	f1bb 0f00 	cmp.w	fp, #0
 8007cf2:	f77f aed9 	ble.w	8007aa8 <_dtoa_r+0x920>
 8007cf6:	4656      	mov	r6, sl
 8007cf8:	9802      	ldr	r0, [sp, #8]
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	f7ff f9ba 	bl	8007074 <quorem>
 8007d00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007d04:	f806 3b01 	strb.w	r3, [r6], #1
 8007d08:	eba6 020a 	sub.w	r2, r6, sl
 8007d0c:	4593      	cmp	fp, r2
 8007d0e:	ddb4      	ble.n	8007c7a <_dtoa_r+0xaf2>
 8007d10:	9902      	ldr	r1, [sp, #8]
 8007d12:	2300      	movs	r3, #0
 8007d14:	220a      	movs	r2, #10
 8007d16:	4648      	mov	r0, r9
 8007d18:	f000 f968 	bl	8007fec <__multadd>
 8007d1c:	9002      	str	r0, [sp, #8]
 8007d1e:	e7eb      	b.n	8007cf8 <_dtoa_r+0xb70>
 8007d20:	0800a829 	.word	0x0800a829
 8007d24:	0800a7ad 	.word	0x0800a7ad

08007d28 <_free_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d041      	beq.n	8007db4 <_free_r+0x8c>
 8007d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d34:	1f0c      	subs	r4, r1, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bfb8      	it	lt
 8007d3a:	18e4      	addlt	r4, r4, r3
 8007d3c:	f000 f8e8 	bl	8007f10 <__malloc_lock>
 8007d40:	4a1d      	ldr	r2, [pc, #116]	@ (8007db8 <_free_r+0x90>)
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	b933      	cbnz	r3, 8007d54 <_free_r+0x2c>
 8007d46:	6063      	str	r3, [r4, #4]
 8007d48:	6014      	str	r4, [r2, #0]
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d50:	f000 b8e4 	b.w	8007f1c <__malloc_unlock>
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d908      	bls.n	8007d6a <_free_r+0x42>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	1821      	adds	r1, r4, r0
 8007d5c:	428b      	cmp	r3, r1
 8007d5e:	bf01      	itttt	eq
 8007d60:	6819      	ldreq	r1, [r3, #0]
 8007d62:	685b      	ldreq	r3, [r3, #4]
 8007d64:	1809      	addeq	r1, r1, r0
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	e7ed      	b.n	8007d46 <_free_r+0x1e>
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	b10b      	cbz	r3, 8007d74 <_free_r+0x4c>
 8007d70:	42a3      	cmp	r3, r4
 8007d72:	d9fa      	bls.n	8007d6a <_free_r+0x42>
 8007d74:	6811      	ldr	r1, [r2, #0]
 8007d76:	1850      	adds	r0, r2, r1
 8007d78:	42a0      	cmp	r0, r4
 8007d7a:	d10b      	bne.n	8007d94 <_free_r+0x6c>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	4401      	add	r1, r0
 8007d80:	1850      	adds	r0, r2, r1
 8007d82:	4283      	cmp	r3, r0
 8007d84:	6011      	str	r1, [r2, #0]
 8007d86:	d1e0      	bne.n	8007d4a <_free_r+0x22>
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	6053      	str	r3, [r2, #4]
 8007d8e:	4408      	add	r0, r1
 8007d90:	6010      	str	r0, [r2, #0]
 8007d92:	e7da      	b.n	8007d4a <_free_r+0x22>
 8007d94:	d902      	bls.n	8007d9c <_free_r+0x74>
 8007d96:	230c      	movs	r3, #12
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	e7d6      	b.n	8007d4a <_free_r+0x22>
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	1821      	adds	r1, r4, r0
 8007da0:	428b      	cmp	r3, r1
 8007da2:	bf04      	itt	eq
 8007da4:	6819      	ldreq	r1, [r3, #0]
 8007da6:	685b      	ldreq	r3, [r3, #4]
 8007da8:	6063      	str	r3, [r4, #4]
 8007daa:	bf04      	itt	eq
 8007dac:	1809      	addeq	r1, r1, r0
 8007dae:	6021      	streq	r1, [r4, #0]
 8007db0:	6054      	str	r4, [r2, #4]
 8007db2:	e7ca      	b.n	8007d4a <_free_r+0x22>
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	bf00      	nop
 8007db8:	20002970 	.word	0x20002970

08007dbc <malloc>:
 8007dbc:	4b02      	ldr	r3, [pc, #8]	@ (8007dc8 <malloc+0xc>)
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	f000 b825 	b.w	8007e10 <_malloc_r>
 8007dc6:	bf00      	nop
 8007dc8:	2000001c 	.word	0x2000001c

08007dcc <sbrk_aligned>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	4e0f      	ldr	r6, [pc, #60]	@ (8007e0c <sbrk_aligned+0x40>)
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	6831      	ldr	r1, [r6, #0]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	b911      	cbnz	r1, 8007dde <sbrk_aligned+0x12>
 8007dd8:	f001 fe88 	bl	8009aec <_sbrk_r>
 8007ddc:	6030      	str	r0, [r6, #0]
 8007dde:	4621      	mov	r1, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	f001 fe83 	bl	8009aec <_sbrk_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	d103      	bne.n	8007df2 <sbrk_aligned+0x26>
 8007dea:	f04f 34ff 	mov.w	r4, #4294967295
 8007dee:	4620      	mov	r0, r4
 8007df0:	bd70      	pop	{r4, r5, r6, pc}
 8007df2:	1cc4      	adds	r4, r0, #3
 8007df4:	f024 0403 	bic.w	r4, r4, #3
 8007df8:	42a0      	cmp	r0, r4
 8007dfa:	d0f8      	beq.n	8007dee <sbrk_aligned+0x22>
 8007dfc:	1a21      	subs	r1, r4, r0
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f001 fe74 	bl	8009aec <_sbrk_r>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d1f2      	bne.n	8007dee <sbrk_aligned+0x22>
 8007e08:	e7ef      	b.n	8007dea <sbrk_aligned+0x1e>
 8007e0a:	bf00      	nop
 8007e0c:	2000296c 	.word	0x2000296c

08007e10 <_malloc_r>:
 8007e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e14:	1ccd      	adds	r5, r1, #3
 8007e16:	f025 0503 	bic.w	r5, r5, #3
 8007e1a:	3508      	adds	r5, #8
 8007e1c:	2d0c      	cmp	r5, #12
 8007e1e:	bf38      	it	cc
 8007e20:	250c      	movcc	r5, #12
 8007e22:	2d00      	cmp	r5, #0
 8007e24:	4606      	mov	r6, r0
 8007e26:	db01      	blt.n	8007e2c <_malloc_r+0x1c>
 8007e28:	42a9      	cmp	r1, r5
 8007e2a:	d904      	bls.n	8007e36 <_malloc_r+0x26>
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	6033      	str	r3, [r6, #0]
 8007e30:	2000      	movs	r0, #0
 8007e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f0c <_malloc_r+0xfc>
 8007e3a:	f000 f869 	bl	8007f10 <__malloc_lock>
 8007e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e42:	461c      	mov	r4, r3
 8007e44:	bb44      	cbnz	r4, 8007e98 <_malloc_r+0x88>
 8007e46:	4629      	mov	r1, r5
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f7ff ffbf 	bl	8007dcc <sbrk_aligned>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	4604      	mov	r4, r0
 8007e52:	d158      	bne.n	8007f06 <_malloc_r+0xf6>
 8007e54:	f8d8 4000 	ldr.w	r4, [r8]
 8007e58:	4627      	mov	r7, r4
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	d143      	bne.n	8007ee6 <_malloc_r+0xd6>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	d04b      	beq.n	8007efa <_malloc_r+0xea>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	4639      	mov	r1, r7
 8007e66:	4630      	mov	r0, r6
 8007e68:	eb04 0903 	add.w	r9, r4, r3
 8007e6c:	f001 fe3e 	bl	8009aec <_sbrk_r>
 8007e70:	4581      	cmp	r9, r0
 8007e72:	d142      	bne.n	8007efa <_malloc_r+0xea>
 8007e74:	6821      	ldr	r1, [r4, #0]
 8007e76:	1a6d      	subs	r5, r5, r1
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f7ff ffa6 	bl	8007dcc <sbrk_aligned>
 8007e80:	3001      	adds	r0, #1
 8007e82:	d03a      	beq.n	8007efa <_malloc_r+0xea>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	442b      	add	r3, r5
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	bb62      	cbnz	r2, 8007eec <_malloc_r+0xdc>
 8007e92:	f8c8 7000 	str.w	r7, [r8]
 8007e96:	e00f      	b.n	8007eb8 <_malloc_r+0xa8>
 8007e98:	6822      	ldr	r2, [r4, #0]
 8007e9a:	1b52      	subs	r2, r2, r5
 8007e9c:	d420      	bmi.n	8007ee0 <_malloc_r+0xd0>
 8007e9e:	2a0b      	cmp	r2, #11
 8007ea0:	d917      	bls.n	8007ed2 <_malloc_r+0xc2>
 8007ea2:	1961      	adds	r1, r4, r5
 8007ea4:	42a3      	cmp	r3, r4
 8007ea6:	6025      	str	r5, [r4, #0]
 8007ea8:	bf18      	it	ne
 8007eaa:	6059      	strne	r1, [r3, #4]
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	bf08      	it	eq
 8007eb0:	f8c8 1000 	streq.w	r1, [r8]
 8007eb4:	5162      	str	r2, [r4, r5]
 8007eb6:	604b      	str	r3, [r1, #4]
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f000 f82f 	bl	8007f1c <__malloc_unlock>
 8007ebe:	f104 000b 	add.w	r0, r4, #11
 8007ec2:	1d23      	adds	r3, r4, #4
 8007ec4:	f020 0007 	bic.w	r0, r0, #7
 8007ec8:	1ac2      	subs	r2, r0, r3
 8007eca:	bf1c      	itt	ne
 8007ecc:	1a1b      	subne	r3, r3, r0
 8007ece:	50a3      	strne	r3, [r4, r2]
 8007ed0:	e7af      	b.n	8007e32 <_malloc_r+0x22>
 8007ed2:	6862      	ldr	r2, [r4, #4]
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	bf0c      	ite	eq
 8007ed8:	f8c8 2000 	streq.w	r2, [r8]
 8007edc:	605a      	strne	r2, [r3, #4]
 8007ede:	e7eb      	b.n	8007eb8 <_malloc_r+0xa8>
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	6864      	ldr	r4, [r4, #4]
 8007ee4:	e7ae      	b.n	8007e44 <_malloc_r+0x34>
 8007ee6:	463c      	mov	r4, r7
 8007ee8:	687f      	ldr	r7, [r7, #4]
 8007eea:	e7b6      	b.n	8007e5a <_malloc_r+0x4a>
 8007eec:	461a      	mov	r2, r3
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	d1fb      	bne.n	8007eec <_malloc_r+0xdc>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	6053      	str	r3, [r2, #4]
 8007ef8:	e7de      	b.n	8007eb8 <_malloc_r+0xa8>
 8007efa:	230c      	movs	r3, #12
 8007efc:	6033      	str	r3, [r6, #0]
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 f80c 	bl	8007f1c <__malloc_unlock>
 8007f04:	e794      	b.n	8007e30 <_malloc_r+0x20>
 8007f06:	6005      	str	r5, [r0, #0]
 8007f08:	e7d6      	b.n	8007eb8 <_malloc_r+0xa8>
 8007f0a:	bf00      	nop
 8007f0c:	20002970 	.word	0x20002970

08007f10 <__malloc_lock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__malloc_lock+0x8>)
 8007f12:	f7ff b898 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	20002968 	.word	0x20002968

08007f1c <__malloc_unlock>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	@ (8007f24 <__malloc_unlock+0x8>)
 8007f1e:	f7ff b893 	b.w	8007048 <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	20002968 	.word	0x20002968

08007f28 <_Balloc>:
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	69c6      	ldr	r6, [r0, #28]
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	460d      	mov	r5, r1
 8007f30:	b976      	cbnz	r6, 8007f50 <_Balloc+0x28>
 8007f32:	2010      	movs	r0, #16
 8007f34:	f7ff ff42 	bl	8007dbc <malloc>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	61e0      	str	r0, [r4, #28]
 8007f3c:	b920      	cbnz	r0, 8007f48 <_Balloc+0x20>
 8007f3e:	4b18      	ldr	r3, [pc, #96]	@ (8007fa0 <_Balloc+0x78>)
 8007f40:	4818      	ldr	r0, [pc, #96]	@ (8007fa4 <_Balloc+0x7c>)
 8007f42:	216b      	movs	r1, #107	@ 0x6b
 8007f44:	f001 fdec 	bl	8009b20 <__assert_func>
 8007f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f4c:	6006      	str	r6, [r0, #0]
 8007f4e:	60c6      	str	r6, [r0, #12]
 8007f50:	69e6      	ldr	r6, [r4, #28]
 8007f52:	68f3      	ldr	r3, [r6, #12]
 8007f54:	b183      	cbz	r3, 8007f78 <_Balloc+0x50>
 8007f56:	69e3      	ldr	r3, [r4, #28]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f5e:	b9b8      	cbnz	r0, 8007f90 <_Balloc+0x68>
 8007f60:	2101      	movs	r1, #1
 8007f62:	fa01 f605 	lsl.w	r6, r1, r5
 8007f66:	1d72      	adds	r2, r6, #5
 8007f68:	0092      	lsls	r2, r2, #2
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f001 fdf6 	bl	8009b5c <_calloc_r>
 8007f70:	b160      	cbz	r0, 8007f8c <_Balloc+0x64>
 8007f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f76:	e00e      	b.n	8007f96 <_Balloc+0x6e>
 8007f78:	2221      	movs	r2, #33	@ 0x21
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f001 fded 	bl	8009b5c <_calloc_r>
 8007f82:	69e3      	ldr	r3, [r4, #28]
 8007f84:	60f0      	str	r0, [r6, #12]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e4      	bne.n	8007f56 <_Balloc+0x2e>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	6802      	ldr	r2, [r0, #0]
 8007f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f96:	2300      	movs	r3, #0
 8007f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f9c:	e7f7      	b.n	8007f8e <_Balloc+0x66>
 8007f9e:	bf00      	nop
 8007fa0:	0800a7ba 	.word	0x0800a7ba
 8007fa4:	0800a83a 	.word	0x0800a83a

08007fa8 <_Bfree>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	69c6      	ldr	r6, [r0, #28]
 8007fac:	4605      	mov	r5, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	b976      	cbnz	r6, 8007fd0 <_Bfree+0x28>
 8007fb2:	2010      	movs	r0, #16
 8007fb4:	f7ff ff02 	bl	8007dbc <malloc>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	61e8      	str	r0, [r5, #28]
 8007fbc:	b920      	cbnz	r0, 8007fc8 <_Bfree+0x20>
 8007fbe:	4b09      	ldr	r3, [pc, #36]	@ (8007fe4 <_Bfree+0x3c>)
 8007fc0:	4809      	ldr	r0, [pc, #36]	@ (8007fe8 <_Bfree+0x40>)
 8007fc2:	218f      	movs	r1, #143	@ 0x8f
 8007fc4:	f001 fdac 	bl	8009b20 <__assert_func>
 8007fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fcc:	6006      	str	r6, [r0, #0]
 8007fce:	60c6      	str	r6, [r0, #12]
 8007fd0:	b13c      	cbz	r4, 8007fe2 <_Bfree+0x3a>
 8007fd2:	69eb      	ldr	r3, [r5, #28]
 8007fd4:	6862      	ldr	r2, [r4, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fdc:	6021      	str	r1, [r4, #0]
 8007fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	0800a7ba 	.word	0x0800a7ba
 8007fe8:	0800a83a 	.word	0x0800a83a

08007fec <__multadd>:
 8007fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff0:	690d      	ldr	r5, [r1, #16]
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	461e      	mov	r6, r3
 8007ff8:	f101 0c14 	add.w	ip, r1, #20
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8008002:	b299      	uxth	r1, r3
 8008004:	fb02 6101 	mla	r1, r2, r1, r6
 8008008:	0c1e      	lsrs	r6, r3, #16
 800800a:	0c0b      	lsrs	r3, r1, #16
 800800c:	fb02 3306 	mla	r3, r2, r6, r3
 8008010:	b289      	uxth	r1, r1
 8008012:	3001      	adds	r0, #1
 8008014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008018:	4285      	cmp	r5, r0
 800801a:	f84c 1b04 	str.w	r1, [ip], #4
 800801e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008022:	dcec      	bgt.n	8007ffe <__multadd+0x12>
 8008024:	b30e      	cbz	r6, 800806a <__multadd+0x7e>
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	42ab      	cmp	r3, r5
 800802a:	dc19      	bgt.n	8008060 <__multadd+0x74>
 800802c:	6861      	ldr	r1, [r4, #4]
 800802e:	4638      	mov	r0, r7
 8008030:	3101      	adds	r1, #1
 8008032:	f7ff ff79 	bl	8007f28 <_Balloc>
 8008036:	4680      	mov	r8, r0
 8008038:	b928      	cbnz	r0, 8008046 <__multadd+0x5a>
 800803a:	4602      	mov	r2, r0
 800803c:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <__multadd+0x84>)
 800803e:	480d      	ldr	r0, [pc, #52]	@ (8008074 <__multadd+0x88>)
 8008040:	21ba      	movs	r1, #186	@ 0xba
 8008042:	f001 fd6d 	bl	8009b20 <__assert_func>
 8008046:	6922      	ldr	r2, [r4, #16]
 8008048:	3202      	adds	r2, #2
 800804a:	f104 010c 	add.w	r1, r4, #12
 800804e:	0092      	lsls	r2, r2, #2
 8008050:	300c      	adds	r0, #12
 8008052:	f7fe fffa 	bl	800704a <memcpy>
 8008056:	4621      	mov	r1, r4
 8008058:	4638      	mov	r0, r7
 800805a:	f7ff ffa5 	bl	8007fa8 <_Bfree>
 800805e:	4644      	mov	r4, r8
 8008060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008064:	3501      	adds	r5, #1
 8008066:	615e      	str	r6, [r3, #20]
 8008068:	6125      	str	r5, [r4, #16]
 800806a:	4620      	mov	r0, r4
 800806c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008070:	0800a829 	.word	0x0800a829
 8008074:	0800a83a 	.word	0x0800a83a

08008078 <__s2b>:
 8008078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800807c:	460c      	mov	r4, r1
 800807e:	4615      	mov	r5, r2
 8008080:	461f      	mov	r7, r3
 8008082:	2209      	movs	r2, #9
 8008084:	3308      	adds	r3, #8
 8008086:	4606      	mov	r6, r0
 8008088:	fb93 f3f2 	sdiv	r3, r3, r2
 800808c:	2100      	movs	r1, #0
 800808e:	2201      	movs	r2, #1
 8008090:	429a      	cmp	r2, r3
 8008092:	db09      	blt.n	80080a8 <__s2b+0x30>
 8008094:	4630      	mov	r0, r6
 8008096:	f7ff ff47 	bl	8007f28 <_Balloc>
 800809a:	b940      	cbnz	r0, 80080ae <__s2b+0x36>
 800809c:	4602      	mov	r2, r0
 800809e:	4b19      	ldr	r3, [pc, #100]	@ (8008104 <__s2b+0x8c>)
 80080a0:	4819      	ldr	r0, [pc, #100]	@ (8008108 <__s2b+0x90>)
 80080a2:	21d3      	movs	r1, #211	@ 0xd3
 80080a4:	f001 fd3c 	bl	8009b20 <__assert_func>
 80080a8:	0052      	lsls	r2, r2, #1
 80080aa:	3101      	adds	r1, #1
 80080ac:	e7f0      	b.n	8008090 <__s2b+0x18>
 80080ae:	9b08      	ldr	r3, [sp, #32]
 80080b0:	6143      	str	r3, [r0, #20]
 80080b2:	2d09      	cmp	r5, #9
 80080b4:	f04f 0301 	mov.w	r3, #1
 80080b8:	6103      	str	r3, [r0, #16]
 80080ba:	dd16      	ble.n	80080ea <__s2b+0x72>
 80080bc:	f104 0909 	add.w	r9, r4, #9
 80080c0:	46c8      	mov	r8, r9
 80080c2:	442c      	add	r4, r5
 80080c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080c8:	4601      	mov	r1, r0
 80080ca:	3b30      	subs	r3, #48	@ 0x30
 80080cc:	220a      	movs	r2, #10
 80080ce:	4630      	mov	r0, r6
 80080d0:	f7ff ff8c 	bl	8007fec <__multadd>
 80080d4:	45a0      	cmp	r8, r4
 80080d6:	d1f5      	bne.n	80080c4 <__s2b+0x4c>
 80080d8:	f1a5 0408 	sub.w	r4, r5, #8
 80080dc:	444c      	add	r4, r9
 80080de:	1b2d      	subs	r5, r5, r4
 80080e0:	1963      	adds	r3, r4, r5
 80080e2:	42bb      	cmp	r3, r7
 80080e4:	db04      	blt.n	80080f0 <__s2b+0x78>
 80080e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ea:	340a      	adds	r4, #10
 80080ec:	2509      	movs	r5, #9
 80080ee:	e7f6      	b.n	80080de <__s2b+0x66>
 80080f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080f4:	4601      	mov	r1, r0
 80080f6:	3b30      	subs	r3, #48	@ 0x30
 80080f8:	220a      	movs	r2, #10
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7ff ff76 	bl	8007fec <__multadd>
 8008100:	e7ee      	b.n	80080e0 <__s2b+0x68>
 8008102:	bf00      	nop
 8008104:	0800a829 	.word	0x0800a829
 8008108:	0800a83a 	.word	0x0800a83a

0800810c <__hi0bits>:
 800810c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008110:	4603      	mov	r3, r0
 8008112:	bf36      	itet	cc
 8008114:	0403      	lslcc	r3, r0, #16
 8008116:	2000      	movcs	r0, #0
 8008118:	2010      	movcc	r0, #16
 800811a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800811e:	bf3c      	itt	cc
 8008120:	021b      	lslcc	r3, r3, #8
 8008122:	3008      	addcc	r0, #8
 8008124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008128:	bf3c      	itt	cc
 800812a:	011b      	lslcc	r3, r3, #4
 800812c:	3004      	addcc	r0, #4
 800812e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008132:	bf3c      	itt	cc
 8008134:	009b      	lslcc	r3, r3, #2
 8008136:	3002      	addcc	r0, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	db05      	blt.n	8008148 <__hi0bits+0x3c>
 800813c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008140:	f100 0001 	add.w	r0, r0, #1
 8008144:	bf08      	it	eq
 8008146:	2020      	moveq	r0, #32
 8008148:	4770      	bx	lr

0800814a <__lo0bits>:
 800814a:	6803      	ldr	r3, [r0, #0]
 800814c:	4602      	mov	r2, r0
 800814e:	f013 0007 	ands.w	r0, r3, #7
 8008152:	d00b      	beq.n	800816c <__lo0bits+0x22>
 8008154:	07d9      	lsls	r1, r3, #31
 8008156:	d421      	bmi.n	800819c <__lo0bits+0x52>
 8008158:	0798      	lsls	r0, r3, #30
 800815a:	bf49      	itett	mi
 800815c:	085b      	lsrmi	r3, r3, #1
 800815e:	089b      	lsrpl	r3, r3, #2
 8008160:	2001      	movmi	r0, #1
 8008162:	6013      	strmi	r3, [r2, #0]
 8008164:	bf5c      	itt	pl
 8008166:	6013      	strpl	r3, [r2, #0]
 8008168:	2002      	movpl	r0, #2
 800816a:	4770      	bx	lr
 800816c:	b299      	uxth	r1, r3
 800816e:	b909      	cbnz	r1, 8008174 <__lo0bits+0x2a>
 8008170:	0c1b      	lsrs	r3, r3, #16
 8008172:	2010      	movs	r0, #16
 8008174:	b2d9      	uxtb	r1, r3
 8008176:	b909      	cbnz	r1, 800817c <__lo0bits+0x32>
 8008178:	3008      	adds	r0, #8
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	0719      	lsls	r1, r3, #28
 800817e:	bf04      	itt	eq
 8008180:	091b      	lsreq	r3, r3, #4
 8008182:	3004      	addeq	r0, #4
 8008184:	0799      	lsls	r1, r3, #30
 8008186:	bf04      	itt	eq
 8008188:	089b      	lsreq	r3, r3, #2
 800818a:	3002      	addeq	r0, #2
 800818c:	07d9      	lsls	r1, r3, #31
 800818e:	d403      	bmi.n	8008198 <__lo0bits+0x4e>
 8008190:	085b      	lsrs	r3, r3, #1
 8008192:	f100 0001 	add.w	r0, r0, #1
 8008196:	d003      	beq.n	80081a0 <__lo0bits+0x56>
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	4770      	bx	lr
 800819c:	2000      	movs	r0, #0
 800819e:	4770      	bx	lr
 80081a0:	2020      	movs	r0, #32
 80081a2:	4770      	bx	lr

080081a4 <__i2b>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	460c      	mov	r4, r1
 80081a8:	2101      	movs	r1, #1
 80081aa:	f7ff febd 	bl	8007f28 <_Balloc>
 80081ae:	4602      	mov	r2, r0
 80081b0:	b928      	cbnz	r0, 80081be <__i2b+0x1a>
 80081b2:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <__i2b+0x24>)
 80081b4:	4805      	ldr	r0, [pc, #20]	@ (80081cc <__i2b+0x28>)
 80081b6:	f240 1145 	movw	r1, #325	@ 0x145
 80081ba:	f001 fcb1 	bl	8009b20 <__assert_func>
 80081be:	2301      	movs	r3, #1
 80081c0:	6144      	str	r4, [r0, #20]
 80081c2:	6103      	str	r3, [r0, #16]
 80081c4:	bd10      	pop	{r4, pc}
 80081c6:	bf00      	nop
 80081c8:	0800a829 	.word	0x0800a829
 80081cc:	0800a83a 	.word	0x0800a83a

080081d0 <__multiply>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	4617      	mov	r7, r2
 80081d6:	690a      	ldr	r2, [r1, #16]
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	bfa8      	it	ge
 80081de:	463b      	movge	r3, r7
 80081e0:	4689      	mov	r9, r1
 80081e2:	bfa4      	itt	ge
 80081e4:	460f      	movge	r7, r1
 80081e6:	4699      	movge	r9, r3
 80081e8:	693d      	ldr	r5, [r7, #16]
 80081ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	eb05 060a 	add.w	r6, r5, sl
 80081f6:	42b3      	cmp	r3, r6
 80081f8:	b085      	sub	sp, #20
 80081fa:	bfb8      	it	lt
 80081fc:	3101      	addlt	r1, #1
 80081fe:	f7ff fe93 	bl	8007f28 <_Balloc>
 8008202:	b930      	cbnz	r0, 8008212 <__multiply+0x42>
 8008204:	4602      	mov	r2, r0
 8008206:	4b41      	ldr	r3, [pc, #260]	@ (800830c <__multiply+0x13c>)
 8008208:	4841      	ldr	r0, [pc, #260]	@ (8008310 <__multiply+0x140>)
 800820a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800820e:	f001 fc87 	bl	8009b20 <__assert_func>
 8008212:	f100 0414 	add.w	r4, r0, #20
 8008216:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800821a:	4623      	mov	r3, r4
 800821c:	2200      	movs	r2, #0
 800821e:	4573      	cmp	r3, lr
 8008220:	d320      	bcc.n	8008264 <__multiply+0x94>
 8008222:	f107 0814 	add.w	r8, r7, #20
 8008226:	f109 0114 	add.w	r1, r9, #20
 800822a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800822e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008232:	9302      	str	r3, [sp, #8]
 8008234:	1beb      	subs	r3, r5, r7
 8008236:	3b15      	subs	r3, #21
 8008238:	f023 0303 	bic.w	r3, r3, #3
 800823c:	3304      	adds	r3, #4
 800823e:	3715      	adds	r7, #21
 8008240:	42bd      	cmp	r5, r7
 8008242:	bf38      	it	cc
 8008244:	2304      	movcc	r3, #4
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	9b02      	ldr	r3, [sp, #8]
 800824a:	9103      	str	r1, [sp, #12]
 800824c:	428b      	cmp	r3, r1
 800824e:	d80c      	bhi.n	800826a <__multiply+0x9a>
 8008250:	2e00      	cmp	r6, #0
 8008252:	dd03      	ble.n	800825c <__multiply+0x8c>
 8008254:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008258:	2b00      	cmp	r3, #0
 800825a:	d055      	beq.n	8008308 <__multiply+0x138>
 800825c:	6106      	str	r6, [r0, #16]
 800825e:	b005      	add	sp, #20
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008264:	f843 2b04 	str.w	r2, [r3], #4
 8008268:	e7d9      	b.n	800821e <__multiply+0x4e>
 800826a:	f8b1 a000 	ldrh.w	sl, [r1]
 800826e:	f1ba 0f00 	cmp.w	sl, #0
 8008272:	d01f      	beq.n	80082b4 <__multiply+0xe4>
 8008274:	46c4      	mov	ip, r8
 8008276:	46a1      	mov	r9, r4
 8008278:	2700      	movs	r7, #0
 800827a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800827e:	f8d9 3000 	ldr.w	r3, [r9]
 8008282:	fa1f fb82 	uxth.w	fp, r2
 8008286:	b29b      	uxth	r3, r3
 8008288:	fb0a 330b 	mla	r3, sl, fp, r3
 800828c:	443b      	add	r3, r7
 800828e:	f8d9 7000 	ldr.w	r7, [r9]
 8008292:	0c12      	lsrs	r2, r2, #16
 8008294:	0c3f      	lsrs	r7, r7, #16
 8008296:	fb0a 7202 	mla	r2, sl, r2, r7
 800829a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800829e:	b29b      	uxth	r3, r3
 80082a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082a4:	4565      	cmp	r5, ip
 80082a6:	f849 3b04 	str.w	r3, [r9], #4
 80082aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082ae:	d8e4      	bhi.n	800827a <__multiply+0xaa>
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	50e7      	str	r7, [r4, r3]
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082ba:	3104      	adds	r1, #4
 80082bc:	f1b9 0f00 	cmp.w	r9, #0
 80082c0:	d020      	beq.n	8008304 <__multiply+0x134>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	4647      	mov	r7, r8
 80082c6:	46a4      	mov	ip, r4
 80082c8:	f04f 0a00 	mov.w	sl, #0
 80082cc:	f8b7 b000 	ldrh.w	fp, [r7]
 80082d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80082d4:	fb09 220b 	mla	r2, r9, fp, r2
 80082d8:	4452      	add	r2, sl
 80082da:	b29b      	uxth	r3, r3
 80082dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082e0:	f84c 3b04 	str.w	r3, [ip], #4
 80082e4:	f857 3b04 	ldr.w	r3, [r7], #4
 80082e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082ec:	f8bc 3000 	ldrh.w	r3, [ip]
 80082f0:	fb09 330a 	mla	r3, r9, sl, r3
 80082f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80082f8:	42bd      	cmp	r5, r7
 80082fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082fe:	d8e5      	bhi.n	80082cc <__multiply+0xfc>
 8008300:	9a01      	ldr	r2, [sp, #4]
 8008302:	50a3      	str	r3, [r4, r2]
 8008304:	3404      	adds	r4, #4
 8008306:	e79f      	b.n	8008248 <__multiply+0x78>
 8008308:	3e01      	subs	r6, #1
 800830a:	e7a1      	b.n	8008250 <__multiply+0x80>
 800830c:	0800a829 	.word	0x0800a829
 8008310:	0800a83a 	.word	0x0800a83a

08008314 <__pow5mult>:
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	4615      	mov	r5, r2
 800831a:	f012 0203 	ands.w	r2, r2, #3
 800831e:	4607      	mov	r7, r0
 8008320:	460e      	mov	r6, r1
 8008322:	d007      	beq.n	8008334 <__pow5mult+0x20>
 8008324:	4c25      	ldr	r4, [pc, #148]	@ (80083bc <__pow5mult+0xa8>)
 8008326:	3a01      	subs	r2, #1
 8008328:	2300      	movs	r3, #0
 800832a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800832e:	f7ff fe5d 	bl	8007fec <__multadd>
 8008332:	4606      	mov	r6, r0
 8008334:	10ad      	asrs	r5, r5, #2
 8008336:	d03d      	beq.n	80083b4 <__pow5mult+0xa0>
 8008338:	69fc      	ldr	r4, [r7, #28]
 800833a:	b97c      	cbnz	r4, 800835c <__pow5mult+0x48>
 800833c:	2010      	movs	r0, #16
 800833e:	f7ff fd3d 	bl	8007dbc <malloc>
 8008342:	4602      	mov	r2, r0
 8008344:	61f8      	str	r0, [r7, #28]
 8008346:	b928      	cbnz	r0, 8008354 <__pow5mult+0x40>
 8008348:	4b1d      	ldr	r3, [pc, #116]	@ (80083c0 <__pow5mult+0xac>)
 800834a:	481e      	ldr	r0, [pc, #120]	@ (80083c4 <__pow5mult+0xb0>)
 800834c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008350:	f001 fbe6 	bl	8009b20 <__assert_func>
 8008354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008358:	6004      	str	r4, [r0, #0]
 800835a:	60c4      	str	r4, [r0, #12]
 800835c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008364:	b94c      	cbnz	r4, 800837a <__pow5mult+0x66>
 8008366:	f240 2171 	movw	r1, #625	@ 0x271
 800836a:	4638      	mov	r0, r7
 800836c:	f7ff ff1a 	bl	80081a4 <__i2b>
 8008370:	2300      	movs	r3, #0
 8008372:	f8c8 0008 	str.w	r0, [r8, #8]
 8008376:	4604      	mov	r4, r0
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	07eb      	lsls	r3, r5, #31
 8008380:	d50a      	bpl.n	8008398 <__pow5mult+0x84>
 8008382:	4631      	mov	r1, r6
 8008384:	4622      	mov	r2, r4
 8008386:	4638      	mov	r0, r7
 8008388:	f7ff ff22 	bl	80081d0 <__multiply>
 800838c:	4631      	mov	r1, r6
 800838e:	4680      	mov	r8, r0
 8008390:	4638      	mov	r0, r7
 8008392:	f7ff fe09 	bl	8007fa8 <_Bfree>
 8008396:	4646      	mov	r6, r8
 8008398:	106d      	asrs	r5, r5, #1
 800839a:	d00b      	beq.n	80083b4 <__pow5mult+0xa0>
 800839c:	6820      	ldr	r0, [r4, #0]
 800839e:	b938      	cbnz	r0, 80083b0 <__pow5mult+0x9c>
 80083a0:	4622      	mov	r2, r4
 80083a2:	4621      	mov	r1, r4
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff ff13 	bl	80081d0 <__multiply>
 80083aa:	6020      	str	r0, [r4, #0]
 80083ac:	f8c0 9000 	str.w	r9, [r0]
 80083b0:	4604      	mov	r4, r0
 80083b2:	e7e4      	b.n	800837e <__pow5mult+0x6a>
 80083b4:	4630      	mov	r0, r6
 80083b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ba:	bf00      	nop
 80083bc:	0800a94c 	.word	0x0800a94c
 80083c0:	0800a7ba 	.word	0x0800a7ba
 80083c4:	0800a83a 	.word	0x0800a83a

080083c8 <__lshift>:
 80083c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	460c      	mov	r4, r1
 80083ce:	6849      	ldr	r1, [r1, #4]
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	4607      	mov	r7, r0
 80083da:	4691      	mov	r9, r2
 80083dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e0:	f108 0601 	add.w	r6, r8, #1
 80083e4:	42b3      	cmp	r3, r6
 80083e6:	db0b      	blt.n	8008400 <__lshift+0x38>
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7ff fd9d 	bl	8007f28 <_Balloc>
 80083ee:	4605      	mov	r5, r0
 80083f0:	b948      	cbnz	r0, 8008406 <__lshift+0x3e>
 80083f2:	4602      	mov	r2, r0
 80083f4:	4b28      	ldr	r3, [pc, #160]	@ (8008498 <__lshift+0xd0>)
 80083f6:	4829      	ldr	r0, [pc, #164]	@ (800849c <__lshift+0xd4>)
 80083f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083fc:	f001 fb90 	bl	8009b20 <__assert_func>
 8008400:	3101      	adds	r1, #1
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	e7ee      	b.n	80083e4 <__lshift+0x1c>
 8008406:	2300      	movs	r3, #0
 8008408:	f100 0114 	add.w	r1, r0, #20
 800840c:	f100 0210 	add.w	r2, r0, #16
 8008410:	4618      	mov	r0, r3
 8008412:	4553      	cmp	r3, sl
 8008414:	db33      	blt.n	800847e <__lshift+0xb6>
 8008416:	6920      	ldr	r0, [r4, #16]
 8008418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800841c:	f104 0314 	add.w	r3, r4, #20
 8008420:	f019 091f 	ands.w	r9, r9, #31
 8008424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800842c:	d02b      	beq.n	8008486 <__lshift+0xbe>
 800842e:	f1c9 0e20 	rsb	lr, r9, #32
 8008432:	468a      	mov	sl, r1
 8008434:	2200      	movs	r2, #0
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	fa00 f009 	lsl.w	r0, r0, r9
 800843c:	4310      	orrs	r0, r2
 800843e:	f84a 0b04 	str.w	r0, [sl], #4
 8008442:	f853 2b04 	ldr.w	r2, [r3], #4
 8008446:	459c      	cmp	ip, r3
 8008448:	fa22 f20e 	lsr.w	r2, r2, lr
 800844c:	d8f3      	bhi.n	8008436 <__lshift+0x6e>
 800844e:	ebac 0304 	sub.w	r3, ip, r4
 8008452:	3b15      	subs	r3, #21
 8008454:	f023 0303 	bic.w	r3, r3, #3
 8008458:	3304      	adds	r3, #4
 800845a:	f104 0015 	add.w	r0, r4, #21
 800845e:	4560      	cmp	r0, ip
 8008460:	bf88      	it	hi
 8008462:	2304      	movhi	r3, #4
 8008464:	50ca      	str	r2, [r1, r3]
 8008466:	b10a      	cbz	r2, 800846c <__lshift+0xa4>
 8008468:	f108 0602 	add.w	r6, r8, #2
 800846c:	3e01      	subs	r6, #1
 800846e:	4638      	mov	r0, r7
 8008470:	612e      	str	r6, [r5, #16]
 8008472:	4621      	mov	r1, r4
 8008474:	f7ff fd98 	bl	8007fa8 <_Bfree>
 8008478:	4628      	mov	r0, r5
 800847a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008482:	3301      	adds	r3, #1
 8008484:	e7c5      	b.n	8008412 <__lshift+0x4a>
 8008486:	3904      	subs	r1, #4
 8008488:	f853 2b04 	ldr.w	r2, [r3], #4
 800848c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008490:	459c      	cmp	ip, r3
 8008492:	d8f9      	bhi.n	8008488 <__lshift+0xc0>
 8008494:	e7ea      	b.n	800846c <__lshift+0xa4>
 8008496:	bf00      	nop
 8008498:	0800a829 	.word	0x0800a829
 800849c:	0800a83a 	.word	0x0800a83a

080084a0 <__mcmp>:
 80084a0:	690a      	ldr	r2, [r1, #16]
 80084a2:	4603      	mov	r3, r0
 80084a4:	6900      	ldr	r0, [r0, #16]
 80084a6:	1a80      	subs	r0, r0, r2
 80084a8:	b530      	push	{r4, r5, lr}
 80084aa:	d10e      	bne.n	80084ca <__mcmp+0x2a>
 80084ac:	3314      	adds	r3, #20
 80084ae:	3114      	adds	r1, #20
 80084b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084c0:	4295      	cmp	r5, r2
 80084c2:	d003      	beq.n	80084cc <__mcmp+0x2c>
 80084c4:	d205      	bcs.n	80084d2 <__mcmp+0x32>
 80084c6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ca:	bd30      	pop	{r4, r5, pc}
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d3f3      	bcc.n	80084b8 <__mcmp+0x18>
 80084d0:	e7fb      	b.n	80084ca <__mcmp+0x2a>
 80084d2:	2001      	movs	r0, #1
 80084d4:	e7f9      	b.n	80084ca <__mcmp+0x2a>
	...

080084d8 <__mdiff>:
 80084d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	4689      	mov	r9, r1
 80084de:	4606      	mov	r6, r0
 80084e0:	4611      	mov	r1, r2
 80084e2:	4648      	mov	r0, r9
 80084e4:	4614      	mov	r4, r2
 80084e6:	f7ff ffdb 	bl	80084a0 <__mcmp>
 80084ea:	1e05      	subs	r5, r0, #0
 80084ec:	d112      	bne.n	8008514 <__mdiff+0x3c>
 80084ee:	4629      	mov	r1, r5
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff fd19 	bl	8007f28 <_Balloc>
 80084f6:	4602      	mov	r2, r0
 80084f8:	b928      	cbnz	r0, 8008506 <__mdiff+0x2e>
 80084fa:	4b3f      	ldr	r3, [pc, #252]	@ (80085f8 <__mdiff+0x120>)
 80084fc:	f240 2137 	movw	r1, #567	@ 0x237
 8008500:	483e      	ldr	r0, [pc, #248]	@ (80085fc <__mdiff+0x124>)
 8008502:	f001 fb0d 	bl	8009b20 <__assert_func>
 8008506:	2301      	movs	r3, #1
 8008508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800850c:	4610      	mov	r0, r2
 800850e:	b003      	add	sp, #12
 8008510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008514:	bfbc      	itt	lt
 8008516:	464b      	movlt	r3, r9
 8008518:	46a1      	movlt	r9, r4
 800851a:	4630      	mov	r0, r6
 800851c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008520:	bfba      	itte	lt
 8008522:	461c      	movlt	r4, r3
 8008524:	2501      	movlt	r5, #1
 8008526:	2500      	movge	r5, #0
 8008528:	f7ff fcfe 	bl	8007f28 <_Balloc>
 800852c:	4602      	mov	r2, r0
 800852e:	b918      	cbnz	r0, 8008538 <__mdiff+0x60>
 8008530:	4b31      	ldr	r3, [pc, #196]	@ (80085f8 <__mdiff+0x120>)
 8008532:	f240 2145 	movw	r1, #581	@ 0x245
 8008536:	e7e3      	b.n	8008500 <__mdiff+0x28>
 8008538:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800853c:	6926      	ldr	r6, [r4, #16]
 800853e:	60c5      	str	r5, [r0, #12]
 8008540:	f109 0310 	add.w	r3, r9, #16
 8008544:	f109 0514 	add.w	r5, r9, #20
 8008548:	f104 0e14 	add.w	lr, r4, #20
 800854c:	f100 0b14 	add.w	fp, r0, #20
 8008550:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008554:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	46d9      	mov	r9, fp
 800855c:	f04f 0c00 	mov.w	ip, #0
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008566:	f853 af04 	ldr.w	sl, [r3, #4]!
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	fa1f f38a 	uxth.w	r3, sl
 8008570:	4619      	mov	r1, r3
 8008572:	b283      	uxth	r3, r0
 8008574:	1acb      	subs	r3, r1, r3
 8008576:	0c00      	lsrs	r0, r0, #16
 8008578:	4463      	add	r3, ip
 800857a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800857e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008582:	b29b      	uxth	r3, r3
 8008584:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008588:	4576      	cmp	r6, lr
 800858a:	f849 3b04 	str.w	r3, [r9], #4
 800858e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008592:	d8e5      	bhi.n	8008560 <__mdiff+0x88>
 8008594:	1b33      	subs	r3, r6, r4
 8008596:	3b15      	subs	r3, #21
 8008598:	f023 0303 	bic.w	r3, r3, #3
 800859c:	3415      	adds	r4, #21
 800859e:	3304      	adds	r3, #4
 80085a0:	42a6      	cmp	r6, r4
 80085a2:	bf38      	it	cc
 80085a4:	2304      	movcc	r3, #4
 80085a6:	441d      	add	r5, r3
 80085a8:	445b      	add	r3, fp
 80085aa:	461e      	mov	r6, r3
 80085ac:	462c      	mov	r4, r5
 80085ae:	4544      	cmp	r4, r8
 80085b0:	d30e      	bcc.n	80085d0 <__mdiff+0xf8>
 80085b2:	f108 0103 	add.w	r1, r8, #3
 80085b6:	1b49      	subs	r1, r1, r5
 80085b8:	f021 0103 	bic.w	r1, r1, #3
 80085bc:	3d03      	subs	r5, #3
 80085be:	45a8      	cmp	r8, r5
 80085c0:	bf38      	it	cc
 80085c2:	2100      	movcc	r1, #0
 80085c4:	440b      	add	r3, r1
 80085c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085ca:	b191      	cbz	r1, 80085f2 <__mdiff+0x11a>
 80085cc:	6117      	str	r7, [r2, #16]
 80085ce:	e79d      	b.n	800850c <__mdiff+0x34>
 80085d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80085d4:	46e6      	mov	lr, ip
 80085d6:	0c08      	lsrs	r0, r1, #16
 80085d8:	fa1c fc81 	uxtah	ip, ip, r1
 80085dc:	4471      	add	r1, lr
 80085de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085e2:	b289      	uxth	r1, r1
 80085e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085e8:	f846 1b04 	str.w	r1, [r6], #4
 80085ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085f0:	e7dd      	b.n	80085ae <__mdiff+0xd6>
 80085f2:	3f01      	subs	r7, #1
 80085f4:	e7e7      	b.n	80085c6 <__mdiff+0xee>
 80085f6:	bf00      	nop
 80085f8:	0800a829 	.word	0x0800a829
 80085fc:	0800a83a 	.word	0x0800a83a

08008600 <__ulp>:
 8008600:	b082      	sub	sp, #8
 8008602:	ed8d 0b00 	vstr	d0, [sp]
 8008606:	9a01      	ldr	r2, [sp, #4]
 8008608:	4b0f      	ldr	r3, [pc, #60]	@ (8008648 <__ulp+0x48>)
 800860a:	4013      	ands	r3, r2
 800860c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008610:	2b00      	cmp	r3, #0
 8008612:	dc08      	bgt.n	8008626 <__ulp+0x26>
 8008614:	425b      	negs	r3, r3
 8008616:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800861a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800861e:	da04      	bge.n	800862a <__ulp+0x2a>
 8008620:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008624:	4113      	asrs	r3, r2
 8008626:	2200      	movs	r2, #0
 8008628:	e008      	b.n	800863c <__ulp+0x3c>
 800862a:	f1a2 0314 	sub.w	r3, r2, #20
 800862e:	2b1e      	cmp	r3, #30
 8008630:	bfda      	itte	le
 8008632:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008636:	40da      	lsrle	r2, r3
 8008638:	2201      	movgt	r2, #1
 800863a:	2300      	movs	r3, #0
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	ec41 0b10 	vmov	d0, r0, r1
 8008644:	b002      	add	sp, #8
 8008646:	4770      	bx	lr
 8008648:	7ff00000 	.word	0x7ff00000

0800864c <__b2d>:
 800864c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008650:	6906      	ldr	r6, [r0, #16]
 8008652:	f100 0814 	add.w	r8, r0, #20
 8008656:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800865a:	1f37      	subs	r7, r6, #4
 800865c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008660:	4610      	mov	r0, r2
 8008662:	f7ff fd53 	bl	800810c <__hi0bits>
 8008666:	f1c0 0320 	rsb	r3, r0, #32
 800866a:	280a      	cmp	r0, #10
 800866c:	600b      	str	r3, [r1, #0]
 800866e:	491b      	ldr	r1, [pc, #108]	@ (80086dc <__b2d+0x90>)
 8008670:	dc15      	bgt.n	800869e <__b2d+0x52>
 8008672:	f1c0 0c0b 	rsb	ip, r0, #11
 8008676:	fa22 f30c 	lsr.w	r3, r2, ip
 800867a:	45b8      	cmp	r8, r7
 800867c:	ea43 0501 	orr.w	r5, r3, r1
 8008680:	bf34      	ite	cc
 8008682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008686:	2300      	movcs	r3, #0
 8008688:	3015      	adds	r0, #21
 800868a:	fa02 f000 	lsl.w	r0, r2, r0
 800868e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008692:	4303      	orrs	r3, r0
 8008694:	461c      	mov	r4, r3
 8008696:	ec45 4b10 	vmov	d0, r4, r5
 800869a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869e:	45b8      	cmp	r8, r7
 80086a0:	bf3a      	itte	cc
 80086a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80086aa:	2300      	movcs	r3, #0
 80086ac:	380b      	subs	r0, #11
 80086ae:	d012      	beq.n	80086d6 <__b2d+0x8a>
 80086b0:	f1c0 0120 	rsb	r1, r0, #32
 80086b4:	fa23 f401 	lsr.w	r4, r3, r1
 80086b8:	4082      	lsls	r2, r0
 80086ba:	4322      	orrs	r2, r4
 80086bc:	4547      	cmp	r7, r8
 80086be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80086c2:	bf8c      	ite	hi
 80086c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80086c8:	2200      	movls	r2, #0
 80086ca:	4083      	lsls	r3, r0
 80086cc:	40ca      	lsrs	r2, r1
 80086ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80086d2:	4313      	orrs	r3, r2
 80086d4:	e7de      	b.n	8008694 <__b2d+0x48>
 80086d6:	ea42 0501 	orr.w	r5, r2, r1
 80086da:	e7db      	b.n	8008694 <__b2d+0x48>
 80086dc:	3ff00000 	.word	0x3ff00000

080086e0 <__d2b>:
 80086e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086e4:	460f      	mov	r7, r1
 80086e6:	2101      	movs	r1, #1
 80086e8:	ec59 8b10 	vmov	r8, r9, d0
 80086ec:	4616      	mov	r6, r2
 80086ee:	f7ff fc1b 	bl	8007f28 <_Balloc>
 80086f2:	4604      	mov	r4, r0
 80086f4:	b930      	cbnz	r0, 8008704 <__d2b+0x24>
 80086f6:	4602      	mov	r2, r0
 80086f8:	4b23      	ldr	r3, [pc, #140]	@ (8008788 <__d2b+0xa8>)
 80086fa:	4824      	ldr	r0, [pc, #144]	@ (800878c <__d2b+0xac>)
 80086fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008700:	f001 fa0e 	bl	8009b20 <__assert_func>
 8008704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800870c:	b10d      	cbz	r5, 8008712 <__d2b+0x32>
 800870e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	f1b8 0300 	subs.w	r3, r8, #0
 8008718:	d023      	beq.n	8008762 <__d2b+0x82>
 800871a:	4668      	mov	r0, sp
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	f7ff fd14 	bl	800814a <__lo0bits>
 8008722:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008726:	b1d0      	cbz	r0, 800875e <__d2b+0x7e>
 8008728:	f1c0 0320 	rsb	r3, r0, #32
 800872c:	fa02 f303 	lsl.w	r3, r2, r3
 8008730:	430b      	orrs	r3, r1
 8008732:	40c2      	lsrs	r2, r0
 8008734:	6163      	str	r3, [r4, #20]
 8008736:	9201      	str	r2, [sp, #4]
 8008738:	9b01      	ldr	r3, [sp, #4]
 800873a:	61a3      	str	r3, [r4, #24]
 800873c:	2b00      	cmp	r3, #0
 800873e:	bf0c      	ite	eq
 8008740:	2201      	moveq	r2, #1
 8008742:	2202      	movne	r2, #2
 8008744:	6122      	str	r2, [r4, #16]
 8008746:	b1a5      	cbz	r5, 8008772 <__d2b+0x92>
 8008748:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800874c:	4405      	add	r5, r0
 800874e:	603d      	str	r5, [r7, #0]
 8008750:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008754:	6030      	str	r0, [r6, #0]
 8008756:	4620      	mov	r0, r4
 8008758:	b003      	add	sp, #12
 800875a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800875e:	6161      	str	r1, [r4, #20]
 8008760:	e7ea      	b.n	8008738 <__d2b+0x58>
 8008762:	a801      	add	r0, sp, #4
 8008764:	f7ff fcf1 	bl	800814a <__lo0bits>
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	6163      	str	r3, [r4, #20]
 800876c:	3020      	adds	r0, #32
 800876e:	2201      	movs	r2, #1
 8008770:	e7e8      	b.n	8008744 <__d2b+0x64>
 8008772:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008776:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800877a:	6038      	str	r0, [r7, #0]
 800877c:	6918      	ldr	r0, [r3, #16]
 800877e:	f7ff fcc5 	bl	800810c <__hi0bits>
 8008782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008786:	e7e5      	b.n	8008754 <__d2b+0x74>
 8008788:	0800a829 	.word	0x0800a829
 800878c:	0800a83a 	.word	0x0800a83a

08008790 <__ratio>:
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	b085      	sub	sp, #20
 8008796:	e9cd 1000 	strd	r1, r0, [sp]
 800879a:	a902      	add	r1, sp, #8
 800879c:	f7ff ff56 	bl	800864c <__b2d>
 80087a0:	9800      	ldr	r0, [sp, #0]
 80087a2:	a903      	add	r1, sp, #12
 80087a4:	ec55 4b10 	vmov	r4, r5, d0
 80087a8:	f7ff ff50 	bl	800864c <__b2d>
 80087ac:	9b01      	ldr	r3, [sp, #4]
 80087ae:	6919      	ldr	r1, [r3, #16]
 80087b0:	9b00      	ldr	r3, [sp, #0]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	1ac9      	subs	r1, r1, r3
 80087b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	ec5b ab10 	vmov	sl, fp, d0
 80087c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	bfce      	itee	gt
 80087c8:	462a      	movgt	r2, r5
 80087ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087ce:	465a      	movle	r2, fp
 80087d0:	462f      	mov	r7, r5
 80087d2:	46d9      	mov	r9, fp
 80087d4:	bfcc      	ite	gt
 80087d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80087de:	464b      	mov	r3, r9
 80087e0:	4652      	mov	r2, sl
 80087e2:	4620      	mov	r0, r4
 80087e4:	4639      	mov	r1, r7
 80087e6:	f7f8 f881 	bl	80008ec <__aeabi_ddiv>
 80087ea:	ec41 0b10 	vmov	d0, r0, r1
 80087ee:	b005      	add	sp, #20
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087f4 <__copybits>:
 80087f4:	3901      	subs	r1, #1
 80087f6:	b570      	push	{r4, r5, r6, lr}
 80087f8:	1149      	asrs	r1, r1, #5
 80087fa:	6914      	ldr	r4, [r2, #16]
 80087fc:	3101      	adds	r1, #1
 80087fe:	f102 0314 	add.w	r3, r2, #20
 8008802:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008806:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800880a:	1f05      	subs	r5, r0, #4
 800880c:	42a3      	cmp	r3, r4
 800880e:	d30c      	bcc.n	800882a <__copybits+0x36>
 8008810:	1aa3      	subs	r3, r4, r2
 8008812:	3b11      	subs	r3, #17
 8008814:	f023 0303 	bic.w	r3, r3, #3
 8008818:	3211      	adds	r2, #17
 800881a:	42a2      	cmp	r2, r4
 800881c:	bf88      	it	hi
 800881e:	2300      	movhi	r3, #0
 8008820:	4418      	add	r0, r3
 8008822:	2300      	movs	r3, #0
 8008824:	4288      	cmp	r0, r1
 8008826:	d305      	bcc.n	8008834 <__copybits+0x40>
 8008828:	bd70      	pop	{r4, r5, r6, pc}
 800882a:	f853 6b04 	ldr.w	r6, [r3], #4
 800882e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008832:	e7eb      	b.n	800880c <__copybits+0x18>
 8008834:	f840 3b04 	str.w	r3, [r0], #4
 8008838:	e7f4      	b.n	8008824 <__copybits+0x30>

0800883a <__any_on>:
 800883a:	f100 0214 	add.w	r2, r0, #20
 800883e:	6900      	ldr	r0, [r0, #16]
 8008840:	114b      	asrs	r3, r1, #5
 8008842:	4298      	cmp	r0, r3
 8008844:	b510      	push	{r4, lr}
 8008846:	db11      	blt.n	800886c <__any_on+0x32>
 8008848:	dd0a      	ble.n	8008860 <__any_on+0x26>
 800884a:	f011 011f 	ands.w	r1, r1, #31
 800884e:	d007      	beq.n	8008860 <__any_on+0x26>
 8008850:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008854:	fa24 f001 	lsr.w	r0, r4, r1
 8008858:	fa00 f101 	lsl.w	r1, r0, r1
 800885c:	428c      	cmp	r4, r1
 800885e:	d10b      	bne.n	8008878 <__any_on+0x3e>
 8008860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008864:	4293      	cmp	r3, r2
 8008866:	d803      	bhi.n	8008870 <__any_on+0x36>
 8008868:	2000      	movs	r0, #0
 800886a:	bd10      	pop	{r4, pc}
 800886c:	4603      	mov	r3, r0
 800886e:	e7f7      	b.n	8008860 <__any_on+0x26>
 8008870:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008874:	2900      	cmp	r1, #0
 8008876:	d0f5      	beq.n	8008864 <__any_on+0x2a>
 8008878:	2001      	movs	r0, #1
 800887a:	e7f6      	b.n	800886a <__any_on+0x30>

0800887c <sulp>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4604      	mov	r4, r0
 8008880:	460d      	mov	r5, r1
 8008882:	ec45 4b10 	vmov	d0, r4, r5
 8008886:	4616      	mov	r6, r2
 8008888:	f7ff feba 	bl	8008600 <__ulp>
 800888c:	ec51 0b10 	vmov	r0, r1, d0
 8008890:	b17e      	cbz	r6, 80088b2 <sulp+0x36>
 8008892:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008896:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800889a:	2b00      	cmp	r3, #0
 800889c:	dd09      	ble.n	80088b2 <sulp+0x36>
 800889e:	051b      	lsls	r3, r3, #20
 80088a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80088a4:	2400      	movs	r4, #0
 80088a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80088aa:	4622      	mov	r2, r4
 80088ac:	462b      	mov	r3, r5
 80088ae:	f7f7 fef3 	bl	8000698 <__aeabi_dmul>
 80088b2:	ec41 0b10 	vmov	d0, r0, r1
 80088b6:	bd70      	pop	{r4, r5, r6, pc}

080088b8 <_strtod_l>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	b09f      	sub	sp, #124	@ 0x7c
 80088be:	460c      	mov	r4, r1
 80088c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80088c2:	2200      	movs	r2, #0
 80088c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80088c6:	9005      	str	r0, [sp, #20]
 80088c8:	f04f 0a00 	mov.w	sl, #0
 80088cc:	f04f 0b00 	mov.w	fp, #0
 80088d0:	460a      	mov	r2, r1
 80088d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80088d4:	7811      	ldrb	r1, [r2, #0]
 80088d6:	292b      	cmp	r1, #43	@ 0x2b
 80088d8:	d04a      	beq.n	8008970 <_strtod_l+0xb8>
 80088da:	d838      	bhi.n	800894e <_strtod_l+0x96>
 80088dc:	290d      	cmp	r1, #13
 80088de:	d832      	bhi.n	8008946 <_strtod_l+0x8e>
 80088e0:	2908      	cmp	r1, #8
 80088e2:	d832      	bhi.n	800894a <_strtod_l+0x92>
 80088e4:	2900      	cmp	r1, #0
 80088e6:	d03b      	beq.n	8008960 <_strtod_l+0xa8>
 80088e8:	2200      	movs	r2, #0
 80088ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80088ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80088ee:	782a      	ldrb	r2, [r5, #0]
 80088f0:	2a30      	cmp	r2, #48	@ 0x30
 80088f2:	f040 80b2 	bne.w	8008a5a <_strtod_l+0x1a2>
 80088f6:	786a      	ldrb	r2, [r5, #1]
 80088f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088fc:	2a58      	cmp	r2, #88	@ 0x58
 80088fe:	d16e      	bne.n	80089de <_strtod_l+0x126>
 8008900:	9302      	str	r3, [sp, #8]
 8008902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	ab1a      	add	r3, sp, #104	@ 0x68
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4a8f      	ldr	r2, [pc, #572]	@ (8008b48 <_strtod_l+0x290>)
 800890c:	9805      	ldr	r0, [sp, #20]
 800890e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008910:	a919      	add	r1, sp, #100	@ 0x64
 8008912:	f001 f99f 	bl	8009c54 <__gethex>
 8008916:	f010 060f 	ands.w	r6, r0, #15
 800891a:	4604      	mov	r4, r0
 800891c:	d005      	beq.n	800892a <_strtod_l+0x72>
 800891e:	2e06      	cmp	r6, #6
 8008920:	d128      	bne.n	8008974 <_strtod_l+0xbc>
 8008922:	3501      	adds	r5, #1
 8008924:	2300      	movs	r3, #0
 8008926:	9519      	str	r5, [sp, #100]	@ 0x64
 8008928:	930e      	str	r3, [sp, #56]	@ 0x38
 800892a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800892c:	2b00      	cmp	r3, #0
 800892e:	f040 858e 	bne.w	800944e <_strtod_l+0xb96>
 8008932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008934:	b1cb      	cbz	r3, 800896a <_strtod_l+0xb2>
 8008936:	4652      	mov	r2, sl
 8008938:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800893c:	ec43 2b10 	vmov	d0, r2, r3
 8008940:	b01f      	add	sp, #124	@ 0x7c
 8008942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008946:	2920      	cmp	r1, #32
 8008948:	d1ce      	bne.n	80088e8 <_strtod_l+0x30>
 800894a:	3201      	adds	r2, #1
 800894c:	e7c1      	b.n	80088d2 <_strtod_l+0x1a>
 800894e:	292d      	cmp	r1, #45	@ 0x2d
 8008950:	d1ca      	bne.n	80088e8 <_strtod_l+0x30>
 8008952:	2101      	movs	r1, #1
 8008954:	910e      	str	r1, [sp, #56]	@ 0x38
 8008956:	1c51      	adds	r1, r2, #1
 8008958:	9119      	str	r1, [sp, #100]	@ 0x64
 800895a:	7852      	ldrb	r2, [r2, #1]
 800895c:	2a00      	cmp	r2, #0
 800895e:	d1c5      	bne.n	80088ec <_strtod_l+0x34>
 8008960:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008962:	9419      	str	r4, [sp, #100]	@ 0x64
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 8570 	bne.w	800944a <_strtod_l+0xb92>
 800896a:	4652      	mov	r2, sl
 800896c:	465b      	mov	r3, fp
 800896e:	e7e5      	b.n	800893c <_strtod_l+0x84>
 8008970:	2100      	movs	r1, #0
 8008972:	e7ef      	b.n	8008954 <_strtod_l+0x9c>
 8008974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008976:	b13a      	cbz	r2, 8008988 <_strtod_l+0xd0>
 8008978:	2135      	movs	r1, #53	@ 0x35
 800897a:	a81c      	add	r0, sp, #112	@ 0x70
 800897c:	f7ff ff3a 	bl	80087f4 <__copybits>
 8008980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008982:	9805      	ldr	r0, [sp, #20]
 8008984:	f7ff fb10 	bl	8007fa8 <_Bfree>
 8008988:	3e01      	subs	r6, #1
 800898a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800898c:	2e04      	cmp	r6, #4
 800898e:	d806      	bhi.n	800899e <_strtod_l+0xe6>
 8008990:	e8df f006 	tbb	[pc, r6]
 8008994:	201d0314 	.word	0x201d0314
 8008998:	14          	.byte	0x14
 8008999:	00          	.byte	0x00
 800899a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800899e:	05e1      	lsls	r1, r4, #23
 80089a0:	bf48      	it	mi
 80089a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80089a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089aa:	0d1b      	lsrs	r3, r3, #20
 80089ac:	051b      	lsls	r3, r3, #20
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1bb      	bne.n	800892a <_strtod_l+0x72>
 80089b2:	f7fe fb1d 	bl	8006ff0 <__errno>
 80089b6:	2322      	movs	r3, #34	@ 0x22
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	e7b6      	b.n	800892a <_strtod_l+0x72>
 80089bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80089c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80089c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80089c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80089cc:	e7e7      	b.n	800899e <_strtod_l+0xe6>
 80089ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008b50 <_strtod_l+0x298>
 80089d2:	e7e4      	b.n	800899e <_strtod_l+0xe6>
 80089d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80089d8:	f04f 3aff 	mov.w	sl, #4294967295
 80089dc:	e7df      	b.n	800899e <_strtod_l+0xe6>
 80089de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b30      	cmp	r3, #48	@ 0x30
 80089e8:	d0f9      	beq.n	80089de <_strtod_l+0x126>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d09d      	beq.n	800892a <_strtod_l+0x72>
 80089ee:	2301      	movs	r3, #1
 80089f0:	2700      	movs	r7, #0
 80089f2:	9308      	str	r3, [sp, #32]
 80089f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80089f8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80089fa:	46b9      	mov	r9, r7
 80089fc:	220a      	movs	r2, #10
 80089fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a00:	7805      	ldrb	r5, [r0, #0]
 8008a02:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a06:	b2d9      	uxtb	r1, r3
 8008a08:	2909      	cmp	r1, #9
 8008a0a:	d928      	bls.n	8008a5e <_strtod_l+0x1a6>
 8008a0c:	494f      	ldr	r1, [pc, #316]	@ (8008b4c <_strtod_l+0x294>)
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f001 f838 	bl	8009a84 <strncmp>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d032      	beq.n	8008a7e <_strtod_l+0x1c6>
 8008a18:	2000      	movs	r0, #0
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a1e:	464d      	mov	r5, r9
 8008a20:	4603      	mov	r3, r0
 8008a22:	2a65      	cmp	r2, #101	@ 0x65
 8008a24:	d001      	beq.n	8008a2a <_strtod_l+0x172>
 8008a26:	2a45      	cmp	r2, #69	@ 0x45
 8008a28:	d114      	bne.n	8008a54 <_strtod_l+0x19c>
 8008a2a:	b91d      	cbnz	r5, 8008a34 <_strtod_l+0x17c>
 8008a2c:	9a08      	ldr	r2, [sp, #32]
 8008a2e:	4302      	orrs	r2, r0
 8008a30:	d096      	beq.n	8008960 <_strtod_l+0xa8>
 8008a32:	2500      	movs	r5, #0
 8008a34:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008a36:	1c62      	adds	r2, r4, #1
 8008a38:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a3a:	7862      	ldrb	r2, [r4, #1]
 8008a3c:	2a2b      	cmp	r2, #43	@ 0x2b
 8008a3e:	d07a      	beq.n	8008b36 <_strtod_l+0x27e>
 8008a40:	2a2d      	cmp	r2, #45	@ 0x2d
 8008a42:	d07e      	beq.n	8008b42 <_strtod_l+0x28a>
 8008a44:	f04f 0c00 	mov.w	ip, #0
 8008a48:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008a4c:	2909      	cmp	r1, #9
 8008a4e:	f240 8085 	bls.w	8008b5c <_strtod_l+0x2a4>
 8008a52:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a54:	f04f 0800 	mov.w	r8, #0
 8008a58:	e0a5      	b.n	8008ba6 <_strtod_l+0x2ee>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e7c8      	b.n	80089f0 <_strtod_l+0x138>
 8008a5e:	f1b9 0f08 	cmp.w	r9, #8
 8008a62:	bfd8      	it	le
 8008a64:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008a66:	f100 0001 	add.w	r0, r0, #1
 8008a6a:	bfda      	itte	le
 8008a6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a70:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008a72:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008a76:	f109 0901 	add.w	r9, r9, #1
 8008a7a:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a7c:	e7bf      	b.n	80089fe <_strtod_l+0x146>
 8008a7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a84:	785a      	ldrb	r2, [r3, #1]
 8008a86:	f1b9 0f00 	cmp.w	r9, #0
 8008a8a:	d03b      	beq.n	8008b04 <_strtod_l+0x24c>
 8008a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a8e:	464d      	mov	r5, r9
 8008a90:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008a94:	2b09      	cmp	r3, #9
 8008a96:	d912      	bls.n	8008abe <_strtod_l+0x206>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e7c2      	b.n	8008a22 <_strtod_l+0x16a>
 8008a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aa2:	785a      	ldrb	r2, [r3, #1]
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	2a30      	cmp	r2, #48	@ 0x30
 8008aa8:	d0f8      	beq.n	8008a9c <_strtod_l+0x1e4>
 8008aaa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	f200 84d2 	bhi.w	8009458 <_strtod_l+0xba0>
 8008ab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ab6:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ab8:	2000      	movs	r0, #0
 8008aba:	930c      	str	r3, [sp, #48]	@ 0x30
 8008abc:	4605      	mov	r5, r0
 8008abe:	3a30      	subs	r2, #48	@ 0x30
 8008ac0:	f100 0301 	add.w	r3, r0, #1
 8008ac4:	d018      	beq.n	8008af8 <_strtod_l+0x240>
 8008ac6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ac8:	4419      	add	r1, r3
 8008aca:	910a      	str	r1, [sp, #40]	@ 0x28
 8008acc:	462e      	mov	r6, r5
 8008ace:	f04f 0e0a 	mov.w	lr, #10
 8008ad2:	1c71      	adds	r1, r6, #1
 8008ad4:	eba1 0c05 	sub.w	ip, r1, r5
 8008ad8:	4563      	cmp	r3, ip
 8008ada:	dc15      	bgt.n	8008b08 <_strtod_l+0x250>
 8008adc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008ae0:	182b      	adds	r3, r5, r0
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	f105 0501 	add.w	r5, r5, #1
 8008ae8:	4405      	add	r5, r0
 8008aea:	dc1a      	bgt.n	8008b22 <_strtod_l+0x26a>
 8008aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008aee:	230a      	movs	r3, #10
 8008af0:	fb03 2301 	mla	r3, r3, r1, r2
 8008af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008af6:	2300      	movs	r3, #0
 8008af8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008afa:	1c51      	adds	r1, r2, #1
 8008afc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008afe:	7852      	ldrb	r2, [r2, #1]
 8008b00:	4618      	mov	r0, r3
 8008b02:	e7c5      	b.n	8008a90 <_strtod_l+0x1d8>
 8008b04:	4648      	mov	r0, r9
 8008b06:	e7ce      	b.n	8008aa6 <_strtod_l+0x1ee>
 8008b08:	2e08      	cmp	r6, #8
 8008b0a:	dc05      	bgt.n	8008b18 <_strtod_l+0x260>
 8008b0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b0e:	fb0e f606 	mul.w	r6, lr, r6
 8008b12:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008b14:	460e      	mov	r6, r1
 8008b16:	e7dc      	b.n	8008ad2 <_strtod_l+0x21a>
 8008b18:	2910      	cmp	r1, #16
 8008b1a:	bfd8      	it	le
 8008b1c:	fb0e f707 	mulle.w	r7, lr, r7
 8008b20:	e7f8      	b.n	8008b14 <_strtod_l+0x25c>
 8008b22:	2b0f      	cmp	r3, #15
 8008b24:	bfdc      	itt	le
 8008b26:	230a      	movle	r3, #10
 8008b28:	fb03 2707 	mlale	r7, r3, r7, r2
 8008b2c:	e7e3      	b.n	8008af6 <_strtod_l+0x23e>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b32:	2301      	movs	r3, #1
 8008b34:	e77a      	b.n	8008a2c <_strtod_l+0x174>
 8008b36:	f04f 0c00 	mov.w	ip, #0
 8008b3a:	1ca2      	adds	r2, r4, #2
 8008b3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b3e:	78a2      	ldrb	r2, [r4, #2]
 8008b40:	e782      	b.n	8008a48 <_strtod_l+0x190>
 8008b42:	f04f 0c01 	mov.w	ip, #1
 8008b46:	e7f8      	b.n	8008b3a <_strtod_l+0x282>
 8008b48:	0800aa5c 	.word	0x0800aa5c
 8008b4c:	0800a893 	.word	0x0800a893
 8008b50:	7ff00000 	.word	0x7ff00000
 8008b54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b56:	1c51      	adds	r1, r2, #1
 8008b58:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b5a:	7852      	ldrb	r2, [r2, #1]
 8008b5c:	2a30      	cmp	r2, #48	@ 0x30
 8008b5e:	d0f9      	beq.n	8008b54 <_strtod_l+0x29c>
 8008b60:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008b64:	2908      	cmp	r1, #8
 8008b66:	f63f af75 	bhi.w	8008a54 <_strtod_l+0x19c>
 8008b6a:	3a30      	subs	r2, #48	@ 0x30
 8008b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008b72:	f04f 080a 	mov.w	r8, #10
 8008b76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b78:	1c56      	adds	r6, r2, #1
 8008b7a:	9619      	str	r6, [sp, #100]	@ 0x64
 8008b7c:	7852      	ldrb	r2, [r2, #1]
 8008b7e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008b82:	f1be 0f09 	cmp.w	lr, #9
 8008b86:	d939      	bls.n	8008bfc <_strtod_l+0x344>
 8008b88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b8a:	1a76      	subs	r6, r6, r1
 8008b8c:	2e08      	cmp	r6, #8
 8008b8e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008b92:	dc03      	bgt.n	8008b9c <_strtod_l+0x2e4>
 8008b94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b96:	4588      	cmp	r8, r1
 8008b98:	bfa8      	it	ge
 8008b9a:	4688      	movge	r8, r1
 8008b9c:	f1bc 0f00 	cmp.w	ip, #0
 8008ba0:	d001      	beq.n	8008ba6 <_strtod_l+0x2ee>
 8008ba2:	f1c8 0800 	rsb	r8, r8, #0
 8008ba6:	2d00      	cmp	r5, #0
 8008ba8:	d14e      	bne.n	8008c48 <_strtod_l+0x390>
 8008baa:	9908      	ldr	r1, [sp, #32]
 8008bac:	4308      	orrs	r0, r1
 8008bae:	f47f aebc 	bne.w	800892a <_strtod_l+0x72>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f47f aed4 	bne.w	8008960 <_strtod_l+0xa8>
 8008bb8:	2a69      	cmp	r2, #105	@ 0x69
 8008bba:	d028      	beq.n	8008c0e <_strtod_l+0x356>
 8008bbc:	dc25      	bgt.n	8008c0a <_strtod_l+0x352>
 8008bbe:	2a49      	cmp	r2, #73	@ 0x49
 8008bc0:	d025      	beq.n	8008c0e <_strtod_l+0x356>
 8008bc2:	2a4e      	cmp	r2, #78	@ 0x4e
 8008bc4:	f47f aecc 	bne.w	8008960 <_strtod_l+0xa8>
 8008bc8:	499a      	ldr	r1, [pc, #616]	@ (8008e34 <_strtod_l+0x57c>)
 8008bca:	a819      	add	r0, sp, #100	@ 0x64
 8008bcc:	f001 fa64 	bl	800a098 <__match>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f43f aec5 	beq.w	8008960 <_strtod_l+0xa8>
 8008bd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b28      	cmp	r3, #40	@ 0x28
 8008bdc:	d12e      	bne.n	8008c3c <_strtod_l+0x384>
 8008bde:	4996      	ldr	r1, [pc, #600]	@ (8008e38 <_strtod_l+0x580>)
 8008be0:	aa1c      	add	r2, sp, #112	@ 0x70
 8008be2:	a819      	add	r0, sp, #100	@ 0x64
 8008be4:	f001 fa6c 	bl	800a0c0 <__hexnan>
 8008be8:	2805      	cmp	r0, #5
 8008bea:	d127      	bne.n	8008c3c <_strtod_l+0x384>
 8008bec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008bee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008bf2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008bf6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008bfa:	e696      	b.n	800892a <_strtod_l+0x72>
 8008bfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bfe:	fb08 2101 	mla	r1, r8, r1, r2
 8008c02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c08:	e7b5      	b.n	8008b76 <_strtod_l+0x2be>
 8008c0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c0c:	e7da      	b.n	8008bc4 <_strtod_l+0x30c>
 8008c0e:	498b      	ldr	r1, [pc, #556]	@ (8008e3c <_strtod_l+0x584>)
 8008c10:	a819      	add	r0, sp, #100	@ 0x64
 8008c12:	f001 fa41 	bl	800a098 <__match>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f43f aea2 	beq.w	8008960 <_strtod_l+0xa8>
 8008c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c1e:	4988      	ldr	r1, [pc, #544]	@ (8008e40 <_strtod_l+0x588>)
 8008c20:	3b01      	subs	r3, #1
 8008c22:	a819      	add	r0, sp, #100	@ 0x64
 8008c24:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c26:	f001 fa37 	bl	800a098 <__match>
 8008c2a:	b910      	cbnz	r0, 8008c32 <_strtod_l+0x37a>
 8008c2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c2e:	3301      	adds	r3, #1
 8008c30:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c32:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008e50 <_strtod_l+0x598>
 8008c36:	f04f 0a00 	mov.w	sl, #0
 8008c3a:	e676      	b.n	800892a <_strtod_l+0x72>
 8008c3c:	4881      	ldr	r0, [pc, #516]	@ (8008e44 <_strtod_l+0x58c>)
 8008c3e:	f000 ff67 	bl	8009b10 <nan>
 8008c42:	ec5b ab10 	vmov	sl, fp, d0
 8008c46:	e670      	b.n	800892a <_strtod_l+0x72>
 8008c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008c4c:	eba8 0303 	sub.w	r3, r8, r3
 8008c50:	f1b9 0f00 	cmp.w	r9, #0
 8008c54:	bf08      	it	eq
 8008c56:	46a9      	moveq	r9, r5
 8008c58:	2d10      	cmp	r5, #16
 8008c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c5c:	462c      	mov	r4, r5
 8008c5e:	bfa8      	it	ge
 8008c60:	2410      	movge	r4, #16
 8008c62:	f7f7 fc9f 	bl	80005a4 <__aeabi_ui2d>
 8008c66:	2d09      	cmp	r5, #9
 8008c68:	4682      	mov	sl, r0
 8008c6a:	468b      	mov	fp, r1
 8008c6c:	dc13      	bgt.n	8008c96 <_strtod_l+0x3de>
 8008c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f43f ae5a 	beq.w	800892a <_strtod_l+0x72>
 8008c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c78:	dd78      	ble.n	8008d6c <_strtod_l+0x4b4>
 8008c7a:	2b16      	cmp	r3, #22
 8008c7c:	dc5f      	bgt.n	8008d3e <_strtod_l+0x486>
 8008c7e:	4972      	ldr	r1, [pc, #456]	@ (8008e48 <_strtod_l+0x590>)
 8008c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c88:	4652      	mov	r2, sl
 8008c8a:	465b      	mov	r3, fp
 8008c8c:	f7f7 fd04 	bl	8000698 <__aeabi_dmul>
 8008c90:	4682      	mov	sl, r0
 8008c92:	468b      	mov	fp, r1
 8008c94:	e649      	b.n	800892a <_strtod_l+0x72>
 8008c96:	4b6c      	ldr	r3, [pc, #432]	@ (8008e48 <_strtod_l+0x590>)
 8008c98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ca0:	f7f7 fcfa 	bl	8000698 <__aeabi_dmul>
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	468b      	mov	fp, r1
 8008caa:	f7f7 fc7b 	bl	80005a4 <__aeabi_ui2d>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	f7f7 fb39 	bl	800032c <__adddf3>
 8008cba:	2d0f      	cmp	r5, #15
 8008cbc:	4682      	mov	sl, r0
 8008cbe:	468b      	mov	fp, r1
 8008cc0:	ddd5      	ble.n	8008c6e <_strtod_l+0x3b6>
 8008cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc4:	1b2c      	subs	r4, r5, r4
 8008cc6:	441c      	add	r4, r3
 8008cc8:	2c00      	cmp	r4, #0
 8008cca:	f340 8093 	ble.w	8008df4 <_strtod_l+0x53c>
 8008cce:	f014 030f 	ands.w	r3, r4, #15
 8008cd2:	d00a      	beq.n	8008cea <_strtod_l+0x432>
 8008cd4:	495c      	ldr	r1, [pc, #368]	@ (8008e48 <_strtod_l+0x590>)
 8008cd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cda:	4652      	mov	r2, sl
 8008cdc:	465b      	mov	r3, fp
 8008cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce2:	f7f7 fcd9 	bl	8000698 <__aeabi_dmul>
 8008ce6:	4682      	mov	sl, r0
 8008ce8:	468b      	mov	fp, r1
 8008cea:	f034 040f 	bics.w	r4, r4, #15
 8008cee:	d073      	beq.n	8008dd8 <_strtod_l+0x520>
 8008cf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008cf4:	dd49      	ble.n	8008d8a <_strtod_l+0x4d2>
 8008cf6:	2400      	movs	r4, #0
 8008cf8:	46a0      	mov	r8, r4
 8008cfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008cfc:	46a1      	mov	r9, r4
 8008cfe:	9a05      	ldr	r2, [sp, #20]
 8008d00:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008e50 <_strtod_l+0x598>
 8008d04:	2322      	movs	r3, #34	@ 0x22
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	f04f 0a00 	mov.w	sl, #0
 8008d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f43f ae0b 	beq.w	800892a <_strtod_l+0x72>
 8008d14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d16:	9805      	ldr	r0, [sp, #20]
 8008d18:	f7ff f946 	bl	8007fa8 <_Bfree>
 8008d1c:	9805      	ldr	r0, [sp, #20]
 8008d1e:	4649      	mov	r1, r9
 8008d20:	f7ff f942 	bl	8007fa8 <_Bfree>
 8008d24:	9805      	ldr	r0, [sp, #20]
 8008d26:	4641      	mov	r1, r8
 8008d28:	f7ff f93e 	bl	8007fa8 <_Bfree>
 8008d2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d2e:	9805      	ldr	r0, [sp, #20]
 8008d30:	f7ff f93a 	bl	8007fa8 <_Bfree>
 8008d34:	9805      	ldr	r0, [sp, #20]
 8008d36:	4621      	mov	r1, r4
 8008d38:	f7ff f936 	bl	8007fa8 <_Bfree>
 8008d3c:	e5f5      	b.n	800892a <_strtod_l+0x72>
 8008d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008d44:	4293      	cmp	r3, r2
 8008d46:	dbbc      	blt.n	8008cc2 <_strtod_l+0x40a>
 8008d48:	4c3f      	ldr	r4, [pc, #252]	@ (8008e48 <_strtod_l+0x590>)
 8008d4a:	f1c5 050f 	rsb	r5, r5, #15
 8008d4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d52:	4652      	mov	r2, sl
 8008d54:	465b      	mov	r3, fp
 8008d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d5a:	f7f7 fc9d 	bl	8000698 <__aeabi_dmul>
 8008d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d60:	1b5d      	subs	r5, r3, r5
 8008d62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d6a:	e78f      	b.n	8008c8c <_strtod_l+0x3d4>
 8008d6c:	3316      	adds	r3, #22
 8008d6e:	dba8      	blt.n	8008cc2 <_strtod_l+0x40a>
 8008d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d72:	eba3 0808 	sub.w	r8, r3, r8
 8008d76:	4b34      	ldr	r3, [pc, #208]	@ (8008e48 <_strtod_l+0x590>)
 8008d78:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008d7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008d80:	4650      	mov	r0, sl
 8008d82:	4659      	mov	r1, fp
 8008d84:	f7f7 fdb2 	bl	80008ec <__aeabi_ddiv>
 8008d88:	e782      	b.n	8008c90 <_strtod_l+0x3d8>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4f2f      	ldr	r7, [pc, #188]	@ (8008e4c <_strtod_l+0x594>)
 8008d8e:	1124      	asrs	r4, r4, #4
 8008d90:	4650      	mov	r0, sl
 8008d92:	4659      	mov	r1, fp
 8008d94:	461e      	mov	r6, r3
 8008d96:	2c01      	cmp	r4, #1
 8008d98:	dc21      	bgt.n	8008dde <_strtod_l+0x526>
 8008d9a:	b10b      	cbz	r3, 8008da0 <_strtod_l+0x4e8>
 8008d9c:	4682      	mov	sl, r0
 8008d9e:	468b      	mov	fp, r1
 8008da0:	492a      	ldr	r1, [pc, #168]	@ (8008e4c <_strtod_l+0x594>)
 8008da2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008da6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008daa:	4652      	mov	r2, sl
 8008dac:	465b      	mov	r3, fp
 8008dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db2:	f7f7 fc71 	bl	8000698 <__aeabi_dmul>
 8008db6:	4b26      	ldr	r3, [pc, #152]	@ (8008e50 <_strtod_l+0x598>)
 8008db8:	460a      	mov	r2, r1
 8008dba:	400b      	ands	r3, r1
 8008dbc:	4925      	ldr	r1, [pc, #148]	@ (8008e54 <_strtod_l+0x59c>)
 8008dbe:	428b      	cmp	r3, r1
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	d898      	bhi.n	8008cf6 <_strtod_l+0x43e>
 8008dc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	bf86      	itte	hi
 8008dcc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008e58 <_strtod_l+0x5a0>
 8008dd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8008dd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9308      	str	r3, [sp, #32]
 8008ddc:	e076      	b.n	8008ecc <_strtod_l+0x614>
 8008dde:	07e2      	lsls	r2, r4, #31
 8008de0:	d504      	bpl.n	8008dec <_strtod_l+0x534>
 8008de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de6:	f7f7 fc57 	bl	8000698 <__aeabi_dmul>
 8008dea:	2301      	movs	r3, #1
 8008dec:	3601      	adds	r6, #1
 8008dee:	1064      	asrs	r4, r4, #1
 8008df0:	3708      	adds	r7, #8
 8008df2:	e7d0      	b.n	8008d96 <_strtod_l+0x4de>
 8008df4:	d0f0      	beq.n	8008dd8 <_strtod_l+0x520>
 8008df6:	4264      	negs	r4, r4
 8008df8:	f014 020f 	ands.w	r2, r4, #15
 8008dfc:	d00a      	beq.n	8008e14 <_strtod_l+0x55c>
 8008dfe:	4b12      	ldr	r3, [pc, #72]	@ (8008e48 <_strtod_l+0x590>)
 8008e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e04:	4650      	mov	r0, sl
 8008e06:	4659      	mov	r1, fp
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	f7f7 fd6e 	bl	80008ec <__aeabi_ddiv>
 8008e10:	4682      	mov	sl, r0
 8008e12:	468b      	mov	fp, r1
 8008e14:	1124      	asrs	r4, r4, #4
 8008e16:	d0df      	beq.n	8008dd8 <_strtod_l+0x520>
 8008e18:	2c1f      	cmp	r4, #31
 8008e1a:	dd1f      	ble.n	8008e5c <_strtod_l+0x5a4>
 8008e1c:	2400      	movs	r4, #0
 8008e1e:	46a0      	mov	r8, r4
 8008e20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e22:	46a1      	mov	r9, r4
 8008e24:	9a05      	ldr	r2, [sp, #20]
 8008e26:	2322      	movs	r3, #34	@ 0x22
 8008e28:	f04f 0a00 	mov.w	sl, #0
 8008e2c:	f04f 0b00 	mov.w	fp, #0
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	e76b      	b.n	8008d0c <_strtod_l+0x454>
 8008e34:	0800a781 	.word	0x0800a781
 8008e38:	0800aa48 	.word	0x0800aa48
 8008e3c:	0800a779 	.word	0x0800a779
 8008e40:	0800a7b0 	.word	0x0800a7b0
 8008e44:	0800a8e9 	.word	0x0800a8e9
 8008e48:	0800a980 	.word	0x0800a980
 8008e4c:	0800a958 	.word	0x0800a958
 8008e50:	7ff00000 	.word	0x7ff00000
 8008e54:	7ca00000 	.word	0x7ca00000
 8008e58:	7fefffff 	.word	0x7fefffff
 8008e5c:	f014 0310 	ands.w	r3, r4, #16
 8008e60:	bf18      	it	ne
 8008e62:	236a      	movne	r3, #106	@ 0x6a
 8008e64:	4ea9      	ldr	r6, [pc, #676]	@ (800910c <_strtod_l+0x854>)
 8008e66:	9308      	str	r3, [sp, #32]
 8008e68:	4650      	mov	r0, sl
 8008e6a:	4659      	mov	r1, fp
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	07e7      	lsls	r7, r4, #31
 8008e70:	d504      	bpl.n	8008e7c <_strtod_l+0x5c4>
 8008e72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e76:	f7f7 fc0f 	bl	8000698 <__aeabi_dmul>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	1064      	asrs	r4, r4, #1
 8008e7e:	f106 0608 	add.w	r6, r6, #8
 8008e82:	d1f4      	bne.n	8008e6e <_strtod_l+0x5b6>
 8008e84:	b10b      	cbz	r3, 8008e8a <_strtod_l+0x5d2>
 8008e86:	4682      	mov	sl, r0
 8008e88:	468b      	mov	fp, r1
 8008e8a:	9b08      	ldr	r3, [sp, #32]
 8008e8c:	b1b3      	cbz	r3, 8008ebc <_strtod_l+0x604>
 8008e8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008e92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	4659      	mov	r1, fp
 8008e9a:	dd0f      	ble.n	8008ebc <_strtod_l+0x604>
 8008e9c:	2b1f      	cmp	r3, #31
 8008e9e:	dd56      	ble.n	8008f4e <_strtod_l+0x696>
 8008ea0:	2b34      	cmp	r3, #52	@ 0x34
 8008ea2:	bfde      	ittt	le
 8008ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8008ea8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008eac:	4093      	lslle	r3, r2
 8008eae:	f04f 0a00 	mov.w	sl, #0
 8008eb2:	bfcc      	ite	gt
 8008eb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008eb8:	ea03 0b01 	andle.w	fp, r3, r1
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	f7f7 fe50 	bl	8000b68 <__aeabi_dcmpeq>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d1a7      	bne.n	8008e1c <_strtod_l+0x564>
 8008ecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008ed2:	9805      	ldr	r0, [sp, #20]
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	464a      	mov	r2, r9
 8008ed8:	f7ff f8ce 	bl	8008078 <__s2b>
 8008edc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f43f af09 	beq.w	8008cf6 <_strtod_l+0x43e>
 8008ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	eba3 0308 	sub.w	r3, r3, r8
 8008eee:	bfa8      	it	ge
 8008ef0:	2300      	movge	r3, #0
 8008ef2:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ef4:	2400      	movs	r4, #0
 8008ef6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008efa:	9316      	str	r3, [sp, #88]	@ 0x58
 8008efc:	46a0      	mov	r8, r4
 8008efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f00:	9805      	ldr	r0, [sp, #20]
 8008f02:	6859      	ldr	r1, [r3, #4]
 8008f04:	f7ff f810 	bl	8007f28 <_Balloc>
 8008f08:	4681      	mov	r9, r0
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	f43f aef7 	beq.w	8008cfe <_strtod_l+0x446>
 8008f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	3202      	adds	r2, #2
 8008f16:	f103 010c 	add.w	r1, r3, #12
 8008f1a:	0092      	lsls	r2, r2, #2
 8008f1c:	300c      	adds	r0, #12
 8008f1e:	f7fe f894 	bl	800704a <memcpy>
 8008f22:	ec4b ab10 	vmov	d0, sl, fp
 8008f26:	9805      	ldr	r0, [sp, #20]
 8008f28:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f2a:	a91b      	add	r1, sp, #108	@ 0x6c
 8008f2c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008f30:	f7ff fbd6 	bl	80086e0 <__d2b>
 8008f34:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f43f aee1 	beq.w	8008cfe <_strtod_l+0x446>
 8008f3c:	9805      	ldr	r0, [sp, #20]
 8008f3e:	2101      	movs	r1, #1
 8008f40:	f7ff f930 	bl	80081a4 <__i2b>
 8008f44:	4680      	mov	r8, r0
 8008f46:	b948      	cbnz	r0, 8008f5c <_strtod_l+0x6a4>
 8008f48:	f04f 0800 	mov.w	r8, #0
 8008f4c:	e6d7      	b.n	8008cfe <_strtod_l+0x446>
 8008f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f52:	fa02 f303 	lsl.w	r3, r2, r3
 8008f56:	ea03 0a0a 	and.w	sl, r3, sl
 8008f5a:	e7af      	b.n	8008ebc <_strtod_l+0x604>
 8008f5c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008f5e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	bfab      	itete	ge
 8008f64:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008f66:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008f68:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008f6a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008f6c:	bfac      	ite	ge
 8008f6e:	18ef      	addge	r7, r5, r3
 8008f70:	1b5e      	sublt	r6, r3, r5
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	1aed      	subs	r5, r5, r3
 8008f76:	4415      	add	r5, r2
 8008f78:	4b65      	ldr	r3, [pc, #404]	@ (8009110 <_strtod_l+0x858>)
 8008f7a:	3d01      	subs	r5, #1
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008f82:	da50      	bge.n	8009026 <_strtod_l+0x76e>
 8008f84:	1b5b      	subs	r3, r3, r5
 8008f86:	2b1f      	cmp	r3, #31
 8008f88:	eba2 0203 	sub.w	r2, r2, r3
 8008f8c:	f04f 0101 	mov.w	r1, #1
 8008f90:	dc3d      	bgt.n	800900e <_strtod_l+0x756>
 8008f92:	fa01 f303 	lsl.w	r3, r1, r3
 8008f96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f9c:	18bd      	adds	r5, r7, r2
 8008f9e:	9b08      	ldr	r3, [sp, #32]
 8008fa0:	42af      	cmp	r7, r5
 8008fa2:	4416      	add	r6, r2
 8008fa4:	441e      	add	r6, r3
 8008fa6:	463b      	mov	r3, r7
 8008fa8:	bfa8      	it	ge
 8008faa:	462b      	movge	r3, r5
 8008fac:	42b3      	cmp	r3, r6
 8008fae:	bfa8      	it	ge
 8008fb0:	4633      	movge	r3, r6
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bfc2      	ittt	gt
 8008fb6:	1aed      	subgt	r5, r5, r3
 8008fb8:	1af6      	subgt	r6, r6, r3
 8008fba:	1aff      	subgt	r7, r7, r3
 8008fbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dd16      	ble.n	8008ff0 <_strtod_l+0x738>
 8008fc2:	4641      	mov	r1, r8
 8008fc4:	9805      	ldr	r0, [sp, #20]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f7ff f9a4 	bl	8008314 <__pow5mult>
 8008fcc:	4680      	mov	r8, r0
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d0ba      	beq.n	8008f48 <_strtod_l+0x690>
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fd6:	9805      	ldr	r0, [sp, #20]
 8008fd8:	f7ff f8fa 	bl	80081d0 <__multiply>
 8008fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	f43f ae8d 	beq.w	8008cfe <_strtod_l+0x446>
 8008fe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fe6:	9805      	ldr	r0, [sp, #20]
 8008fe8:	f7fe ffde 	bl	8007fa8 <_Bfree>
 8008fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fee:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	dc1d      	bgt.n	8009030 <_strtod_l+0x778>
 8008ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dd23      	ble.n	8009042 <_strtod_l+0x78a>
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008ffe:	9805      	ldr	r0, [sp, #20]
 8009000:	f7ff f988 	bl	8008314 <__pow5mult>
 8009004:	4681      	mov	r9, r0
 8009006:	b9e0      	cbnz	r0, 8009042 <_strtod_l+0x78a>
 8009008:	f04f 0900 	mov.w	r9, #0
 800900c:	e677      	b.n	8008cfe <_strtod_l+0x446>
 800900e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009012:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009016:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800901a:	35e2      	adds	r5, #226	@ 0xe2
 800901c:	fa01 f305 	lsl.w	r3, r1, r5
 8009020:	9310      	str	r3, [sp, #64]	@ 0x40
 8009022:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009024:	e7ba      	b.n	8008f9c <_strtod_l+0x6e4>
 8009026:	2300      	movs	r3, #0
 8009028:	9310      	str	r3, [sp, #64]	@ 0x40
 800902a:	2301      	movs	r3, #1
 800902c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800902e:	e7b5      	b.n	8008f9c <_strtod_l+0x6e4>
 8009030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009032:	9805      	ldr	r0, [sp, #20]
 8009034:	462a      	mov	r2, r5
 8009036:	f7ff f9c7 	bl	80083c8 <__lshift>
 800903a:	901a      	str	r0, [sp, #104]	@ 0x68
 800903c:	2800      	cmp	r0, #0
 800903e:	d1d9      	bne.n	8008ff4 <_strtod_l+0x73c>
 8009040:	e65d      	b.n	8008cfe <_strtod_l+0x446>
 8009042:	2e00      	cmp	r6, #0
 8009044:	dd07      	ble.n	8009056 <_strtod_l+0x79e>
 8009046:	4649      	mov	r1, r9
 8009048:	9805      	ldr	r0, [sp, #20]
 800904a:	4632      	mov	r2, r6
 800904c:	f7ff f9bc 	bl	80083c8 <__lshift>
 8009050:	4681      	mov	r9, r0
 8009052:	2800      	cmp	r0, #0
 8009054:	d0d8      	beq.n	8009008 <_strtod_l+0x750>
 8009056:	2f00      	cmp	r7, #0
 8009058:	dd08      	ble.n	800906c <_strtod_l+0x7b4>
 800905a:	4641      	mov	r1, r8
 800905c:	9805      	ldr	r0, [sp, #20]
 800905e:	463a      	mov	r2, r7
 8009060:	f7ff f9b2 	bl	80083c8 <__lshift>
 8009064:	4680      	mov	r8, r0
 8009066:	2800      	cmp	r0, #0
 8009068:	f43f ae49 	beq.w	8008cfe <_strtod_l+0x446>
 800906c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800906e:	9805      	ldr	r0, [sp, #20]
 8009070:	464a      	mov	r2, r9
 8009072:	f7ff fa31 	bl	80084d8 <__mdiff>
 8009076:	4604      	mov	r4, r0
 8009078:	2800      	cmp	r0, #0
 800907a:	f43f ae40 	beq.w	8008cfe <_strtod_l+0x446>
 800907e:	68c3      	ldr	r3, [r0, #12]
 8009080:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009082:	2300      	movs	r3, #0
 8009084:	60c3      	str	r3, [r0, #12]
 8009086:	4641      	mov	r1, r8
 8009088:	f7ff fa0a 	bl	80084a0 <__mcmp>
 800908c:	2800      	cmp	r0, #0
 800908e:	da45      	bge.n	800911c <_strtod_l+0x864>
 8009090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009092:	ea53 030a 	orrs.w	r3, r3, sl
 8009096:	d16b      	bne.n	8009170 <_strtod_l+0x8b8>
 8009098:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800909c:	2b00      	cmp	r3, #0
 800909e:	d167      	bne.n	8009170 <_strtod_l+0x8b8>
 80090a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090a4:	0d1b      	lsrs	r3, r3, #20
 80090a6:	051b      	lsls	r3, r3, #20
 80090a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090ac:	d960      	bls.n	8009170 <_strtod_l+0x8b8>
 80090ae:	6963      	ldr	r3, [r4, #20]
 80090b0:	b913      	cbnz	r3, 80090b8 <_strtod_l+0x800>
 80090b2:	6923      	ldr	r3, [r4, #16]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	dd5b      	ble.n	8009170 <_strtod_l+0x8b8>
 80090b8:	4621      	mov	r1, r4
 80090ba:	2201      	movs	r2, #1
 80090bc:	9805      	ldr	r0, [sp, #20]
 80090be:	f7ff f983 	bl	80083c8 <__lshift>
 80090c2:	4641      	mov	r1, r8
 80090c4:	4604      	mov	r4, r0
 80090c6:	f7ff f9eb 	bl	80084a0 <__mcmp>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	dd50      	ble.n	8009170 <_strtod_l+0x8b8>
 80090ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090d2:	9a08      	ldr	r2, [sp, #32]
 80090d4:	0d1b      	lsrs	r3, r3, #20
 80090d6:	051b      	lsls	r3, r3, #20
 80090d8:	2a00      	cmp	r2, #0
 80090da:	d06a      	beq.n	80091b2 <_strtod_l+0x8fa>
 80090dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090e0:	d867      	bhi.n	80091b2 <_strtod_l+0x8fa>
 80090e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80090e6:	f67f ae9d 	bls.w	8008e24 <_strtod_l+0x56c>
 80090ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009114 <_strtod_l+0x85c>)
 80090ec:	4650      	mov	r0, sl
 80090ee:	4659      	mov	r1, fp
 80090f0:	2200      	movs	r2, #0
 80090f2:	f7f7 fad1 	bl	8000698 <__aeabi_dmul>
 80090f6:	4b08      	ldr	r3, [pc, #32]	@ (8009118 <_strtod_l+0x860>)
 80090f8:	400b      	ands	r3, r1
 80090fa:	4682      	mov	sl, r0
 80090fc:	468b      	mov	fp, r1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f47f ae08 	bne.w	8008d14 <_strtod_l+0x45c>
 8009104:	9a05      	ldr	r2, [sp, #20]
 8009106:	2322      	movs	r3, #34	@ 0x22
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	e603      	b.n	8008d14 <_strtod_l+0x45c>
 800910c:	0800aa70 	.word	0x0800aa70
 8009110:	fffffc02 	.word	0xfffffc02
 8009114:	39500000 	.word	0x39500000
 8009118:	7ff00000 	.word	0x7ff00000
 800911c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009120:	d165      	bne.n	80091ee <_strtod_l+0x936>
 8009122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009128:	b35a      	cbz	r2, 8009182 <_strtod_l+0x8ca>
 800912a:	4a9f      	ldr	r2, [pc, #636]	@ (80093a8 <_strtod_l+0xaf0>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d12b      	bne.n	8009188 <_strtod_l+0x8d0>
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	4651      	mov	r1, sl
 8009134:	b303      	cbz	r3, 8009178 <_strtod_l+0x8c0>
 8009136:	4b9d      	ldr	r3, [pc, #628]	@ (80093ac <_strtod_l+0xaf4>)
 8009138:	465a      	mov	r2, fp
 800913a:	4013      	ands	r3, r2
 800913c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009140:	f04f 32ff 	mov.w	r2, #4294967295
 8009144:	d81b      	bhi.n	800917e <_strtod_l+0x8c6>
 8009146:	0d1b      	lsrs	r3, r3, #20
 8009148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800914c:	fa02 f303 	lsl.w	r3, r2, r3
 8009150:	4299      	cmp	r1, r3
 8009152:	d119      	bne.n	8009188 <_strtod_l+0x8d0>
 8009154:	4b96      	ldr	r3, [pc, #600]	@ (80093b0 <_strtod_l+0xaf8>)
 8009156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009158:	429a      	cmp	r2, r3
 800915a:	d102      	bne.n	8009162 <_strtod_l+0x8aa>
 800915c:	3101      	adds	r1, #1
 800915e:	f43f adce 	beq.w	8008cfe <_strtod_l+0x446>
 8009162:	4b92      	ldr	r3, [pc, #584]	@ (80093ac <_strtod_l+0xaf4>)
 8009164:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009166:	401a      	ands	r2, r3
 8009168:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800916c:	f04f 0a00 	mov.w	sl, #0
 8009170:	9b08      	ldr	r3, [sp, #32]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1b9      	bne.n	80090ea <_strtod_l+0x832>
 8009176:	e5cd      	b.n	8008d14 <_strtod_l+0x45c>
 8009178:	f04f 33ff 	mov.w	r3, #4294967295
 800917c:	e7e8      	b.n	8009150 <_strtod_l+0x898>
 800917e:	4613      	mov	r3, r2
 8009180:	e7e6      	b.n	8009150 <_strtod_l+0x898>
 8009182:	ea53 030a 	orrs.w	r3, r3, sl
 8009186:	d0a2      	beq.n	80090ce <_strtod_l+0x816>
 8009188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800918a:	b1db      	cbz	r3, 80091c4 <_strtod_l+0x90c>
 800918c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800918e:	4213      	tst	r3, r2
 8009190:	d0ee      	beq.n	8009170 <_strtod_l+0x8b8>
 8009192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009194:	9a08      	ldr	r2, [sp, #32]
 8009196:	4650      	mov	r0, sl
 8009198:	4659      	mov	r1, fp
 800919a:	b1bb      	cbz	r3, 80091cc <_strtod_l+0x914>
 800919c:	f7ff fb6e 	bl	800887c <sulp>
 80091a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091a4:	ec53 2b10 	vmov	r2, r3, d0
 80091a8:	f7f7 f8c0 	bl	800032c <__adddf3>
 80091ac:	4682      	mov	sl, r0
 80091ae:	468b      	mov	fp, r1
 80091b0:	e7de      	b.n	8009170 <_strtod_l+0x8b8>
 80091b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80091b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80091be:	f04f 3aff 	mov.w	sl, #4294967295
 80091c2:	e7d5      	b.n	8009170 <_strtod_l+0x8b8>
 80091c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091c6:	ea13 0f0a 	tst.w	r3, sl
 80091ca:	e7e1      	b.n	8009190 <_strtod_l+0x8d8>
 80091cc:	f7ff fb56 	bl	800887c <sulp>
 80091d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091d4:	ec53 2b10 	vmov	r2, r3, d0
 80091d8:	f7f7 f8a6 	bl	8000328 <__aeabi_dsub>
 80091dc:	2200      	movs	r2, #0
 80091de:	2300      	movs	r3, #0
 80091e0:	4682      	mov	sl, r0
 80091e2:	468b      	mov	fp, r1
 80091e4:	f7f7 fcc0 	bl	8000b68 <__aeabi_dcmpeq>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d0c1      	beq.n	8009170 <_strtod_l+0x8b8>
 80091ec:	e61a      	b.n	8008e24 <_strtod_l+0x56c>
 80091ee:	4641      	mov	r1, r8
 80091f0:	4620      	mov	r0, r4
 80091f2:	f7ff facd 	bl	8008790 <__ratio>
 80091f6:	ec57 6b10 	vmov	r6, r7, d0
 80091fa:	2200      	movs	r2, #0
 80091fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009200:	4630      	mov	r0, r6
 8009202:	4639      	mov	r1, r7
 8009204:	f7f7 fcc4 	bl	8000b90 <__aeabi_dcmple>
 8009208:	2800      	cmp	r0, #0
 800920a:	d06f      	beq.n	80092ec <_strtod_l+0xa34>
 800920c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800920e:	2b00      	cmp	r3, #0
 8009210:	d17a      	bne.n	8009308 <_strtod_l+0xa50>
 8009212:	f1ba 0f00 	cmp.w	sl, #0
 8009216:	d158      	bne.n	80092ca <_strtod_l+0xa12>
 8009218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800921a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800921e:	2b00      	cmp	r3, #0
 8009220:	d15a      	bne.n	80092d8 <_strtod_l+0xa20>
 8009222:	4b64      	ldr	r3, [pc, #400]	@ (80093b4 <_strtod_l+0xafc>)
 8009224:	2200      	movs	r2, #0
 8009226:	4630      	mov	r0, r6
 8009228:	4639      	mov	r1, r7
 800922a:	f7f7 fca7 	bl	8000b7c <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	d159      	bne.n	80092e6 <_strtod_l+0xa2e>
 8009232:	4630      	mov	r0, r6
 8009234:	4639      	mov	r1, r7
 8009236:	4b60      	ldr	r3, [pc, #384]	@ (80093b8 <_strtod_l+0xb00>)
 8009238:	2200      	movs	r2, #0
 800923a:	f7f7 fa2d 	bl	8000698 <__aeabi_dmul>
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009246:	9606      	str	r6, [sp, #24]
 8009248:	9307      	str	r3, [sp, #28]
 800924a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800924e:	4d57      	ldr	r5, [pc, #348]	@ (80093ac <_strtod_l+0xaf4>)
 8009250:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009256:	401d      	ands	r5, r3
 8009258:	4b58      	ldr	r3, [pc, #352]	@ (80093bc <_strtod_l+0xb04>)
 800925a:	429d      	cmp	r5, r3
 800925c:	f040 80b2 	bne.w	80093c4 <_strtod_l+0xb0c>
 8009260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009262:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009266:	ec4b ab10 	vmov	d0, sl, fp
 800926a:	f7ff f9c9 	bl	8008600 <__ulp>
 800926e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009272:	ec51 0b10 	vmov	r0, r1, d0
 8009276:	f7f7 fa0f 	bl	8000698 <__aeabi_dmul>
 800927a:	4652      	mov	r2, sl
 800927c:	465b      	mov	r3, fp
 800927e:	f7f7 f855 	bl	800032c <__adddf3>
 8009282:	460b      	mov	r3, r1
 8009284:	4949      	ldr	r1, [pc, #292]	@ (80093ac <_strtod_l+0xaf4>)
 8009286:	4a4e      	ldr	r2, [pc, #312]	@ (80093c0 <_strtod_l+0xb08>)
 8009288:	4019      	ands	r1, r3
 800928a:	4291      	cmp	r1, r2
 800928c:	4682      	mov	sl, r0
 800928e:	d942      	bls.n	8009316 <_strtod_l+0xa5e>
 8009290:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009292:	4b47      	ldr	r3, [pc, #284]	@ (80093b0 <_strtod_l+0xaf8>)
 8009294:	429a      	cmp	r2, r3
 8009296:	d103      	bne.n	80092a0 <_strtod_l+0x9e8>
 8009298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800929a:	3301      	adds	r3, #1
 800929c:	f43f ad2f 	beq.w	8008cfe <_strtod_l+0x446>
 80092a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80093b0 <_strtod_l+0xaf8>
 80092a4:	f04f 3aff 	mov.w	sl, #4294967295
 80092a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092aa:	9805      	ldr	r0, [sp, #20]
 80092ac:	f7fe fe7c 	bl	8007fa8 <_Bfree>
 80092b0:	9805      	ldr	r0, [sp, #20]
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7fe fe78 	bl	8007fa8 <_Bfree>
 80092b8:	9805      	ldr	r0, [sp, #20]
 80092ba:	4641      	mov	r1, r8
 80092bc:	f7fe fe74 	bl	8007fa8 <_Bfree>
 80092c0:	9805      	ldr	r0, [sp, #20]
 80092c2:	4621      	mov	r1, r4
 80092c4:	f7fe fe70 	bl	8007fa8 <_Bfree>
 80092c8:	e619      	b.n	8008efe <_strtod_l+0x646>
 80092ca:	f1ba 0f01 	cmp.w	sl, #1
 80092ce:	d103      	bne.n	80092d8 <_strtod_l+0xa20>
 80092d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f43f ada6 	beq.w	8008e24 <_strtod_l+0x56c>
 80092d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009388 <_strtod_l+0xad0>
 80092dc:	4f35      	ldr	r7, [pc, #212]	@ (80093b4 <_strtod_l+0xafc>)
 80092de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092e2:	2600      	movs	r6, #0
 80092e4:	e7b1      	b.n	800924a <_strtod_l+0x992>
 80092e6:	4f34      	ldr	r7, [pc, #208]	@ (80093b8 <_strtod_l+0xb00>)
 80092e8:	2600      	movs	r6, #0
 80092ea:	e7aa      	b.n	8009242 <_strtod_l+0x98a>
 80092ec:	4b32      	ldr	r3, [pc, #200]	@ (80093b8 <_strtod_l+0xb00>)
 80092ee:	4630      	mov	r0, r6
 80092f0:	4639      	mov	r1, r7
 80092f2:	2200      	movs	r2, #0
 80092f4:	f7f7 f9d0 	bl	8000698 <__aeabi_dmul>
 80092f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d09f      	beq.n	8009242 <_strtod_l+0x98a>
 8009302:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009306:	e7a0      	b.n	800924a <_strtod_l+0x992>
 8009308:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009390 <_strtod_l+0xad8>
 800930c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009310:	ec57 6b17 	vmov	r6, r7, d7
 8009314:	e799      	b.n	800924a <_strtod_l+0x992>
 8009316:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800931a:	9b08      	ldr	r3, [sp, #32]
 800931c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1c1      	bne.n	80092a8 <_strtod_l+0x9f0>
 8009324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009328:	0d1b      	lsrs	r3, r3, #20
 800932a:	051b      	lsls	r3, r3, #20
 800932c:	429d      	cmp	r5, r3
 800932e:	d1bb      	bne.n	80092a8 <_strtod_l+0x9f0>
 8009330:	4630      	mov	r0, r6
 8009332:	4639      	mov	r1, r7
 8009334:	f7f7 fcf8 	bl	8000d28 <__aeabi_d2lz>
 8009338:	f7f7 f980 	bl	800063c <__aeabi_l2d>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f6 fff0 	bl	8000328 <__aeabi_dsub>
 8009348:	460b      	mov	r3, r1
 800934a:	4602      	mov	r2, r0
 800934c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009350:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009356:	ea46 060a 	orr.w	r6, r6, sl
 800935a:	431e      	orrs	r6, r3
 800935c:	d06f      	beq.n	800943e <_strtod_l+0xb86>
 800935e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009398 <_strtod_l+0xae0>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f7f7 fc0a 	bl	8000b7c <__aeabi_dcmplt>
 8009368:	2800      	cmp	r0, #0
 800936a:	f47f acd3 	bne.w	8008d14 <_strtod_l+0x45c>
 800936e:	a30c      	add	r3, pc, #48	@ (adr r3, 80093a0 <_strtod_l+0xae8>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009378:	f7f7 fc1e 	bl	8000bb8 <__aeabi_dcmpgt>
 800937c:	2800      	cmp	r0, #0
 800937e:	d093      	beq.n	80092a8 <_strtod_l+0x9f0>
 8009380:	e4c8      	b.n	8008d14 <_strtod_l+0x45c>
 8009382:	bf00      	nop
 8009384:	f3af 8000 	nop.w
 8009388:	00000000 	.word	0x00000000
 800938c:	bff00000 	.word	0xbff00000
 8009390:	00000000 	.word	0x00000000
 8009394:	3ff00000 	.word	0x3ff00000
 8009398:	94a03595 	.word	0x94a03595
 800939c:	3fdfffff 	.word	0x3fdfffff
 80093a0:	35afe535 	.word	0x35afe535
 80093a4:	3fe00000 	.word	0x3fe00000
 80093a8:	000fffff 	.word	0x000fffff
 80093ac:	7ff00000 	.word	0x7ff00000
 80093b0:	7fefffff 	.word	0x7fefffff
 80093b4:	3ff00000 	.word	0x3ff00000
 80093b8:	3fe00000 	.word	0x3fe00000
 80093bc:	7fe00000 	.word	0x7fe00000
 80093c0:	7c9fffff 	.word	0x7c9fffff
 80093c4:	9b08      	ldr	r3, [sp, #32]
 80093c6:	b323      	cbz	r3, 8009412 <_strtod_l+0xb5a>
 80093c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80093cc:	d821      	bhi.n	8009412 <_strtod_l+0xb5a>
 80093ce:	a328      	add	r3, pc, #160	@ (adr r3, 8009470 <_strtod_l+0xbb8>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	4630      	mov	r0, r6
 80093d6:	4639      	mov	r1, r7
 80093d8:	f7f7 fbda 	bl	8000b90 <__aeabi_dcmple>
 80093dc:	b1a0      	cbz	r0, 8009408 <_strtod_l+0xb50>
 80093de:	4639      	mov	r1, r7
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7f7 fc31 	bl	8000c48 <__aeabi_d2uiz>
 80093e6:	2801      	cmp	r0, #1
 80093e8:	bf38      	it	cc
 80093ea:	2001      	movcc	r0, #1
 80093ec:	f7f7 f8da 	bl	80005a4 <__aeabi_ui2d>
 80093f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093f2:	4606      	mov	r6, r0
 80093f4:	460f      	mov	r7, r1
 80093f6:	b9fb      	cbnz	r3, 8009438 <_strtod_l+0xb80>
 80093f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80093fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8009400:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800940a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800940e:	1b5b      	subs	r3, r3, r5
 8009410:	9311      	str	r3, [sp, #68]	@ 0x44
 8009412:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009416:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800941a:	f7ff f8f1 	bl	8008600 <__ulp>
 800941e:	4650      	mov	r0, sl
 8009420:	ec53 2b10 	vmov	r2, r3, d0
 8009424:	4659      	mov	r1, fp
 8009426:	f7f7 f937 	bl	8000698 <__aeabi_dmul>
 800942a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800942e:	f7f6 ff7d 	bl	800032c <__adddf3>
 8009432:	4682      	mov	sl, r0
 8009434:	468b      	mov	fp, r1
 8009436:	e770      	b.n	800931a <_strtod_l+0xa62>
 8009438:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800943c:	e7e0      	b.n	8009400 <_strtod_l+0xb48>
 800943e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009478 <_strtod_l+0xbc0>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	f7f7 fb9a 	bl	8000b7c <__aeabi_dcmplt>
 8009448:	e798      	b.n	800937c <_strtod_l+0xac4>
 800944a:	2300      	movs	r3, #0
 800944c:	930e      	str	r3, [sp, #56]	@ 0x38
 800944e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009452:	6013      	str	r3, [r2, #0]
 8009454:	f7ff ba6d 	b.w	8008932 <_strtod_l+0x7a>
 8009458:	2a65      	cmp	r2, #101	@ 0x65
 800945a:	f43f ab68 	beq.w	8008b2e <_strtod_l+0x276>
 800945e:	2a45      	cmp	r2, #69	@ 0x45
 8009460:	f43f ab65 	beq.w	8008b2e <_strtod_l+0x276>
 8009464:	2301      	movs	r3, #1
 8009466:	f7ff bba0 	b.w	8008baa <_strtod_l+0x2f2>
 800946a:	bf00      	nop
 800946c:	f3af 8000 	nop.w
 8009470:	ffc00000 	.word	0xffc00000
 8009474:	41dfffff 	.word	0x41dfffff
 8009478:	94a03595 	.word	0x94a03595
 800947c:	3fcfffff 	.word	0x3fcfffff

08009480 <_strtod_r>:
 8009480:	4b01      	ldr	r3, [pc, #4]	@ (8009488 <_strtod_r+0x8>)
 8009482:	f7ff ba19 	b.w	80088b8 <_strtod_l>
 8009486:	bf00      	nop
 8009488:	2000006c 	.word	0x2000006c

0800948c <_strtol_l.isra.0>:
 800948c:	2b24      	cmp	r3, #36	@ 0x24
 800948e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009492:	4686      	mov	lr, r0
 8009494:	4690      	mov	r8, r2
 8009496:	d801      	bhi.n	800949c <_strtol_l.isra.0+0x10>
 8009498:	2b01      	cmp	r3, #1
 800949a:	d106      	bne.n	80094aa <_strtol_l.isra.0+0x1e>
 800949c:	f7fd fda8 	bl	8006ff0 <__errno>
 80094a0:	2316      	movs	r3, #22
 80094a2:	6003      	str	r3, [r0, #0]
 80094a4:	2000      	movs	r0, #0
 80094a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094aa:	4834      	ldr	r0, [pc, #208]	@ (800957c <_strtol_l.isra.0+0xf0>)
 80094ac:	460d      	mov	r5, r1
 80094ae:	462a      	mov	r2, r5
 80094b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094b4:	5d06      	ldrb	r6, [r0, r4]
 80094b6:	f016 0608 	ands.w	r6, r6, #8
 80094ba:	d1f8      	bne.n	80094ae <_strtol_l.isra.0+0x22>
 80094bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80094be:	d110      	bne.n	80094e2 <_strtol_l.isra.0+0x56>
 80094c0:	782c      	ldrb	r4, [r5, #0]
 80094c2:	2601      	movs	r6, #1
 80094c4:	1c95      	adds	r5, r2, #2
 80094c6:	f033 0210 	bics.w	r2, r3, #16
 80094ca:	d115      	bne.n	80094f8 <_strtol_l.isra.0+0x6c>
 80094cc:	2c30      	cmp	r4, #48	@ 0x30
 80094ce:	d10d      	bne.n	80094ec <_strtol_l.isra.0+0x60>
 80094d0:	782a      	ldrb	r2, [r5, #0]
 80094d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094d6:	2a58      	cmp	r2, #88	@ 0x58
 80094d8:	d108      	bne.n	80094ec <_strtol_l.isra.0+0x60>
 80094da:	786c      	ldrb	r4, [r5, #1]
 80094dc:	3502      	adds	r5, #2
 80094de:	2310      	movs	r3, #16
 80094e0:	e00a      	b.n	80094f8 <_strtol_l.isra.0+0x6c>
 80094e2:	2c2b      	cmp	r4, #43	@ 0x2b
 80094e4:	bf04      	itt	eq
 80094e6:	782c      	ldrbeq	r4, [r5, #0]
 80094e8:	1c95      	addeq	r5, r2, #2
 80094ea:	e7ec      	b.n	80094c6 <_strtol_l.isra.0+0x3a>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1f6      	bne.n	80094de <_strtol_l.isra.0+0x52>
 80094f0:	2c30      	cmp	r4, #48	@ 0x30
 80094f2:	bf14      	ite	ne
 80094f4:	230a      	movne	r3, #10
 80094f6:	2308      	moveq	r3, #8
 80094f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80094fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009500:	2200      	movs	r2, #0
 8009502:	fbbc f9f3 	udiv	r9, ip, r3
 8009506:	4610      	mov	r0, r2
 8009508:	fb03 ca19 	mls	sl, r3, r9, ip
 800950c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009510:	2f09      	cmp	r7, #9
 8009512:	d80f      	bhi.n	8009534 <_strtol_l.isra.0+0xa8>
 8009514:	463c      	mov	r4, r7
 8009516:	42a3      	cmp	r3, r4
 8009518:	dd1b      	ble.n	8009552 <_strtol_l.isra.0+0xc6>
 800951a:	1c57      	adds	r7, r2, #1
 800951c:	d007      	beq.n	800952e <_strtol_l.isra.0+0xa2>
 800951e:	4581      	cmp	r9, r0
 8009520:	d314      	bcc.n	800954c <_strtol_l.isra.0+0xc0>
 8009522:	d101      	bne.n	8009528 <_strtol_l.isra.0+0x9c>
 8009524:	45a2      	cmp	sl, r4
 8009526:	db11      	blt.n	800954c <_strtol_l.isra.0+0xc0>
 8009528:	fb00 4003 	mla	r0, r0, r3, r4
 800952c:	2201      	movs	r2, #1
 800952e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009532:	e7eb      	b.n	800950c <_strtol_l.isra.0+0x80>
 8009534:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009538:	2f19      	cmp	r7, #25
 800953a:	d801      	bhi.n	8009540 <_strtol_l.isra.0+0xb4>
 800953c:	3c37      	subs	r4, #55	@ 0x37
 800953e:	e7ea      	b.n	8009516 <_strtol_l.isra.0+0x8a>
 8009540:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009544:	2f19      	cmp	r7, #25
 8009546:	d804      	bhi.n	8009552 <_strtol_l.isra.0+0xc6>
 8009548:	3c57      	subs	r4, #87	@ 0x57
 800954a:	e7e4      	b.n	8009516 <_strtol_l.isra.0+0x8a>
 800954c:	f04f 32ff 	mov.w	r2, #4294967295
 8009550:	e7ed      	b.n	800952e <_strtol_l.isra.0+0xa2>
 8009552:	1c53      	adds	r3, r2, #1
 8009554:	d108      	bne.n	8009568 <_strtol_l.isra.0+0xdc>
 8009556:	2322      	movs	r3, #34	@ 0x22
 8009558:	f8ce 3000 	str.w	r3, [lr]
 800955c:	4660      	mov	r0, ip
 800955e:	f1b8 0f00 	cmp.w	r8, #0
 8009562:	d0a0      	beq.n	80094a6 <_strtol_l.isra.0+0x1a>
 8009564:	1e69      	subs	r1, r5, #1
 8009566:	e006      	b.n	8009576 <_strtol_l.isra.0+0xea>
 8009568:	b106      	cbz	r6, 800956c <_strtol_l.isra.0+0xe0>
 800956a:	4240      	negs	r0, r0
 800956c:	f1b8 0f00 	cmp.w	r8, #0
 8009570:	d099      	beq.n	80094a6 <_strtol_l.isra.0+0x1a>
 8009572:	2a00      	cmp	r2, #0
 8009574:	d1f6      	bne.n	8009564 <_strtol_l.isra.0+0xd8>
 8009576:	f8c8 1000 	str.w	r1, [r8]
 800957a:	e794      	b.n	80094a6 <_strtol_l.isra.0+0x1a>
 800957c:	0800aa99 	.word	0x0800aa99

08009580 <_strtol_r>:
 8009580:	f7ff bf84 	b.w	800948c <_strtol_l.isra.0>

08009584 <__ssputs_r>:
 8009584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	688e      	ldr	r6, [r1, #8]
 800958a:	461f      	mov	r7, r3
 800958c:	42be      	cmp	r6, r7
 800958e:	680b      	ldr	r3, [r1, #0]
 8009590:	4682      	mov	sl, r0
 8009592:	460c      	mov	r4, r1
 8009594:	4690      	mov	r8, r2
 8009596:	d82d      	bhi.n	80095f4 <__ssputs_r+0x70>
 8009598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800959c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095a0:	d026      	beq.n	80095f0 <__ssputs_r+0x6c>
 80095a2:	6965      	ldr	r5, [r4, #20]
 80095a4:	6909      	ldr	r1, [r1, #16]
 80095a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095aa:	eba3 0901 	sub.w	r9, r3, r1
 80095ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095b2:	1c7b      	adds	r3, r7, #1
 80095b4:	444b      	add	r3, r9
 80095b6:	106d      	asrs	r5, r5, #1
 80095b8:	429d      	cmp	r5, r3
 80095ba:	bf38      	it	cc
 80095bc:	461d      	movcc	r5, r3
 80095be:	0553      	lsls	r3, r2, #21
 80095c0:	d527      	bpl.n	8009612 <__ssputs_r+0x8e>
 80095c2:	4629      	mov	r1, r5
 80095c4:	f7fe fc24 	bl	8007e10 <_malloc_r>
 80095c8:	4606      	mov	r6, r0
 80095ca:	b360      	cbz	r0, 8009626 <__ssputs_r+0xa2>
 80095cc:	6921      	ldr	r1, [r4, #16]
 80095ce:	464a      	mov	r2, r9
 80095d0:	f7fd fd3b 	bl	800704a <memcpy>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	6126      	str	r6, [r4, #16]
 80095e2:	6165      	str	r5, [r4, #20]
 80095e4:	444e      	add	r6, r9
 80095e6:	eba5 0509 	sub.w	r5, r5, r9
 80095ea:	6026      	str	r6, [r4, #0]
 80095ec:	60a5      	str	r5, [r4, #8]
 80095ee:	463e      	mov	r6, r7
 80095f0:	42be      	cmp	r6, r7
 80095f2:	d900      	bls.n	80095f6 <__ssputs_r+0x72>
 80095f4:	463e      	mov	r6, r7
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	4632      	mov	r2, r6
 80095fa:	4641      	mov	r1, r8
 80095fc:	f000 fa28 	bl	8009a50 <memmove>
 8009600:	68a3      	ldr	r3, [r4, #8]
 8009602:	1b9b      	subs	r3, r3, r6
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	4433      	add	r3, r6
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	2000      	movs	r0, #0
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	462a      	mov	r2, r5
 8009614:	f000 fe01 	bl	800a21a <_realloc_r>
 8009618:	4606      	mov	r6, r0
 800961a:	2800      	cmp	r0, #0
 800961c:	d1e0      	bne.n	80095e0 <__ssputs_r+0x5c>
 800961e:	6921      	ldr	r1, [r4, #16]
 8009620:	4650      	mov	r0, sl
 8009622:	f7fe fb81 	bl	8007d28 <_free_r>
 8009626:	230c      	movs	r3, #12
 8009628:	f8ca 3000 	str.w	r3, [sl]
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009632:	81a3      	strh	r3, [r4, #12]
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	e7e9      	b.n	800960e <__ssputs_r+0x8a>
	...

0800963c <_svfiprintf_r>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	4698      	mov	r8, r3
 8009642:	898b      	ldrh	r3, [r1, #12]
 8009644:	061b      	lsls	r3, r3, #24
 8009646:	b09d      	sub	sp, #116	@ 0x74
 8009648:	4607      	mov	r7, r0
 800964a:	460d      	mov	r5, r1
 800964c:	4614      	mov	r4, r2
 800964e:	d510      	bpl.n	8009672 <_svfiprintf_r+0x36>
 8009650:	690b      	ldr	r3, [r1, #16]
 8009652:	b973      	cbnz	r3, 8009672 <_svfiprintf_r+0x36>
 8009654:	2140      	movs	r1, #64	@ 0x40
 8009656:	f7fe fbdb 	bl	8007e10 <_malloc_r>
 800965a:	6028      	str	r0, [r5, #0]
 800965c:	6128      	str	r0, [r5, #16]
 800965e:	b930      	cbnz	r0, 800966e <_svfiprintf_r+0x32>
 8009660:	230c      	movs	r3, #12
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	b01d      	add	sp, #116	@ 0x74
 800966a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	2340      	movs	r3, #64	@ 0x40
 8009670:	616b      	str	r3, [r5, #20]
 8009672:	2300      	movs	r3, #0
 8009674:	9309      	str	r3, [sp, #36]	@ 0x24
 8009676:	2320      	movs	r3, #32
 8009678:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800967c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009680:	2330      	movs	r3, #48	@ 0x30
 8009682:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009820 <_svfiprintf_r+0x1e4>
 8009686:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800968a:	f04f 0901 	mov.w	r9, #1
 800968e:	4623      	mov	r3, r4
 8009690:	469a      	mov	sl, r3
 8009692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009696:	b10a      	cbz	r2, 800969c <_svfiprintf_r+0x60>
 8009698:	2a25      	cmp	r2, #37	@ 0x25
 800969a:	d1f9      	bne.n	8009690 <_svfiprintf_r+0x54>
 800969c:	ebba 0b04 	subs.w	fp, sl, r4
 80096a0:	d00b      	beq.n	80096ba <_svfiprintf_r+0x7e>
 80096a2:	465b      	mov	r3, fp
 80096a4:	4622      	mov	r2, r4
 80096a6:	4629      	mov	r1, r5
 80096a8:	4638      	mov	r0, r7
 80096aa:	f7ff ff6b 	bl	8009584 <__ssputs_r>
 80096ae:	3001      	adds	r0, #1
 80096b0:	f000 80a7 	beq.w	8009802 <_svfiprintf_r+0x1c6>
 80096b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096b6:	445a      	add	r2, fp
 80096b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80096ba:	f89a 3000 	ldrb.w	r3, [sl]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 809f 	beq.w	8009802 <_svfiprintf_r+0x1c6>
 80096c4:	2300      	movs	r3, #0
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ce:	f10a 0a01 	add.w	sl, sl, #1
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	9307      	str	r3, [sp, #28]
 80096d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096da:	931a      	str	r3, [sp, #104]	@ 0x68
 80096dc:	4654      	mov	r4, sl
 80096de:	2205      	movs	r2, #5
 80096e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e4:	484e      	ldr	r0, [pc, #312]	@ (8009820 <_svfiprintf_r+0x1e4>)
 80096e6:	f7f6 fdc3 	bl	8000270 <memchr>
 80096ea:	9a04      	ldr	r2, [sp, #16]
 80096ec:	b9d8      	cbnz	r0, 8009726 <_svfiprintf_r+0xea>
 80096ee:	06d0      	lsls	r0, r2, #27
 80096f0:	bf44      	itt	mi
 80096f2:	2320      	movmi	r3, #32
 80096f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096f8:	0711      	lsls	r1, r2, #28
 80096fa:	bf44      	itt	mi
 80096fc:	232b      	movmi	r3, #43	@ 0x2b
 80096fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009702:	f89a 3000 	ldrb.w	r3, [sl]
 8009706:	2b2a      	cmp	r3, #42	@ 0x2a
 8009708:	d015      	beq.n	8009736 <_svfiprintf_r+0xfa>
 800970a:	9a07      	ldr	r2, [sp, #28]
 800970c:	4654      	mov	r4, sl
 800970e:	2000      	movs	r0, #0
 8009710:	f04f 0c0a 	mov.w	ip, #10
 8009714:	4621      	mov	r1, r4
 8009716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800971a:	3b30      	subs	r3, #48	@ 0x30
 800971c:	2b09      	cmp	r3, #9
 800971e:	d94b      	bls.n	80097b8 <_svfiprintf_r+0x17c>
 8009720:	b1b0      	cbz	r0, 8009750 <_svfiprintf_r+0x114>
 8009722:	9207      	str	r2, [sp, #28]
 8009724:	e014      	b.n	8009750 <_svfiprintf_r+0x114>
 8009726:	eba0 0308 	sub.w	r3, r0, r8
 800972a:	fa09 f303 	lsl.w	r3, r9, r3
 800972e:	4313      	orrs	r3, r2
 8009730:	9304      	str	r3, [sp, #16]
 8009732:	46a2      	mov	sl, r4
 8009734:	e7d2      	b.n	80096dc <_svfiprintf_r+0xa0>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	1d19      	adds	r1, r3, #4
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	9103      	str	r1, [sp, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	bfbb      	ittet	lt
 8009742:	425b      	neglt	r3, r3
 8009744:	f042 0202 	orrlt.w	r2, r2, #2
 8009748:	9307      	strge	r3, [sp, #28]
 800974a:	9307      	strlt	r3, [sp, #28]
 800974c:	bfb8      	it	lt
 800974e:	9204      	strlt	r2, [sp, #16]
 8009750:	7823      	ldrb	r3, [r4, #0]
 8009752:	2b2e      	cmp	r3, #46	@ 0x2e
 8009754:	d10a      	bne.n	800976c <_svfiprintf_r+0x130>
 8009756:	7863      	ldrb	r3, [r4, #1]
 8009758:	2b2a      	cmp	r3, #42	@ 0x2a
 800975a:	d132      	bne.n	80097c2 <_svfiprintf_r+0x186>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	1d1a      	adds	r2, r3, #4
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	9203      	str	r2, [sp, #12]
 8009764:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009768:	3402      	adds	r4, #2
 800976a:	9305      	str	r3, [sp, #20]
 800976c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009830 <_svfiprintf_r+0x1f4>
 8009770:	7821      	ldrb	r1, [r4, #0]
 8009772:	2203      	movs	r2, #3
 8009774:	4650      	mov	r0, sl
 8009776:	f7f6 fd7b 	bl	8000270 <memchr>
 800977a:	b138      	cbz	r0, 800978c <_svfiprintf_r+0x150>
 800977c:	9b04      	ldr	r3, [sp, #16]
 800977e:	eba0 000a 	sub.w	r0, r0, sl
 8009782:	2240      	movs	r2, #64	@ 0x40
 8009784:	4082      	lsls	r2, r0
 8009786:	4313      	orrs	r3, r2
 8009788:	3401      	adds	r4, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009790:	4824      	ldr	r0, [pc, #144]	@ (8009824 <_svfiprintf_r+0x1e8>)
 8009792:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009796:	2206      	movs	r2, #6
 8009798:	f7f6 fd6a 	bl	8000270 <memchr>
 800979c:	2800      	cmp	r0, #0
 800979e:	d036      	beq.n	800980e <_svfiprintf_r+0x1d2>
 80097a0:	4b21      	ldr	r3, [pc, #132]	@ (8009828 <_svfiprintf_r+0x1ec>)
 80097a2:	bb1b      	cbnz	r3, 80097ec <_svfiprintf_r+0x1b0>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	3307      	adds	r3, #7
 80097a8:	f023 0307 	bic.w	r3, r3, #7
 80097ac:	3308      	adds	r3, #8
 80097ae:	9303      	str	r3, [sp, #12]
 80097b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b2:	4433      	add	r3, r6
 80097b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097b6:	e76a      	b.n	800968e <_svfiprintf_r+0x52>
 80097b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097bc:	460c      	mov	r4, r1
 80097be:	2001      	movs	r0, #1
 80097c0:	e7a8      	b.n	8009714 <_svfiprintf_r+0xd8>
 80097c2:	2300      	movs	r3, #0
 80097c4:	3401      	adds	r4, #1
 80097c6:	9305      	str	r3, [sp, #20]
 80097c8:	4619      	mov	r1, r3
 80097ca:	f04f 0c0a 	mov.w	ip, #10
 80097ce:	4620      	mov	r0, r4
 80097d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097d4:	3a30      	subs	r2, #48	@ 0x30
 80097d6:	2a09      	cmp	r2, #9
 80097d8:	d903      	bls.n	80097e2 <_svfiprintf_r+0x1a6>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0c6      	beq.n	800976c <_svfiprintf_r+0x130>
 80097de:	9105      	str	r1, [sp, #20]
 80097e0:	e7c4      	b.n	800976c <_svfiprintf_r+0x130>
 80097e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097e6:	4604      	mov	r4, r0
 80097e8:	2301      	movs	r3, #1
 80097ea:	e7f0      	b.n	80097ce <_svfiprintf_r+0x192>
 80097ec:	ab03      	add	r3, sp, #12
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	462a      	mov	r2, r5
 80097f2:	4b0e      	ldr	r3, [pc, #56]	@ (800982c <_svfiprintf_r+0x1f0>)
 80097f4:	a904      	add	r1, sp, #16
 80097f6:	4638      	mov	r0, r7
 80097f8:	f7fc fbcc 	bl	8005f94 <_printf_float>
 80097fc:	1c42      	adds	r2, r0, #1
 80097fe:	4606      	mov	r6, r0
 8009800:	d1d6      	bne.n	80097b0 <_svfiprintf_r+0x174>
 8009802:	89ab      	ldrh	r3, [r5, #12]
 8009804:	065b      	lsls	r3, r3, #25
 8009806:	f53f af2d 	bmi.w	8009664 <_svfiprintf_r+0x28>
 800980a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800980c:	e72c      	b.n	8009668 <_svfiprintf_r+0x2c>
 800980e:	ab03      	add	r3, sp, #12
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	462a      	mov	r2, r5
 8009814:	4b05      	ldr	r3, [pc, #20]	@ (800982c <_svfiprintf_r+0x1f0>)
 8009816:	a904      	add	r1, sp, #16
 8009818:	4638      	mov	r0, r7
 800981a:	f7fc fe53 	bl	80064c4 <_printf_i>
 800981e:	e7ed      	b.n	80097fc <_svfiprintf_r+0x1c0>
 8009820:	0800a895 	.word	0x0800a895
 8009824:	0800a89f 	.word	0x0800a89f
 8009828:	08005f95 	.word	0x08005f95
 800982c:	08009585 	.word	0x08009585
 8009830:	0800a89b 	.word	0x0800a89b

08009834 <__sflush_r>:
 8009834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800983c:	0716      	lsls	r6, r2, #28
 800983e:	4605      	mov	r5, r0
 8009840:	460c      	mov	r4, r1
 8009842:	d454      	bmi.n	80098ee <__sflush_r+0xba>
 8009844:	684b      	ldr	r3, [r1, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc02      	bgt.n	8009850 <__sflush_r+0x1c>
 800984a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800984c:	2b00      	cmp	r3, #0
 800984e:	dd48      	ble.n	80098e2 <__sflush_r+0xae>
 8009850:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009852:	2e00      	cmp	r6, #0
 8009854:	d045      	beq.n	80098e2 <__sflush_r+0xae>
 8009856:	2300      	movs	r3, #0
 8009858:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800985c:	682f      	ldr	r7, [r5, #0]
 800985e:	6a21      	ldr	r1, [r4, #32]
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	d030      	beq.n	80098c6 <__sflush_r+0x92>
 8009864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	0759      	lsls	r1, r3, #29
 800986a:	d505      	bpl.n	8009878 <__sflush_r+0x44>
 800986c:	6863      	ldr	r3, [r4, #4]
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009872:	b10b      	cbz	r3, 8009878 <__sflush_r+0x44>
 8009874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009876:	1ad2      	subs	r2, r2, r3
 8009878:	2300      	movs	r3, #0
 800987a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	4628      	mov	r0, r5
 8009880:	47b0      	blx	r6
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	d106      	bne.n	8009896 <__sflush_r+0x62>
 8009888:	6829      	ldr	r1, [r5, #0]
 800988a:	291d      	cmp	r1, #29
 800988c:	d82b      	bhi.n	80098e6 <__sflush_r+0xb2>
 800988e:	4a2a      	ldr	r2, [pc, #168]	@ (8009938 <__sflush_r+0x104>)
 8009890:	40ca      	lsrs	r2, r1
 8009892:	07d6      	lsls	r6, r2, #31
 8009894:	d527      	bpl.n	80098e6 <__sflush_r+0xb2>
 8009896:	2200      	movs	r2, #0
 8009898:	6062      	str	r2, [r4, #4]
 800989a:	04d9      	lsls	r1, r3, #19
 800989c:	6922      	ldr	r2, [r4, #16]
 800989e:	6022      	str	r2, [r4, #0]
 80098a0:	d504      	bpl.n	80098ac <__sflush_r+0x78>
 80098a2:	1c42      	adds	r2, r0, #1
 80098a4:	d101      	bne.n	80098aa <__sflush_r+0x76>
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	b903      	cbnz	r3, 80098ac <__sflush_r+0x78>
 80098aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80098ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ae:	602f      	str	r7, [r5, #0]
 80098b0:	b1b9      	cbz	r1, 80098e2 <__sflush_r+0xae>
 80098b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098b6:	4299      	cmp	r1, r3
 80098b8:	d002      	beq.n	80098c0 <__sflush_r+0x8c>
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7fe fa34 	bl	8007d28 <_free_r>
 80098c0:	2300      	movs	r3, #0
 80098c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80098c4:	e00d      	b.n	80098e2 <__sflush_r+0xae>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b0      	blx	r6
 80098cc:	4602      	mov	r2, r0
 80098ce:	1c50      	adds	r0, r2, #1
 80098d0:	d1c9      	bne.n	8009866 <__sflush_r+0x32>
 80098d2:	682b      	ldr	r3, [r5, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0c6      	beq.n	8009866 <__sflush_r+0x32>
 80098d8:	2b1d      	cmp	r3, #29
 80098da:	d001      	beq.n	80098e0 <__sflush_r+0xac>
 80098dc:	2b16      	cmp	r3, #22
 80098de:	d11e      	bne.n	800991e <__sflush_r+0xea>
 80098e0:	602f      	str	r7, [r5, #0]
 80098e2:	2000      	movs	r0, #0
 80098e4:	e022      	b.n	800992c <__sflush_r+0xf8>
 80098e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098ea:	b21b      	sxth	r3, r3
 80098ec:	e01b      	b.n	8009926 <__sflush_r+0xf2>
 80098ee:	690f      	ldr	r7, [r1, #16]
 80098f0:	2f00      	cmp	r7, #0
 80098f2:	d0f6      	beq.n	80098e2 <__sflush_r+0xae>
 80098f4:	0793      	lsls	r3, r2, #30
 80098f6:	680e      	ldr	r6, [r1, #0]
 80098f8:	bf08      	it	eq
 80098fa:	694b      	ldreq	r3, [r1, #20]
 80098fc:	600f      	str	r7, [r1, #0]
 80098fe:	bf18      	it	ne
 8009900:	2300      	movne	r3, #0
 8009902:	eba6 0807 	sub.w	r8, r6, r7
 8009906:	608b      	str	r3, [r1, #8]
 8009908:	f1b8 0f00 	cmp.w	r8, #0
 800990c:	dde9      	ble.n	80098e2 <__sflush_r+0xae>
 800990e:	6a21      	ldr	r1, [r4, #32]
 8009910:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009912:	4643      	mov	r3, r8
 8009914:	463a      	mov	r2, r7
 8009916:	4628      	mov	r0, r5
 8009918:	47b0      	blx	r6
 800991a:	2800      	cmp	r0, #0
 800991c:	dc08      	bgt.n	8009930 <__sflush_r+0xfc>
 800991e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009930:	4407      	add	r7, r0
 8009932:	eba8 0800 	sub.w	r8, r8, r0
 8009936:	e7e7      	b.n	8009908 <__sflush_r+0xd4>
 8009938:	20400001 	.word	0x20400001

0800993c <_fflush_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	690b      	ldr	r3, [r1, #16]
 8009940:	4605      	mov	r5, r0
 8009942:	460c      	mov	r4, r1
 8009944:	b913      	cbnz	r3, 800994c <_fflush_r+0x10>
 8009946:	2500      	movs	r5, #0
 8009948:	4628      	mov	r0, r5
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	b118      	cbz	r0, 8009956 <_fflush_r+0x1a>
 800994e:	6a03      	ldr	r3, [r0, #32]
 8009950:	b90b      	cbnz	r3, 8009956 <_fflush_r+0x1a>
 8009952:	f7fd f96f 	bl	8006c34 <__sinit>
 8009956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0f3      	beq.n	8009946 <_fflush_r+0xa>
 800995e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009960:	07d0      	lsls	r0, r2, #31
 8009962:	d404      	bmi.n	800996e <_fflush_r+0x32>
 8009964:	0599      	lsls	r1, r3, #22
 8009966:	d402      	bmi.n	800996e <_fflush_r+0x32>
 8009968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800996a:	f7fd fb6c 	bl	8007046 <__retarget_lock_acquire_recursive>
 800996e:	4628      	mov	r0, r5
 8009970:	4621      	mov	r1, r4
 8009972:	f7ff ff5f 	bl	8009834 <__sflush_r>
 8009976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009978:	07da      	lsls	r2, r3, #31
 800997a:	4605      	mov	r5, r0
 800997c:	d4e4      	bmi.n	8009948 <_fflush_r+0xc>
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	059b      	lsls	r3, r3, #22
 8009982:	d4e1      	bmi.n	8009948 <_fflush_r+0xc>
 8009984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009986:	f7fd fb5f 	bl	8007048 <__retarget_lock_release_recursive>
 800998a:	e7dd      	b.n	8009948 <_fflush_r+0xc>

0800998c <__swhatbuf_r>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	460c      	mov	r4, r1
 8009990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009994:	2900      	cmp	r1, #0
 8009996:	b096      	sub	sp, #88	@ 0x58
 8009998:	4615      	mov	r5, r2
 800999a:	461e      	mov	r6, r3
 800999c:	da0d      	bge.n	80099ba <__swhatbuf_r+0x2e>
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099a4:	f04f 0100 	mov.w	r1, #0
 80099a8:	bf14      	ite	ne
 80099aa:	2340      	movne	r3, #64	@ 0x40
 80099ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099b0:	2000      	movs	r0, #0
 80099b2:	6031      	str	r1, [r6, #0]
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	b016      	add	sp, #88	@ 0x58
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
 80099ba:	466a      	mov	r2, sp
 80099bc:	f000 f874 	bl	8009aa8 <_fstat_r>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	dbec      	blt.n	800999e <__swhatbuf_r+0x12>
 80099c4:	9901      	ldr	r1, [sp, #4]
 80099c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099ce:	4259      	negs	r1, r3
 80099d0:	4159      	adcs	r1, r3
 80099d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099d6:	e7eb      	b.n	80099b0 <__swhatbuf_r+0x24>

080099d8 <__smakebuf_r>:
 80099d8:	898b      	ldrh	r3, [r1, #12]
 80099da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099dc:	079d      	lsls	r5, r3, #30
 80099de:	4606      	mov	r6, r0
 80099e0:	460c      	mov	r4, r1
 80099e2:	d507      	bpl.n	80099f4 <__smakebuf_r+0x1c>
 80099e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	6123      	str	r3, [r4, #16]
 80099ec:	2301      	movs	r3, #1
 80099ee:	6163      	str	r3, [r4, #20]
 80099f0:	b003      	add	sp, #12
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099f4:	ab01      	add	r3, sp, #4
 80099f6:	466a      	mov	r2, sp
 80099f8:	f7ff ffc8 	bl	800998c <__swhatbuf_r>
 80099fc:	9f00      	ldr	r7, [sp, #0]
 80099fe:	4605      	mov	r5, r0
 8009a00:	4639      	mov	r1, r7
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7fe fa04 	bl	8007e10 <_malloc_r>
 8009a08:	b948      	cbnz	r0, 8009a1e <__smakebuf_r+0x46>
 8009a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a0e:	059a      	lsls	r2, r3, #22
 8009a10:	d4ee      	bmi.n	80099f0 <__smakebuf_r+0x18>
 8009a12:	f023 0303 	bic.w	r3, r3, #3
 8009a16:	f043 0302 	orr.w	r3, r3, #2
 8009a1a:	81a3      	strh	r3, [r4, #12]
 8009a1c:	e7e2      	b.n	80099e4 <__smakebuf_r+0xc>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	6020      	str	r0, [r4, #0]
 8009a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a26:	81a3      	strh	r3, [r4, #12]
 8009a28:	9b01      	ldr	r3, [sp, #4]
 8009a2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a2e:	b15b      	cbz	r3, 8009a48 <__smakebuf_r+0x70>
 8009a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a34:	4630      	mov	r0, r6
 8009a36:	f000 f849 	bl	8009acc <_isatty_r>
 8009a3a:	b128      	cbz	r0, 8009a48 <__smakebuf_r+0x70>
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	f023 0303 	bic.w	r3, r3, #3
 8009a42:	f043 0301 	orr.w	r3, r3, #1
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	431d      	orrs	r5, r3
 8009a4c:	81a5      	strh	r5, [r4, #12]
 8009a4e:	e7cf      	b.n	80099f0 <__smakebuf_r+0x18>

08009a50 <memmove>:
 8009a50:	4288      	cmp	r0, r1
 8009a52:	b510      	push	{r4, lr}
 8009a54:	eb01 0402 	add.w	r4, r1, r2
 8009a58:	d902      	bls.n	8009a60 <memmove+0x10>
 8009a5a:	4284      	cmp	r4, r0
 8009a5c:	4623      	mov	r3, r4
 8009a5e:	d807      	bhi.n	8009a70 <memmove+0x20>
 8009a60:	1e43      	subs	r3, r0, #1
 8009a62:	42a1      	cmp	r1, r4
 8009a64:	d008      	beq.n	8009a78 <memmove+0x28>
 8009a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a6e:	e7f8      	b.n	8009a62 <memmove+0x12>
 8009a70:	4402      	add	r2, r0
 8009a72:	4601      	mov	r1, r0
 8009a74:	428a      	cmp	r2, r1
 8009a76:	d100      	bne.n	8009a7a <memmove+0x2a>
 8009a78:	bd10      	pop	{r4, pc}
 8009a7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a82:	e7f7      	b.n	8009a74 <memmove+0x24>

08009a84 <strncmp>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	b16a      	cbz	r2, 8009aa4 <strncmp+0x20>
 8009a88:	3901      	subs	r1, #1
 8009a8a:	1884      	adds	r4, r0, r2
 8009a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d103      	bne.n	8009aa0 <strncmp+0x1c>
 8009a98:	42a0      	cmp	r0, r4
 8009a9a:	d001      	beq.n	8009aa0 <strncmp+0x1c>
 8009a9c:	2a00      	cmp	r2, #0
 8009a9e:	d1f5      	bne.n	8009a8c <strncmp+0x8>
 8009aa0:	1ad0      	subs	r0, r2, r3
 8009aa2:	bd10      	pop	{r4, pc}
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	e7fc      	b.n	8009aa2 <strncmp+0x1e>

08009aa8 <_fstat_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d07      	ldr	r5, [pc, #28]	@ (8009ac8 <_fstat_r+0x20>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	602b      	str	r3, [r5, #0]
 8009ab6:	f7f7 fbb4 	bl	8001222 <_fstat>
 8009aba:	1c43      	adds	r3, r0, #1
 8009abc:	d102      	bne.n	8009ac4 <_fstat_r+0x1c>
 8009abe:	682b      	ldr	r3, [r5, #0]
 8009ac0:	b103      	cbz	r3, 8009ac4 <_fstat_r+0x1c>
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	bd38      	pop	{r3, r4, r5, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20002964 	.word	0x20002964

08009acc <_isatty_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4d06      	ldr	r5, [pc, #24]	@ (8009ae8 <_isatty_r+0x1c>)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	4608      	mov	r0, r1
 8009ad6:	602b      	str	r3, [r5, #0]
 8009ad8:	f7f7 fbb3 	bl	8001242 <_isatty>
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	d102      	bne.n	8009ae6 <_isatty_r+0x1a>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	b103      	cbz	r3, 8009ae6 <_isatty_r+0x1a>
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	20002964 	.word	0x20002964

08009aec <_sbrk_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	@ (8009b08 <_sbrk_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f7 fbbc 	bl	8001274 <_sbrk>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_sbrk_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_sbrk_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	20002964 	.word	0x20002964
 8009b0c:	00000000 	.word	0x00000000

08009b10 <nan>:
 8009b10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b18 <nan+0x8>
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	7ff80000 	.word	0x7ff80000

08009b20 <__assert_func>:
 8009b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b22:	4614      	mov	r4, r2
 8009b24:	461a      	mov	r2, r3
 8009b26:	4b09      	ldr	r3, [pc, #36]	@ (8009b4c <__assert_func+0x2c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	68d8      	ldr	r0, [r3, #12]
 8009b2e:	b14c      	cbz	r4, 8009b44 <__assert_func+0x24>
 8009b30:	4b07      	ldr	r3, [pc, #28]	@ (8009b50 <__assert_func+0x30>)
 8009b32:	9100      	str	r1, [sp, #0]
 8009b34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b38:	4906      	ldr	r1, [pc, #24]	@ (8009b54 <__assert_func+0x34>)
 8009b3a:	462b      	mov	r3, r5
 8009b3c:	f000 fba8 	bl	800a290 <fiprintf>
 8009b40:	f000 fbb8 	bl	800a2b4 <abort>
 8009b44:	4b04      	ldr	r3, [pc, #16]	@ (8009b58 <__assert_func+0x38>)
 8009b46:	461c      	mov	r4, r3
 8009b48:	e7f3      	b.n	8009b32 <__assert_func+0x12>
 8009b4a:	bf00      	nop
 8009b4c:	2000001c 	.word	0x2000001c
 8009b50:	0800a8ae 	.word	0x0800a8ae
 8009b54:	0800a8bb 	.word	0x0800a8bb
 8009b58:	0800a8e9 	.word	0x0800a8e9

08009b5c <_calloc_r>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	fba1 5402 	umull	r5, r4, r1, r2
 8009b62:	b934      	cbnz	r4, 8009b72 <_calloc_r+0x16>
 8009b64:	4629      	mov	r1, r5
 8009b66:	f7fe f953 	bl	8007e10 <_malloc_r>
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	b928      	cbnz	r0, 8009b7a <_calloc_r+0x1e>
 8009b6e:	4630      	mov	r0, r6
 8009b70:	bd70      	pop	{r4, r5, r6, pc}
 8009b72:	220c      	movs	r2, #12
 8009b74:	6002      	str	r2, [r0, #0]
 8009b76:	2600      	movs	r6, #0
 8009b78:	e7f9      	b.n	8009b6e <_calloc_r+0x12>
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	f7fd f9f7 	bl	8006f70 <memset>
 8009b82:	e7f4      	b.n	8009b6e <_calloc_r+0x12>

08009b84 <rshift>:
 8009b84:	6903      	ldr	r3, [r0, #16]
 8009b86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b92:	f100 0414 	add.w	r4, r0, #20
 8009b96:	dd45      	ble.n	8009c24 <rshift+0xa0>
 8009b98:	f011 011f 	ands.w	r1, r1, #31
 8009b9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ba0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ba4:	d10c      	bne.n	8009bc0 <rshift+0x3c>
 8009ba6:	f100 0710 	add.w	r7, r0, #16
 8009baa:	4629      	mov	r1, r5
 8009bac:	42b1      	cmp	r1, r6
 8009bae:	d334      	bcc.n	8009c1a <rshift+0x96>
 8009bb0:	1a9b      	subs	r3, r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	1eea      	subs	r2, r5, #3
 8009bb6:	4296      	cmp	r6, r2
 8009bb8:	bf38      	it	cc
 8009bba:	2300      	movcc	r3, #0
 8009bbc:	4423      	add	r3, r4
 8009bbe:	e015      	b.n	8009bec <rshift+0x68>
 8009bc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bc4:	f1c1 0820 	rsb	r8, r1, #32
 8009bc8:	40cf      	lsrs	r7, r1
 8009bca:	f105 0e04 	add.w	lr, r5, #4
 8009bce:	46a1      	mov	r9, r4
 8009bd0:	4576      	cmp	r6, lr
 8009bd2:	46f4      	mov	ip, lr
 8009bd4:	d815      	bhi.n	8009c02 <rshift+0x7e>
 8009bd6:	1a9a      	subs	r2, r3, r2
 8009bd8:	0092      	lsls	r2, r2, #2
 8009bda:	3a04      	subs	r2, #4
 8009bdc:	3501      	adds	r5, #1
 8009bde:	42ae      	cmp	r6, r5
 8009be0:	bf38      	it	cc
 8009be2:	2200      	movcc	r2, #0
 8009be4:	18a3      	adds	r3, r4, r2
 8009be6:	50a7      	str	r7, [r4, r2]
 8009be8:	b107      	cbz	r7, 8009bec <rshift+0x68>
 8009bea:	3304      	adds	r3, #4
 8009bec:	1b1a      	subs	r2, r3, r4
 8009bee:	42a3      	cmp	r3, r4
 8009bf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009bf4:	bf08      	it	eq
 8009bf6:	2300      	moveq	r3, #0
 8009bf8:	6102      	str	r2, [r0, #16]
 8009bfa:	bf08      	it	eq
 8009bfc:	6143      	streq	r3, [r0, #20]
 8009bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c02:	f8dc c000 	ldr.w	ip, [ip]
 8009c06:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c0a:	ea4c 0707 	orr.w	r7, ip, r7
 8009c0e:	f849 7b04 	str.w	r7, [r9], #4
 8009c12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c16:	40cf      	lsrs	r7, r1
 8009c18:	e7da      	b.n	8009bd0 <rshift+0x4c>
 8009c1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c22:	e7c3      	b.n	8009bac <rshift+0x28>
 8009c24:	4623      	mov	r3, r4
 8009c26:	e7e1      	b.n	8009bec <rshift+0x68>

08009c28 <__hexdig_fun>:
 8009c28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c2c:	2b09      	cmp	r3, #9
 8009c2e:	d802      	bhi.n	8009c36 <__hexdig_fun+0xe>
 8009c30:	3820      	subs	r0, #32
 8009c32:	b2c0      	uxtb	r0, r0
 8009c34:	4770      	bx	lr
 8009c36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d801      	bhi.n	8009c42 <__hexdig_fun+0x1a>
 8009c3e:	3847      	subs	r0, #71	@ 0x47
 8009c40:	e7f7      	b.n	8009c32 <__hexdig_fun+0xa>
 8009c42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c46:	2b05      	cmp	r3, #5
 8009c48:	d801      	bhi.n	8009c4e <__hexdig_fun+0x26>
 8009c4a:	3827      	subs	r0, #39	@ 0x27
 8009c4c:	e7f1      	b.n	8009c32 <__hexdig_fun+0xa>
 8009c4e:	2000      	movs	r0, #0
 8009c50:	4770      	bx	lr
	...

08009c54 <__gethex>:
 8009c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	b085      	sub	sp, #20
 8009c5a:	468a      	mov	sl, r1
 8009c5c:	9302      	str	r3, [sp, #8]
 8009c5e:	680b      	ldr	r3, [r1, #0]
 8009c60:	9001      	str	r0, [sp, #4]
 8009c62:	4690      	mov	r8, r2
 8009c64:	1c9c      	adds	r4, r3, #2
 8009c66:	46a1      	mov	r9, r4
 8009c68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c6c:	2830      	cmp	r0, #48	@ 0x30
 8009c6e:	d0fa      	beq.n	8009c66 <__gethex+0x12>
 8009c70:	eba9 0303 	sub.w	r3, r9, r3
 8009c74:	f1a3 0b02 	sub.w	fp, r3, #2
 8009c78:	f7ff ffd6 	bl	8009c28 <__hexdig_fun>
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d168      	bne.n	8009d54 <__gethex+0x100>
 8009c82:	49a0      	ldr	r1, [pc, #640]	@ (8009f04 <__gethex+0x2b0>)
 8009c84:	2201      	movs	r2, #1
 8009c86:	4648      	mov	r0, r9
 8009c88:	f7ff fefc 	bl	8009a84 <strncmp>
 8009c8c:	4607      	mov	r7, r0
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d167      	bne.n	8009d62 <__gethex+0x10e>
 8009c92:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009c96:	4626      	mov	r6, r4
 8009c98:	f7ff ffc6 	bl	8009c28 <__hexdig_fun>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d062      	beq.n	8009d66 <__gethex+0x112>
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	7818      	ldrb	r0, [r3, #0]
 8009ca4:	2830      	cmp	r0, #48	@ 0x30
 8009ca6:	4699      	mov	r9, r3
 8009ca8:	f103 0301 	add.w	r3, r3, #1
 8009cac:	d0f9      	beq.n	8009ca2 <__gethex+0x4e>
 8009cae:	f7ff ffbb 	bl	8009c28 <__hexdig_fun>
 8009cb2:	fab0 f580 	clz	r5, r0
 8009cb6:	096d      	lsrs	r5, r5, #5
 8009cb8:	f04f 0b01 	mov.w	fp, #1
 8009cbc:	464a      	mov	r2, r9
 8009cbe:	4616      	mov	r6, r2
 8009cc0:	3201      	adds	r2, #1
 8009cc2:	7830      	ldrb	r0, [r6, #0]
 8009cc4:	f7ff ffb0 	bl	8009c28 <__hexdig_fun>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d1f8      	bne.n	8009cbe <__gethex+0x6a>
 8009ccc:	498d      	ldr	r1, [pc, #564]	@ (8009f04 <__gethex+0x2b0>)
 8009cce:	2201      	movs	r2, #1
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff fed7 	bl	8009a84 <strncmp>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d13f      	bne.n	8009d5a <__gethex+0x106>
 8009cda:	b944      	cbnz	r4, 8009cee <__gethex+0x9a>
 8009cdc:	1c74      	adds	r4, r6, #1
 8009cde:	4622      	mov	r2, r4
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	3201      	adds	r2, #1
 8009ce4:	7830      	ldrb	r0, [r6, #0]
 8009ce6:	f7ff ff9f 	bl	8009c28 <__hexdig_fun>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d1f8      	bne.n	8009ce0 <__gethex+0x8c>
 8009cee:	1ba4      	subs	r4, r4, r6
 8009cf0:	00a7      	lsls	r7, r4, #2
 8009cf2:	7833      	ldrb	r3, [r6, #0]
 8009cf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009cf8:	2b50      	cmp	r3, #80	@ 0x50
 8009cfa:	d13e      	bne.n	8009d7a <__gethex+0x126>
 8009cfc:	7873      	ldrb	r3, [r6, #1]
 8009cfe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d00:	d033      	beq.n	8009d6a <__gethex+0x116>
 8009d02:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d04:	d034      	beq.n	8009d70 <__gethex+0x11c>
 8009d06:	1c71      	adds	r1, r6, #1
 8009d08:	2400      	movs	r4, #0
 8009d0a:	7808      	ldrb	r0, [r1, #0]
 8009d0c:	f7ff ff8c 	bl	8009c28 <__hexdig_fun>
 8009d10:	1e43      	subs	r3, r0, #1
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b18      	cmp	r3, #24
 8009d16:	d830      	bhi.n	8009d7a <__gethex+0x126>
 8009d18:	f1a0 0210 	sub.w	r2, r0, #16
 8009d1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d20:	f7ff ff82 	bl	8009c28 <__hexdig_fun>
 8009d24:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d28:	fa5f fc8c 	uxtb.w	ip, ip
 8009d2c:	f1bc 0f18 	cmp.w	ip, #24
 8009d30:	f04f 030a 	mov.w	r3, #10
 8009d34:	d91e      	bls.n	8009d74 <__gethex+0x120>
 8009d36:	b104      	cbz	r4, 8009d3a <__gethex+0xe6>
 8009d38:	4252      	negs	r2, r2
 8009d3a:	4417      	add	r7, r2
 8009d3c:	f8ca 1000 	str.w	r1, [sl]
 8009d40:	b1ed      	cbz	r5, 8009d7e <__gethex+0x12a>
 8009d42:	f1bb 0f00 	cmp.w	fp, #0
 8009d46:	bf0c      	ite	eq
 8009d48:	2506      	moveq	r5, #6
 8009d4a:	2500      	movne	r5, #0
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	b005      	add	sp, #20
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	2500      	movs	r5, #0
 8009d56:	462c      	mov	r4, r5
 8009d58:	e7b0      	b.n	8009cbc <__gethex+0x68>
 8009d5a:	2c00      	cmp	r4, #0
 8009d5c:	d1c7      	bne.n	8009cee <__gethex+0x9a>
 8009d5e:	4627      	mov	r7, r4
 8009d60:	e7c7      	b.n	8009cf2 <__gethex+0x9e>
 8009d62:	464e      	mov	r6, r9
 8009d64:	462f      	mov	r7, r5
 8009d66:	2501      	movs	r5, #1
 8009d68:	e7c3      	b.n	8009cf2 <__gethex+0x9e>
 8009d6a:	2400      	movs	r4, #0
 8009d6c:	1cb1      	adds	r1, r6, #2
 8009d6e:	e7cc      	b.n	8009d0a <__gethex+0xb6>
 8009d70:	2401      	movs	r4, #1
 8009d72:	e7fb      	b.n	8009d6c <__gethex+0x118>
 8009d74:	fb03 0002 	mla	r0, r3, r2, r0
 8009d78:	e7ce      	b.n	8009d18 <__gethex+0xc4>
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	e7de      	b.n	8009d3c <__gethex+0xe8>
 8009d7e:	eba6 0309 	sub.w	r3, r6, r9
 8009d82:	3b01      	subs	r3, #1
 8009d84:	4629      	mov	r1, r5
 8009d86:	2b07      	cmp	r3, #7
 8009d88:	dc0a      	bgt.n	8009da0 <__gethex+0x14c>
 8009d8a:	9801      	ldr	r0, [sp, #4]
 8009d8c:	f7fe f8cc 	bl	8007f28 <_Balloc>
 8009d90:	4604      	mov	r4, r0
 8009d92:	b940      	cbnz	r0, 8009da6 <__gethex+0x152>
 8009d94:	4b5c      	ldr	r3, [pc, #368]	@ (8009f08 <__gethex+0x2b4>)
 8009d96:	4602      	mov	r2, r0
 8009d98:	21e4      	movs	r1, #228	@ 0xe4
 8009d9a:	485c      	ldr	r0, [pc, #368]	@ (8009f0c <__gethex+0x2b8>)
 8009d9c:	f7ff fec0 	bl	8009b20 <__assert_func>
 8009da0:	3101      	adds	r1, #1
 8009da2:	105b      	asrs	r3, r3, #1
 8009da4:	e7ef      	b.n	8009d86 <__gethex+0x132>
 8009da6:	f100 0a14 	add.w	sl, r0, #20
 8009daa:	2300      	movs	r3, #0
 8009dac:	4655      	mov	r5, sl
 8009dae:	469b      	mov	fp, r3
 8009db0:	45b1      	cmp	r9, r6
 8009db2:	d337      	bcc.n	8009e24 <__gethex+0x1d0>
 8009db4:	f845 bb04 	str.w	fp, [r5], #4
 8009db8:	eba5 050a 	sub.w	r5, r5, sl
 8009dbc:	10ad      	asrs	r5, r5, #2
 8009dbe:	6125      	str	r5, [r4, #16]
 8009dc0:	4658      	mov	r0, fp
 8009dc2:	f7fe f9a3 	bl	800810c <__hi0bits>
 8009dc6:	016d      	lsls	r5, r5, #5
 8009dc8:	f8d8 6000 	ldr.w	r6, [r8]
 8009dcc:	1a2d      	subs	r5, r5, r0
 8009dce:	42b5      	cmp	r5, r6
 8009dd0:	dd54      	ble.n	8009e7c <__gethex+0x228>
 8009dd2:	1bad      	subs	r5, r5, r6
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7fe fd2f 	bl	800883a <__any_on>
 8009ddc:	4681      	mov	r9, r0
 8009dde:	b178      	cbz	r0, 8009e00 <__gethex+0x1ac>
 8009de0:	1e6b      	subs	r3, r5, #1
 8009de2:	1159      	asrs	r1, r3, #5
 8009de4:	f003 021f 	and.w	r2, r3, #31
 8009de8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009dec:	f04f 0901 	mov.w	r9, #1
 8009df0:	fa09 f202 	lsl.w	r2, r9, r2
 8009df4:	420a      	tst	r2, r1
 8009df6:	d003      	beq.n	8009e00 <__gethex+0x1ac>
 8009df8:	454b      	cmp	r3, r9
 8009dfa:	dc36      	bgt.n	8009e6a <__gethex+0x216>
 8009dfc:	f04f 0902 	mov.w	r9, #2
 8009e00:	4629      	mov	r1, r5
 8009e02:	4620      	mov	r0, r4
 8009e04:	f7ff febe 	bl	8009b84 <rshift>
 8009e08:	442f      	add	r7, r5
 8009e0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e0e:	42bb      	cmp	r3, r7
 8009e10:	da42      	bge.n	8009e98 <__gethex+0x244>
 8009e12:	9801      	ldr	r0, [sp, #4]
 8009e14:	4621      	mov	r1, r4
 8009e16:	f7fe f8c7 	bl	8007fa8 <_Bfree>
 8009e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	25a3      	movs	r5, #163	@ 0xa3
 8009e22:	e793      	b.n	8009d4c <__gethex+0xf8>
 8009e24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e28:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e2a:	d012      	beq.n	8009e52 <__gethex+0x1fe>
 8009e2c:	2b20      	cmp	r3, #32
 8009e2e:	d104      	bne.n	8009e3a <__gethex+0x1e6>
 8009e30:	f845 bb04 	str.w	fp, [r5], #4
 8009e34:	f04f 0b00 	mov.w	fp, #0
 8009e38:	465b      	mov	r3, fp
 8009e3a:	7830      	ldrb	r0, [r6, #0]
 8009e3c:	9303      	str	r3, [sp, #12]
 8009e3e:	f7ff fef3 	bl	8009c28 <__hexdig_fun>
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	f000 000f 	and.w	r0, r0, #15
 8009e48:	4098      	lsls	r0, r3
 8009e4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e4e:	3304      	adds	r3, #4
 8009e50:	e7ae      	b.n	8009db0 <__gethex+0x15c>
 8009e52:	45b1      	cmp	r9, r6
 8009e54:	d8ea      	bhi.n	8009e2c <__gethex+0x1d8>
 8009e56:	492b      	ldr	r1, [pc, #172]	@ (8009f04 <__gethex+0x2b0>)
 8009e58:	9303      	str	r3, [sp, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f7ff fe11 	bl	8009a84 <strncmp>
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d1e1      	bne.n	8009e2c <__gethex+0x1d8>
 8009e68:	e7a2      	b.n	8009db0 <__gethex+0x15c>
 8009e6a:	1ea9      	subs	r1, r5, #2
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f7fe fce4 	bl	800883a <__any_on>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d0c2      	beq.n	8009dfc <__gethex+0x1a8>
 8009e76:	f04f 0903 	mov.w	r9, #3
 8009e7a:	e7c1      	b.n	8009e00 <__gethex+0x1ac>
 8009e7c:	da09      	bge.n	8009e92 <__gethex+0x23e>
 8009e7e:	1b75      	subs	r5, r6, r5
 8009e80:	4621      	mov	r1, r4
 8009e82:	9801      	ldr	r0, [sp, #4]
 8009e84:	462a      	mov	r2, r5
 8009e86:	f7fe fa9f 	bl	80083c8 <__lshift>
 8009e8a:	1b7f      	subs	r7, r7, r5
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	f100 0a14 	add.w	sl, r0, #20
 8009e92:	f04f 0900 	mov.w	r9, #0
 8009e96:	e7b8      	b.n	8009e0a <__gethex+0x1b6>
 8009e98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e9c:	42bd      	cmp	r5, r7
 8009e9e:	dd6f      	ble.n	8009f80 <__gethex+0x32c>
 8009ea0:	1bed      	subs	r5, r5, r7
 8009ea2:	42ae      	cmp	r6, r5
 8009ea4:	dc34      	bgt.n	8009f10 <__gethex+0x2bc>
 8009ea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d022      	beq.n	8009ef4 <__gethex+0x2a0>
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d024      	beq.n	8009efc <__gethex+0x2a8>
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d115      	bne.n	8009ee2 <__gethex+0x28e>
 8009eb6:	42ae      	cmp	r6, r5
 8009eb8:	d113      	bne.n	8009ee2 <__gethex+0x28e>
 8009eba:	2e01      	cmp	r6, #1
 8009ebc:	d10b      	bne.n	8009ed6 <__gethex+0x282>
 8009ebe:	9a02      	ldr	r2, [sp, #8]
 8009ec0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ec4:	6013      	str	r3, [r2, #0]
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	6123      	str	r3, [r4, #16]
 8009eca:	f8ca 3000 	str.w	r3, [sl]
 8009ece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ed0:	2562      	movs	r5, #98	@ 0x62
 8009ed2:	601c      	str	r4, [r3, #0]
 8009ed4:	e73a      	b.n	8009d4c <__gethex+0xf8>
 8009ed6:	1e71      	subs	r1, r6, #1
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f7fe fcae 	bl	800883a <__any_on>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d1ed      	bne.n	8009ebe <__gethex+0x26a>
 8009ee2:	9801      	ldr	r0, [sp, #4]
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	f7fe f85f 	bl	8007fa8 <_Bfree>
 8009eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eec:	2300      	movs	r3, #0
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	2550      	movs	r5, #80	@ 0x50
 8009ef2:	e72b      	b.n	8009d4c <__gethex+0xf8>
 8009ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f3      	bne.n	8009ee2 <__gethex+0x28e>
 8009efa:	e7e0      	b.n	8009ebe <__gethex+0x26a>
 8009efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1dd      	bne.n	8009ebe <__gethex+0x26a>
 8009f02:	e7ee      	b.n	8009ee2 <__gethex+0x28e>
 8009f04:	0800a893 	.word	0x0800a893
 8009f08:	0800a829 	.word	0x0800a829
 8009f0c:	0800a8ea 	.word	0x0800a8ea
 8009f10:	1e6f      	subs	r7, r5, #1
 8009f12:	f1b9 0f00 	cmp.w	r9, #0
 8009f16:	d130      	bne.n	8009f7a <__gethex+0x326>
 8009f18:	b127      	cbz	r7, 8009f24 <__gethex+0x2d0>
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f7fe fc8c 	bl	800883a <__any_on>
 8009f22:	4681      	mov	r9, r0
 8009f24:	117a      	asrs	r2, r7, #5
 8009f26:	2301      	movs	r3, #1
 8009f28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f2c:	f007 071f 	and.w	r7, r7, #31
 8009f30:	40bb      	lsls	r3, r7
 8009f32:	4213      	tst	r3, r2
 8009f34:	4629      	mov	r1, r5
 8009f36:	4620      	mov	r0, r4
 8009f38:	bf18      	it	ne
 8009f3a:	f049 0902 	orrne.w	r9, r9, #2
 8009f3e:	f7ff fe21 	bl	8009b84 <rshift>
 8009f42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f46:	1b76      	subs	r6, r6, r5
 8009f48:	2502      	movs	r5, #2
 8009f4a:	f1b9 0f00 	cmp.w	r9, #0
 8009f4e:	d047      	beq.n	8009fe0 <__gethex+0x38c>
 8009f50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d015      	beq.n	8009f84 <__gethex+0x330>
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d017      	beq.n	8009f8c <__gethex+0x338>
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d109      	bne.n	8009f74 <__gethex+0x320>
 8009f60:	f019 0f02 	tst.w	r9, #2
 8009f64:	d006      	beq.n	8009f74 <__gethex+0x320>
 8009f66:	f8da 3000 	ldr.w	r3, [sl]
 8009f6a:	ea49 0903 	orr.w	r9, r9, r3
 8009f6e:	f019 0f01 	tst.w	r9, #1
 8009f72:	d10e      	bne.n	8009f92 <__gethex+0x33e>
 8009f74:	f045 0510 	orr.w	r5, r5, #16
 8009f78:	e032      	b.n	8009fe0 <__gethex+0x38c>
 8009f7a:	f04f 0901 	mov.w	r9, #1
 8009f7e:	e7d1      	b.n	8009f24 <__gethex+0x2d0>
 8009f80:	2501      	movs	r5, #1
 8009f82:	e7e2      	b.n	8009f4a <__gethex+0x2f6>
 8009f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f86:	f1c3 0301 	rsb	r3, r3, #1
 8009f8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d0f0      	beq.n	8009f74 <__gethex+0x320>
 8009f92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f96:	f104 0314 	add.w	r3, r4, #20
 8009f9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009fa2:	f04f 0c00 	mov.w	ip, #0
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009fb0:	d01b      	beq.n	8009fea <__gethex+0x396>
 8009fb2:	3201      	adds	r2, #1
 8009fb4:	6002      	str	r2, [r0, #0]
 8009fb6:	2d02      	cmp	r5, #2
 8009fb8:	f104 0314 	add.w	r3, r4, #20
 8009fbc:	d13c      	bne.n	800a038 <__gethex+0x3e4>
 8009fbe:	f8d8 2000 	ldr.w	r2, [r8]
 8009fc2:	3a01      	subs	r2, #1
 8009fc4:	42b2      	cmp	r2, r6
 8009fc6:	d109      	bne.n	8009fdc <__gethex+0x388>
 8009fc8:	1171      	asrs	r1, r6, #5
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fd0:	f006 061f 	and.w	r6, r6, #31
 8009fd4:	fa02 f606 	lsl.w	r6, r2, r6
 8009fd8:	421e      	tst	r6, r3
 8009fda:	d13a      	bne.n	800a052 <__gethex+0x3fe>
 8009fdc:	f045 0520 	orr.w	r5, r5, #32
 8009fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe2:	601c      	str	r4, [r3, #0]
 8009fe4:	9b02      	ldr	r3, [sp, #8]
 8009fe6:	601f      	str	r7, [r3, #0]
 8009fe8:	e6b0      	b.n	8009d4c <__gethex+0xf8>
 8009fea:	4299      	cmp	r1, r3
 8009fec:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ff0:	d8d9      	bhi.n	8009fa6 <__gethex+0x352>
 8009ff2:	68a3      	ldr	r3, [r4, #8]
 8009ff4:	459b      	cmp	fp, r3
 8009ff6:	db17      	blt.n	800a028 <__gethex+0x3d4>
 8009ff8:	6861      	ldr	r1, [r4, #4]
 8009ffa:	9801      	ldr	r0, [sp, #4]
 8009ffc:	3101      	adds	r1, #1
 8009ffe:	f7fd ff93 	bl	8007f28 <_Balloc>
 800a002:	4681      	mov	r9, r0
 800a004:	b918      	cbnz	r0, 800a00e <__gethex+0x3ba>
 800a006:	4b1a      	ldr	r3, [pc, #104]	@ (800a070 <__gethex+0x41c>)
 800a008:	4602      	mov	r2, r0
 800a00a:	2184      	movs	r1, #132	@ 0x84
 800a00c:	e6c5      	b.n	8009d9a <__gethex+0x146>
 800a00e:	6922      	ldr	r2, [r4, #16]
 800a010:	3202      	adds	r2, #2
 800a012:	f104 010c 	add.w	r1, r4, #12
 800a016:	0092      	lsls	r2, r2, #2
 800a018:	300c      	adds	r0, #12
 800a01a:	f7fd f816 	bl	800704a <memcpy>
 800a01e:	4621      	mov	r1, r4
 800a020:	9801      	ldr	r0, [sp, #4]
 800a022:	f7fd ffc1 	bl	8007fa8 <_Bfree>
 800a026:	464c      	mov	r4, r9
 800a028:	6923      	ldr	r3, [r4, #16]
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a030:	6122      	str	r2, [r4, #16]
 800a032:	2201      	movs	r2, #1
 800a034:	615a      	str	r2, [r3, #20]
 800a036:	e7be      	b.n	8009fb6 <__gethex+0x362>
 800a038:	6922      	ldr	r2, [r4, #16]
 800a03a:	455a      	cmp	r2, fp
 800a03c:	dd0b      	ble.n	800a056 <__gethex+0x402>
 800a03e:	2101      	movs	r1, #1
 800a040:	4620      	mov	r0, r4
 800a042:	f7ff fd9f 	bl	8009b84 <rshift>
 800a046:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a04a:	3701      	adds	r7, #1
 800a04c:	42bb      	cmp	r3, r7
 800a04e:	f6ff aee0 	blt.w	8009e12 <__gethex+0x1be>
 800a052:	2501      	movs	r5, #1
 800a054:	e7c2      	b.n	8009fdc <__gethex+0x388>
 800a056:	f016 061f 	ands.w	r6, r6, #31
 800a05a:	d0fa      	beq.n	800a052 <__gethex+0x3fe>
 800a05c:	4453      	add	r3, sl
 800a05e:	f1c6 0620 	rsb	r6, r6, #32
 800a062:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a066:	f7fe f851 	bl	800810c <__hi0bits>
 800a06a:	42b0      	cmp	r0, r6
 800a06c:	dbe7      	blt.n	800a03e <__gethex+0x3ea>
 800a06e:	e7f0      	b.n	800a052 <__gethex+0x3fe>
 800a070:	0800a829 	.word	0x0800a829

0800a074 <L_shift>:
 800a074:	f1c2 0208 	rsb	r2, r2, #8
 800a078:	0092      	lsls	r2, r2, #2
 800a07a:	b570      	push	{r4, r5, r6, lr}
 800a07c:	f1c2 0620 	rsb	r6, r2, #32
 800a080:	6843      	ldr	r3, [r0, #4]
 800a082:	6804      	ldr	r4, [r0, #0]
 800a084:	fa03 f506 	lsl.w	r5, r3, r6
 800a088:	432c      	orrs	r4, r5
 800a08a:	40d3      	lsrs	r3, r2
 800a08c:	6004      	str	r4, [r0, #0]
 800a08e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a092:	4288      	cmp	r0, r1
 800a094:	d3f4      	bcc.n	800a080 <L_shift+0xc>
 800a096:	bd70      	pop	{r4, r5, r6, pc}

0800a098 <__match>:
 800a098:	b530      	push	{r4, r5, lr}
 800a09a:	6803      	ldr	r3, [r0, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a2:	b914      	cbnz	r4, 800a0aa <__match+0x12>
 800a0a4:	6003      	str	r3, [r0, #0]
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	bd30      	pop	{r4, r5, pc}
 800a0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a0b2:	2d19      	cmp	r5, #25
 800a0b4:	bf98      	it	ls
 800a0b6:	3220      	addls	r2, #32
 800a0b8:	42a2      	cmp	r2, r4
 800a0ba:	d0f0      	beq.n	800a09e <__match+0x6>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	e7f3      	b.n	800a0a8 <__match+0x10>

0800a0c0 <__hexnan>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	680b      	ldr	r3, [r1, #0]
 800a0c6:	6801      	ldr	r1, [r0, #0]
 800a0c8:	115e      	asrs	r6, r3, #5
 800a0ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0ce:	f013 031f 	ands.w	r3, r3, #31
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	bf18      	it	ne
 800a0d6:	3604      	addne	r6, #4
 800a0d8:	2500      	movs	r5, #0
 800a0da:	1f37      	subs	r7, r6, #4
 800a0dc:	4682      	mov	sl, r0
 800a0de:	4690      	mov	r8, r2
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0e6:	46b9      	mov	r9, r7
 800a0e8:	463c      	mov	r4, r7
 800a0ea:	9502      	str	r5, [sp, #8]
 800a0ec:	46ab      	mov	fp, r5
 800a0ee:	784a      	ldrb	r2, [r1, #1]
 800a0f0:	1c4b      	adds	r3, r1, #1
 800a0f2:	9303      	str	r3, [sp, #12]
 800a0f4:	b342      	cbz	r2, 800a148 <__hexnan+0x88>
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	9105      	str	r1, [sp, #20]
 800a0fa:	9204      	str	r2, [sp, #16]
 800a0fc:	f7ff fd94 	bl	8009c28 <__hexdig_fun>
 800a100:	2800      	cmp	r0, #0
 800a102:	d151      	bne.n	800a1a8 <__hexnan+0xe8>
 800a104:	9a04      	ldr	r2, [sp, #16]
 800a106:	9905      	ldr	r1, [sp, #20]
 800a108:	2a20      	cmp	r2, #32
 800a10a:	d818      	bhi.n	800a13e <__hexnan+0x7e>
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	459b      	cmp	fp, r3
 800a110:	dd13      	ble.n	800a13a <__hexnan+0x7a>
 800a112:	454c      	cmp	r4, r9
 800a114:	d206      	bcs.n	800a124 <__hexnan+0x64>
 800a116:	2d07      	cmp	r5, #7
 800a118:	dc04      	bgt.n	800a124 <__hexnan+0x64>
 800a11a:	462a      	mov	r2, r5
 800a11c:	4649      	mov	r1, r9
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff ffa8 	bl	800a074 <L_shift>
 800a124:	4544      	cmp	r4, r8
 800a126:	d952      	bls.n	800a1ce <__hexnan+0x10e>
 800a128:	2300      	movs	r3, #0
 800a12a:	f1a4 0904 	sub.w	r9, r4, #4
 800a12e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a132:	f8cd b008 	str.w	fp, [sp, #8]
 800a136:	464c      	mov	r4, r9
 800a138:	461d      	mov	r5, r3
 800a13a:	9903      	ldr	r1, [sp, #12]
 800a13c:	e7d7      	b.n	800a0ee <__hexnan+0x2e>
 800a13e:	2a29      	cmp	r2, #41	@ 0x29
 800a140:	d157      	bne.n	800a1f2 <__hexnan+0x132>
 800a142:	3102      	adds	r1, #2
 800a144:	f8ca 1000 	str.w	r1, [sl]
 800a148:	f1bb 0f00 	cmp.w	fp, #0
 800a14c:	d051      	beq.n	800a1f2 <__hexnan+0x132>
 800a14e:	454c      	cmp	r4, r9
 800a150:	d206      	bcs.n	800a160 <__hexnan+0xa0>
 800a152:	2d07      	cmp	r5, #7
 800a154:	dc04      	bgt.n	800a160 <__hexnan+0xa0>
 800a156:	462a      	mov	r2, r5
 800a158:	4649      	mov	r1, r9
 800a15a:	4620      	mov	r0, r4
 800a15c:	f7ff ff8a 	bl	800a074 <L_shift>
 800a160:	4544      	cmp	r4, r8
 800a162:	d936      	bls.n	800a1d2 <__hexnan+0x112>
 800a164:	f1a8 0204 	sub.w	r2, r8, #4
 800a168:	4623      	mov	r3, r4
 800a16a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a16e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a172:	429f      	cmp	r7, r3
 800a174:	d2f9      	bcs.n	800a16a <__hexnan+0xaa>
 800a176:	1b3b      	subs	r3, r7, r4
 800a178:	f023 0303 	bic.w	r3, r3, #3
 800a17c:	3304      	adds	r3, #4
 800a17e:	3401      	adds	r4, #1
 800a180:	3e03      	subs	r6, #3
 800a182:	42b4      	cmp	r4, r6
 800a184:	bf88      	it	hi
 800a186:	2304      	movhi	r3, #4
 800a188:	4443      	add	r3, r8
 800a18a:	2200      	movs	r2, #0
 800a18c:	f843 2b04 	str.w	r2, [r3], #4
 800a190:	429f      	cmp	r7, r3
 800a192:	d2fb      	bcs.n	800a18c <__hexnan+0xcc>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	b91b      	cbnz	r3, 800a1a0 <__hexnan+0xe0>
 800a198:	4547      	cmp	r7, r8
 800a19a:	d128      	bne.n	800a1ee <__hexnan+0x12e>
 800a19c:	2301      	movs	r3, #1
 800a19e:	603b      	str	r3, [r7, #0]
 800a1a0:	2005      	movs	r0, #5
 800a1a2:	b007      	add	sp, #28
 800a1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	2d08      	cmp	r5, #8
 800a1ac:	f10b 0b01 	add.w	fp, fp, #1
 800a1b0:	dd06      	ble.n	800a1c0 <__hexnan+0x100>
 800a1b2:	4544      	cmp	r4, r8
 800a1b4:	d9c1      	bls.n	800a13a <__hexnan+0x7a>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1bc:	2501      	movs	r5, #1
 800a1be:	3c04      	subs	r4, #4
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	f000 000f 	and.w	r0, r0, #15
 800a1c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a1ca:	6020      	str	r0, [r4, #0]
 800a1cc:	e7b5      	b.n	800a13a <__hexnan+0x7a>
 800a1ce:	2508      	movs	r5, #8
 800a1d0:	e7b3      	b.n	800a13a <__hexnan+0x7a>
 800a1d2:	9b01      	ldr	r3, [sp, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0dd      	beq.n	800a194 <__hexnan+0xd4>
 800a1d8:	f1c3 0320 	rsb	r3, r3, #32
 800a1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e0:	40da      	lsrs	r2, r3
 800a1e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a1ec:	e7d2      	b.n	800a194 <__hexnan+0xd4>
 800a1ee:	3f04      	subs	r7, #4
 800a1f0:	e7d0      	b.n	800a194 <__hexnan+0xd4>
 800a1f2:	2004      	movs	r0, #4
 800a1f4:	e7d5      	b.n	800a1a2 <__hexnan+0xe2>

0800a1f6 <__ascii_mbtowc>:
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	b901      	cbnz	r1, 800a1fc <__ascii_mbtowc+0x6>
 800a1fa:	a901      	add	r1, sp, #4
 800a1fc:	b142      	cbz	r2, 800a210 <__ascii_mbtowc+0x1a>
 800a1fe:	b14b      	cbz	r3, 800a214 <__ascii_mbtowc+0x1e>
 800a200:	7813      	ldrb	r3, [r2, #0]
 800a202:	600b      	str	r3, [r1, #0]
 800a204:	7812      	ldrb	r2, [r2, #0]
 800a206:	1e10      	subs	r0, r2, #0
 800a208:	bf18      	it	ne
 800a20a:	2001      	movne	r0, #1
 800a20c:	b002      	add	sp, #8
 800a20e:	4770      	bx	lr
 800a210:	4610      	mov	r0, r2
 800a212:	e7fb      	b.n	800a20c <__ascii_mbtowc+0x16>
 800a214:	f06f 0001 	mvn.w	r0, #1
 800a218:	e7f8      	b.n	800a20c <__ascii_mbtowc+0x16>

0800a21a <_realloc_r>:
 800a21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a21e:	4607      	mov	r7, r0
 800a220:	4614      	mov	r4, r2
 800a222:	460d      	mov	r5, r1
 800a224:	b921      	cbnz	r1, 800a230 <_realloc_r+0x16>
 800a226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22a:	4611      	mov	r1, r2
 800a22c:	f7fd bdf0 	b.w	8007e10 <_malloc_r>
 800a230:	b92a      	cbnz	r2, 800a23e <_realloc_r+0x24>
 800a232:	f7fd fd79 	bl	8007d28 <_free_r>
 800a236:	4625      	mov	r5, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a23e:	f000 f840 	bl	800a2c2 <_malloc_usable_size_r>
 800a242:	4284      	cmp	r4, r0
 800a244:	4606      	mov	r6, r0
 800a246:	d802      	bhi.n	800a24e <_realloc_r+0x34>
 800a248:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a24c:	d8f4      	bhi.n	800a238 <_realloc_r+0x1e>
 800a24e:	4621      	mov	r1, r4
 800a250:	4638      	mov	r0, r7
 800a252:	f7fd fddd 	bl	8007e10 <_malloc_r>
 800a256:	4680      	mov	r8, r0
 800a258:	b908      	cbnz	r0, 800a25e <_realloc_r+0x44>
 800a25a:	4645      	mov	r5, r8
 800a25c:	e7ec      	b.n	800a238 <_realloc_r+0x1e>
 800a25e:	42b4      	cmp	r4, r6
 800a260:	4622      	mov	r2, r4
 800a262:	4629      	mov	r1, r5
 800a264:	bf28      	it	cs
 800a266:	4632      	movcs	r2, r6
 800a268:	f7fc feef 	bl	800704a <memcpy>
 800a26c:	4629      	mov	r1, r5
 800a26e:	4638      	mov	r0, r7
 800a270:	f7fd fd5a 	bl	8007d28 <_free_r>
 800a274:	e7f1      	b.n	800a25a <_realloc_r+0x40>

0800a276 <__ascii_wctomb>:
 800a276:	4603      	mov	r3, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	b141      	cbz	r1, 800a28e <__ascii_wctomb+0x18>
 800a27c:	2aff      	cmp	r2, #255	@ 0xff
 800a27e:	d904      	bls.n	800a28a <__ascii_wctomb+0x14>
 800a280:	228a      	movs	r2, #138	@ 0x8a
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	4770      	bx	lr
 800a28a:	700a      	strb	r2, [r1, #0]
 800a28c:	2001      	movs	r0, #1
 800a28e:	4770      	bx	lr

0800a290 <fiprintf>:
 800a290:	b40e      	push	{r1, r2, r3}
 800a292:	b503      	push	{r0, r1, lr}
 800a294:	4601      	mov	r1, r0
 800a296:	ab03      	add	r3, sp, #12
 800a298:	4805      	ldr	r0, [pc, #20]	@ (800a2b0 <fiprintf+0x20>)
 800a29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29e:	6800      	ldr	r0, [r0, #0]
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	f000 f83f 	bl	800a324 <_vfiprintf_r>
 800a2a6:	b002      	add	sp, #8
 800a2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2ac:	b003      	add	sp, #12
 800a2ae:	4770      	bx	lr
 800a2b0:	2000001c 	.word	0x2000001c

0800a2b4 <abort>:
 800a2b4:	b508      	push	{r3, lr}
 800a2b6:	2006      	movs	r0, #6
 800a2b8:	f000 f974 	bl	800a5a4 <raise>
 800a2bc:	2001      	movs	r0, #1
 800a2be:	f7f6 ff7c 	bl	80011ba <_exit>

0800a2c2 <_malloc_usable_size_r>:
 800a2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2c6:	1f18      	subs	r0, r3, #4
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	bfbc      	itt	lt
 800a2cc:	580b      	ldrlt	r3, [r1, r0]
 800a2ce:	18c0      	addlt	r0, r0, r3
 800a2d0:	4770      	bx	lr

0800a2d2 <__sfputc_r>:
 800a2d2:	6893      	ldr	r3, [r2, #8]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	b410      	push	{r4}
 800a2da:	6093      	str	r3, [r2, #8]
 800a2dc:	da08      	bge.n	800a2f0 <__sfputc_r+0x1e>
 800a2de:	6994      	ldr	r4, [r2, #24]
 800a2e0:	42a3      	cmp	r3, r4
 800a2e2:	db01      	blt.n	800a2e8 <__sfputc_r+0x16>
 800a2e4:	290a      	cmp	r1, #10
 800a2e6:	d103      	bne.n	800a2f0 <__sfputc_r+0x1e>
 800a2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ec:	f7fc bd9b 	b.w	8006e26 <__swbuf_r>
 800a2f0:	6813      	ldr	r3, [r2, #0]
 800a2f2:	1c58      	adds	r0, r3, #1
 800a2f4:	6010      	str	r0, [r2, #0]
 800a2f6:	7019      	strb	r1, [r3, #0]
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <__sfputs_r>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	4606      	mov	r6, r0
 800a304:	460f      	mov	r7, r1
 800a306:	4614      	mov	r4, r2
 800a308:	18d5      	adds	r5, r2, r3
 800a30a:	42ac      	cmp	r4, r5
 800a30c:	d101      	bne.n	800a312 <__sfputs_r+0x12>
 800a30e:	2000      	movs	r0, #0
 800a310:	e007      	b.n	800a322 <__sfputs_r+0x22>
 800a312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a316:	463a      	mov	r2, r7
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff ffda 	bl	800a2d2 <__sfputc_r>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	d1f3      	bne.n	800a30a <__sfputs_r+0xa>
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a324 <_vfiprintf_r>:
 800a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a328:	460d      	mov	r5, r1
 800a32a:	b09d      	sub	sp, #116	@ 0x74
 800a32c:	4614      	mov	r4, r2
 800a32e:	4698      	mov	r8, r3
 800a330:	4606      	mov	r6, r0
 800a332:	b118      	cbz	r0, 800a33c <_vfiprintf_r+0x18>
 800a334:	6a03      	ldr	r3, [r0, #32]
 800a336:	b90b      	cbnz	r3, 800a33c <_vfiprintf_r+0x18>
 800a338:	f7fc fc7c 	bl	8006c34 <__sinit>
 800a33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a33e:	07d9      	lsls	r1, r3, #31
 800a340:	d405      	bmi.n	800a34e <_vfiprintf_r+0x2a>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	059a      	lsls	r2, r3, #22
 800a346:	d402      	bmi.n	800a34e <_vfiprintf_r+0x2a>
 800a348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a34a:	f7fc fe7c 	bl	8007046 <__retarget_lock_acquire_recursive>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	071b      	lsls	r3, r3, #28
 800a352:	d501      	bpl.n	800a358 <_vfiprintf_r+0x34>
 800a354:	692b      	ldr	r3, [r5, #16]
 800a356:	b99b      	cbnz	r3, 800a380 <_vfiprintf_r+0x5c>
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7fc fda2 	bl	8006ea4 <__swsetup_r>
 800a360:	b170      	cbz	r0, 800a380 <_vfiprintf_r+0x5c>
 800a362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a364:	07dc      	lsls	r4, r3, #31
 800a366:	d504      	bpl.n	800a372 <_vfiprintf_r+0x4e>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	b01d      	add	sp, #116	@ 0x74
 800a36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	0598      	lsls	r0, r3, #22
 800a376:	d4f7      	bmi.n	800a368 <_vfiprintf_r+0x44>
 800a378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a37a:	f7fc fe65 	bl	8007048 <__retarget_lock_release_recursive>
 800a37e:	e7f3      	b.n	800a368 <_vfiprintf_r+0x44>
 800a380:	2300      	movs	r3, #0
 800a382:	9309      	str	r3, [sp, #36]	@ 0x24
 800a384:	2320      	movs	r3, #32
 800a386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a38a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a38e:	2330      	movs	r3, #48	@ 0x30
 800a390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a540 <_vfiprintf_r+0x21c>
 800a394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a398:	f04f 0901 	mov.w	r9, #1
 800a39c:	4623      	mov	r3, r4
 800a39e:	469a      	mov	sl, r3
 800a3a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a4:	b10a      	cbz	r2, 800a3aa <_vfiprintf_r+0x86>
 800a3a6:	2a25      	cmp	r2, #37	@ 0x25
 800a3a8:	d1f9      	bne.n	800a39e <_vfiprintf_r+0x7a>
 800a3aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ae:	d00b      	beq.n	800a3c8 <_vfiprintf_r+0xa4>
 800a3b0:	465b      	mov	r3, fp
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f7ff ffa2 	bl	800a300 <__sfputs_r>
 800a3bc:	3001      	adds	r0, #1
 800a3be:	f000 80a7 	beq.w	800a510 <_vfiprintf_r+0x1ec>
 800a3c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3c4:	445a      	add	r2, fp
 800a3c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 809f 	beq.w	800a510 <_vfiprintf_r+0x1ec>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3dc:	f10a 0a01 	add.w	sl, sl, #1
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3ea:	4654      	mov	r4, sl
 800a3ec:	2205      	movs	r2, #5
 800a3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f2:	4853      	ldr	r0, [pc, #332]	@ (800a540 <_vfiprintf_r+0x21c>)
 800a3f4:	f7f5 ff3c 	bl	8000270 <memchr>
 800a3f8:	9a04      	ldr	r2, [sp, #16]
 800a3fa:	b9d8      	cbnz	r0, 800a434 <_vfiprintf_r+0x110>
 800a3fc:	06d1      	lsls	r1, r2, #27
 800a3fe:	bf44      	itt	mi
 800a400:	2320      	movmi	r3, #32
 800a402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a406:	0713      	lsls	r3, r2, #28
 800a408:	bf44      	itt	mi
 800a40a:	232b      	movmi	r3, #43	@ 0x2b
 800a40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a410:	f89a 3000 	ldrb.w	r3, [sl]
 800a414:	2b2a      	cmp	r3, #42	@ 0x2a
 800a416:	d015      	beq.n	800a444 <_vfiprintf_r+0x120>
 800a418:	9a07      	ldr	r2, [sp, #28]
 800a41a:	4654      	mov	r4, sl
 800a41c:	2000      	movs	r0, #0
 800a41e:	f04f 0c0a 	mov.w	ip, #10
 800a422:	4621      	mov	r1, r4
 800a424:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a428:	3b30      	subs	r3, #48	@ 0x30
 800a42a:	2b09      	cmp	r3, #9
 800a42c:	d94b      	bls.n	800a4c6 <_vfiprintf_r+0x1a2>
 800a42e:	b1b0      	cbz	r0, 800a45e <_vfiprintf_r+0x13a>
 800a430:	9207      	str	r2, [sp, #28]
 800a432:	e014      	b.n	800a45e <_vfiprintf_r+0x13a>
 800a434:	eba0 0308 	sub.w	r3, r0, r8
 800a438:	fa09 f303 	lsl.w	r3, r9, r3
 800a43c:	4313      	orrs	r3, r2
 800a43e:	9304      	str	r3, [sp, #16]
 800a440:	46a2      	mov	sl, r4
 800a442:	e7d2      	b.n	800a3ea <_vfiprintf_r+0xc6>
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	1d19      	adds	r1, r3, #4
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	9103      	str	r1, [sp, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bfbb      	ittet	lt
 800a450:	425b      	neglt	r3, r3
 800a452:	f042 0202 	orrlt.w	r2, r2, #2
 800a456:	9307      	strge	r3, [sp, #28]
 800a458:	9307      	strlt	r3, [sp, #28]
 800a45a:	bfb8      	it	lt
 800a45c:	9204      	strlt	r2, [sp, #16]
 800a45e:	7823      	ldrb	r3, [r4, #0]
 800a460:	2b2e      	cmp	r3, #46	@ 0x2e
 800a462:	d10a      	bne.n	800a47a <_vfiprintf_r+0x156>
 800a464:	7863      	ldrb	r3, [r4, #1]
 800a466:	2b2a      	cmp	r3, #42	@ 0x2a
 800a468:	d132      	bne.n	800a4d0 <_vfiprintf_r+0x1ac>
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	1d1a      	adds	r2, r3, #4
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	9203      	str	r2, [sp, #12]
 800a472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a476:	3402      	adds	r4, #2
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a550 <_vfiprintf_r+0x22c>
 800a47e:	7821      	ldrb	r1, [r4, #0]
 800a480:	2203      	movs	r2, #3
 800a482:	4650      	mov	r0, sl
 800a484:	f7f5 fef4 	bl	8000270 <memchr>
 800a488:	b138      	cbz	r0, 800a49a <_vfiprintf_r+0x176>
 800a48a:	9b04      	ldr	r3, [sp, #16]
 800a48c:	eba0 000a 	sub.w	r0, r0, sl
 800a490:	2240      	movs	r2, #64	@ 0x40
 800a492:	4082      	lsls	r2, r0
 800a494:	4313      	orrs	r3, r2
 800a496:	3401      	adds	r4, #1
 800a498:	9304      	str	r3, [sp, #16]
 800a49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a49e:	4829      	ldr	r0, [pc, #164]	@ (800a544 <_vfiprintf_r+0x220>)
 800a4a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4a4:	2206      	movs	r2, #6
 800a4a6:	f7f5 fee3 	bl	8000270 <memchr>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d03f      	beq.n	800a52e <_vfiprintf_r+0x20a>
 800a4ae:	4b26      	ldr	r3, [pc, #152]	@ (800a548 <_vfiprintf_r+0x224>)
 800a4b0:	bb1b      	cbnz	r3, 800a4fa <_vfiprintf_r+0x1d6>
 800a4b2:	9b03      	ldr	r3, [sp, #12]
 800a4b4:	3307      	adds	r3, #7
 800a4b6:	f023 0307 	bic.w	r3, r3, #7
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	9303      	str	r3, [sp, #12]
 800a4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c0:	443b      	add	r3, r7
 800a4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4c4:	e76a      	b.n	800a39c <_vfiprintf_r+0x78>
 800a4c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	2001      	movs	r0, #1
 800a4ce:	e7a8      	b.n	800a422 <_vfiprintf_r+0xfe>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	3401      	adds	r4, #1
 800a4d4:	9305      	str	r3, [sp, #20]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	f04f 0c0a 	mov.w	ip, #10
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4e2:	3a30      	subs	r2, #48	@ 0x30
 800a4e4:	2a09      	cmp	r2, #9
 800a4e6:	d903      	bls.n	800a4f0 <_vfiprintf_r+0x1cc>
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0c6      	beq.n	800a47a <_vfiprintf_r+0x156>
 800a4ec:	9105      	str	r1, [sp, #20]
 800a4ee:	e7c4      	b.n	800a47a <_vfiprintf_r+0x156>
 800a4f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e7f0      	b.n	800a4dc <_vfiprintf_r+0x1b8>
 800a4fa:	ab03      	add	r3, sp, #12
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	462a      	mov	r2, r5
 800a500:	4b12      	ldr	r3, [pc, #72]	@ (800a54c <_vfiprintf_r+0x228>)
 800a502:	a904      	add	r1, sp, #16
 800a504:	4630      	mov	r0, r6
 800a506:	f7fb fd45 	bl	8005f94 <_printf_float>
 800a50a:	4607      	mov	r7, r0
 800a50c:	1c78      	adds	r0, r7, #1
 800a50e:	d1d6      	bne.n	800a4be <_vfiprintf_r+0x19a>
 800a510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a512:	07d9      	lsls	r1, r3, #31
 800a514:	d405      	bmi.n	800a522 <_vfiprintf_r+0x1fe>
 800a516:	89ab      	ldrh	r3, [r5, #12]
 800a518:	059a      	lsls	r2, r3, #22
 800a51a:	d402      	bmi.n	800a522 <_vfiprintf_r+0x1fe>
 800a51c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a51e:	f7fc fd93 	bl	8007048 <__retarget_lock_release_recursive>
 800a522:	89ab      	ldrh	r3, [r5, #12]
 800a524:	065b      	lsls	r3, r3, #25
 800a526:	f53f af1f 	bmi.w	800a368 <_vfiprintf_r+0x44>
 800a52a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a52c:	e71e      	b.n	800a36c <_vfiprintf_r+0x48>
 800a52e:	ab03      	add	r3, sp, #12
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	462a      	mov	r2, r5
 800a534:	4b05      	ldr	r3, [pc, #20]	@ (800a54c <_vfiprintf_r+0x228>)
 800a536:	a904      	add	r1, sp, #16
 800a538:	4630      	mov	r0, r6
 800a53a:	f7fb ffc3 	bl	80064c4 <_printf_i>
 800a53e:	e7e4      	b.n	800a50a <_vfiprintf_r+0x1e6>
 800a540:	0800a895 	.word	0x0800a895
 800a544:	0800a89f 	.word	0x0800a89f
 800a548:	08005f95 	.word	0x08005f95
 800a54c:	0800a301 	.word	0x0800a301
 800a550:	0800a89b 	.word	0x0800a89b

0800a554 <_raise_r>:
 800a554:	291f      	cmp	r1, #31
 800a556:	b538      	push	{r3, r4, r5, lr}
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	d904      	bls.n	800a568 <_raise_r+0x14>
 800a55e:	2316      	movs	r3, #22
 800a560:	6003      	str	r3, [r0, #0]
 800a562:	f04f 30ff 	mov.w	r0, #4294967295
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a56a:	b112      	cbz	r2, 800a572 <_raise_r+0x1e>
 800a56c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a570:	b94b      	cbnz	r3, 800a586 <_raise_r+0x32>
 800a572:	4628      	mov	r0, r5
 800a574:	f000 f830 	bl	800a5d8 <_getpid_r>
 800a578:	4622      	mov	r2, r4
 800a57a:	4601      	mov	r1, r0
 800a57c:	4628      	mov	r0, r5
 800a57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a582:	f000 b817 	b.w	800a5b4 <_kill_r>
 800a586:	2b01      	cmp	r3, #1
 800a588:	d00a      	beq.n	800a5a0 <_raise_r+0x4c>
 800a58a:	1c59      	adds	r1, r3, #1
 800a58c:	d103      	bne.n	800a596 <_raise_r+0x42>
 800a58e:	2316      	movs	r3, #22
 800a590:	6003      	str	r3, [r0, #0]
 800a592:	2001      	movs	r0, #1
 800a594:	e7e7      	b.n	800a566 <_raise_r+0x12>
 800a596:	2100      	movs	r1, #0
 800a598:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a59c:	4620      	mov	r0, r4
 800a59e:	4798      	blx	r3
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	e7e0      	b.n	800a566 <_raise_r+0x12>

0800a5a4 <raise>:
 800a5a4:	4b02      	ldr	r3, [pc, #8]	@ (800a5b0 <raise+0xc>)
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	6818      	ldr	r0, [r3, #0]
 800a5aa:	f7ff bfd3 	b.w	800a554 <_raise_r>
 800a5ae:	bf00      	nop
 800a5b0:	2000001c 	.word	0x2000001c

0800a5b4 <_kill_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d07      	ldr	r5, [pc, #28]	@ (800a5d4 <_kill_r+0x20>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	602b      	str	r3, [r5, #0]
 800a5c2:	f7f6 fdea 	bl	800119a <_kill>
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	d102      	bne.n	800a5d0 <_kill_r+0x1c>
 800a5ca:	682b      	ldr	r3, [r5, #0]
 800a5cc:	b103      	cbz	r3, 800a5d0 <_kill_r+0x1c>
 800a5ce:	6023      	str	r3, [r4, #0]
 800a5d0:	bd38      	pop	{r3, r4, r5, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20002964 	.word	0x20002964

0800a5d8 <_getpid_r>:
 800a5d8:	f7f6 bdd7 	b.w	800118a <_getpid>

0800a5dc <_init>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	bf00      	nop
 800a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	469e      	mov	lr, r3
 800a5e6:	4770      	bx	lr

0800a5e8 <_fini>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	bf00      	nop
 800a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ee:	bc08      	pop	{r3}
 800a5f0:	469e      	mov	lr, r3
 800a5f2:	4770      	bx	lr
